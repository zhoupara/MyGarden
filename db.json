{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"source/images/2020_11_12_pic02.png","path":"images/2020_11_12_pic02.png","modified":0,"renderable":0},{"_id":"source/images/2020_11_12_pic03.png","path":"images/2020_11_12_pic03.png","modified":0,"renderable":0},{"_id":"source/images/2020_11_13_pic00.png","path":"images/2020_11_13_pic00.png","modified":0,"renderable":0},{"_id":"source/images/2020_11_13_pic01.png","path":"images/2020_11_13_pic01.png","modified":0,"renderable":0},{"_id":"source/images/2020_11_13_pic02.png","path":"images/2020_11_13_pic02.png","modified":0,"renderable":0},{"_id":"source/images/2020_11_13_pic03.png","path":"images/2020_11_13_pic03.png","modified":0,"renderable":0},{"_id":"source/images/Snipaste_2020-09-13_20-58-39.png","path":"images/Snipaste_2020-09-13_20-58-39.png","modified":0,"renderable":0},{"_id":"source/images/Snipaste_2020-09-13_21-01-49.png","path":"images/Snipaste_2020-09-13_21-01-49.png","modified":0,"renderable":0},{"_id":"source/images/Snipaste_2020-09-13_21-04-19.png","path":"images/Snipaste_2020-09-13_21-04-19.png","modified":0,"renderable":0},{"_id":"source/images/Snipaste_2020-09-13_21-09-48.png","path":"images/Snipaste_2020-09-13_21-09-48.png","modified":0,"renderable":0},{"_id":"source/images/Snipaste_2020-09-13_21-11-56.png","path":"images/Snipaste_2020-09-13_21-11-56.png","modified":0,"renderable":0},{"_id":"source/images/fileIO01.png","path":"images/fileIO01.png","modified":0,"renderable":0},{"_id":"source/images/pic01.png","path":"images/pic01.png","modified":0,"renderable":0},{"_id":"source/images/ssh01.png","path":"images/ssh01.png","modified":0,"renderable":0},{"_id":"source/images/ssh02.png","path":"images/ssh02.png","modified":0,"renderable":0},{"_id":"source/images/ssh03.png","path":"images/ssh03.png","modified":0,"renderable":0},{"_id":"source/images/2021-01-11/a.png","path":"images/2021-01-11/a.png","modified":0,"renderable":0},{"_id":"source/images/2021-01-11/add_c.png","path":"images/2021-01-11/add_c.png","modified":0,"renderable":0},{"_id":"source/images/2021-01-11/add_h.png","path":"images/2021-01-11/add_h.png","modified":0,"renderable":0},{"_id":"source/images/2021-01-11/main_c.png","path":"images/2021-01-11/main_c.png","modified":0,"renderable":0},{"_id":"source/images/2021-01-11/make_a.png","path":"images/2021-01-11/make_a.png","modified":0,"renderable":0},{"_id":"source/images/2021-01-11/make_so.png","path":"images/2021-01-11/make_so.png","modified":0,"renderable":0},{"_id":"source/images/2021-01-11/so.png","path":"images/2021-01-11/so.png","modified":0,"renderable":0},{"_id":"source/images/2021-01-11/tree.png","path":"images/2021-01-11/tree.png","modified":0,"renderable":0},{"_id":"source/images/2021-02-19/ICMP报文.png","path":"images/2021-02-19/ICMP报文.png","modified":0,"renderable":0},{"_id":"source/images/2021-02-19/ICMP格式.jpg","path":"images/2021-02-19/ICMP格式.jpg","modified":0,"renderable":0},{"_id":"source/images/2021-02-19/ip报文头.png","path":"images/2021-02-19/ip报文头.png","modified":0,"renderable":0},{"_id":"source/images/2021-02-19/mac层.png","path":"images/2021-02-19/mac层.png","modified":0,"renderable":0},{"_id":"source/images/2021-02-19/ping.png","path":"images/2021-02-19/ping.png","modified":0,"renderable":0},{"_id":"source/images/2021-02-19/wireshark.png","path":"images/2021-02-19/wireshark.png","modified":0,"renderable":0},{"_id":"source/images/2021-0524/pic1.jpg","path":"images/2021-0524/pic1.jpg","modified":0,"renderable":0},{"_id":"source/images/2021-0524/pic2.jpg","path":"images/2021-0524/pic2.jpg","modified":0,"renderable":0},{"_id":"source/images/2021-0524/pic3.jpg","path":"images/2021-0524/pic3.jpg","modified":0,"renderable":0},{"_id":"source/images/2021-0524/pic4.jpg","path":"images/2021-0524/pic4.jpg","modified":0,"renderable":0},{"_id":"source/images/2021-0524/pic5.jpg","path":"images/2021-0524/pic5.jpg","modified":0,"renderable":0},{"_id":"source/images/fileno/fileno0.png","path":"images/fileno/fileno0.png","modified":0,"renderable":0},{"_id":"source/images/fileno/fileno1.png","path":"images/fileno/fileno1.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1742540834220},{"_id":"source/_posts/me.md","hash":"86bc4997d031ea718d358e73e7f66c23239bc40b","modified":1742542316923},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"312fa7c1ae472e18d88f6d01c54dc6f32f66255c","modified":1742541268477},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dbbd054721541f4d1f4fed4bc983bc19ff1f259a","modified":1742541268477},{"_id":"node_modules/hexo-theme-next/package.json","hash":"26e77380c9dd66388b9fd34eb9aac3e0ad510731","modified":1742541268443},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1742541268446},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1742541268444},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1742541268444},{"_id":"node_modules/hexo-theme-next/README.md","hash":"5dd295594b92dbe07b0376b505f29fb3884e77f9","modified":1742541268447},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1742541268476},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1742541268447},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1742541268477},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1742541268477},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1742541268477},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1742541268477},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1742541268616},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1742541268617},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1742541268477},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1742541268617},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1742541268615},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1742541268629},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1742541268617},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1742541268630},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1742541268631},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1742541268631},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1742541268632},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"b62faaa767a45a613dd042b5f1903675eb5a8cf9","modified":1742541268631},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1742541268632},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1742541268631},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1742541268633},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1742541268633},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1742541268633},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1742541268635},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"5c0f00cdac3f4727b880dd223f622a535736fa8e","modified":1742541268636},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"8eb6a9f231ce1bfa54cc54418ccf14f01dcc9a31","modified":1742541268636},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1742541268447},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1742541268449},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1742541268633},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1742541268453},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1742541268455},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1742541268457},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"285d5c4dffb97da659851fb6e53379a614619fd9","modified":1742541268446},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1742541268445},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1742541268445},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1742541268450},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1742541268458},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1742541268455},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1742541268450},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"952449064fcb6a5cefc281b585f9149809f857f1","modified":1742541268457},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1742541268451},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1742541268455},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1742541268459},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1742541268459},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"51704a2eadb0d363762ebf2e44994696e0843e40","modified":1742541268453},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1742541268451},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1742541268433},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1742541268458},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1742541268428},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1742541268436},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1742541268439},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"049b1a0b66563e39f68710bb576a8c7342ae749c","modified":1742541268430},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1742541268457},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1742541268447},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1742541268437},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"f2d45eb3f03662033608075e3fa895498d08712d","modified":1742541268431},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"25bb3ec3c7c456aa1d1650eb139605b7df7394eb","modified":1742541268438},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1742541268438},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1742541268438},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1742541268438},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1742541268423},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1742541268422},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1742541268424},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1742541268434},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"21567f1810f861b0a33db6514a4fcf18fb98467d","modified":1742541268446},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1742541268433},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1742541268435},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1742541268453},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"7d7bbc4a9970bd4c5449bc71b94364a8ec61e5d2","modified":1742541268436},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1742541268439},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1742541268439},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1742541268442},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1742541268440},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1742541268442},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1742541268438},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1742541268460},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"e21309d4165ebb6645084eed8dd749846ae981f1","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1742541268473},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"ebfe0954e3931431f46f913abe08d0212e06e7c2","modified":1742541268463},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1742541268415},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1742541268462},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1742541268460},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1742541268476},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1742541268474},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"f57f7e09eb6220f681fa8385082b0960502ce5c4","modified":1742541268432},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1742541268437},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1742541268427},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1742541268476},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1742541268440},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1742541268438},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"0996078604f356a4f6692b9b0838038b3b10aa8a","modified":1742541268439},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1742541268428},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1742541268427},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1742541268449},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"93c1d103d9d16581c944c51f3d0638f57c80ee41","modified":1742541268451},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"d7954a623be2ee9fe3eadc785b17c17afac6c34d","modified":1742541268441},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1742541268452},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1742541268452},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1742541268440},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1742541268422},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1742541268458},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1742541268457},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1742541268455},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1742541268449},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1742541268457},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1742541268457},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1742541268458},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1742541268457},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"6ad43135bd3aecf933ffdd750763e27ade36f97c","modified":1742541268453},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1742541268450},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1742541268458},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1742541268457},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1742541268450},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1742541268449},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1742541268457},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1742541268451},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1742541268455},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"1efeeda00db08a3c033798228dd0092ee532cc36","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1742541268451},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1742541268453},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1742541268459},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1742541268458},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1742541268451},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1742541268451},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1742541268450},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1742541268451},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1742541268450},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1742541268459},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1742541268453},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"41b28f05e6233fb37700f7151f55868be10a0965","modified":1742541268448},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"55c2468b2b7f035881d494085527d6554f37b556","modified":1742541268450},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1742541268428},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1742541268437},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1742541268441},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1742541268455},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1742541268442},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1742541268433},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1742541268425},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1742541268428},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1742541268454},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1742541268427},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1742541268429},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1742541268435},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1742541268433},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1742541268429},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1742541268442},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1742541268431},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1742541268451},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1742541268471},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"8a8f752260be5b8098393f9879b61ffe904465e8","modified":1742541268432},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1742541268459},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1742541268474},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1742541268473},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1742541268453},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1742541268474},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1742541268440},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"e814de4dab6aee6153d0a46438c231f94ed05e73","modified":1742541268469},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1742541268417},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1742541268430},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1742541268472},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"b8445c828d78a38e2de50bdc86b3bff66285ea0f","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"48b2dfc04df6409c6e0736ccc11462ad97d349b1","modified":1742541268473},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d898944f9a68da04c9c9bc4afeec4b5595b76783","modified":1742541268469},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1742541268471},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1742541268474},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1742541268474},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1742541268470},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1742541268472},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1742541268476},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"69c66aab4651e2e7ae9e65f08600144970648c60","modified":1742541268476},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1742541268465},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1742541268473},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1742541268439},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"bcbf498d8d3ecea84324f0a59b7f95f389a52b8d","modified":1742541268473},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1742541268470},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1742541268467},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1742541268473},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e792a6233e1d4dbc5fd2f10ae97b7a790b82568b","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"a03f16ffc7dfdbdc6053f9fd68d77257ba0c559e","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1742541268473},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1742541268432},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1742541268432},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1742541268436},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1742541268440},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1742541268429},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1742541268426},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1742541268426},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1742541268431},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1742541268434},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1742541268420},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1742541268442},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1742541268435},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1742541268468},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1742541268429},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1742541268434},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"111f60e26b82b4d5be4357737e9273617778c9a9","modified":1742541268419},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1742541268431},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1742541268434},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"1d1b6d847215b16f26b230859d7e16501190ecc0","modified":1742541268436},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1742541268439},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1742541268443},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1742541268470},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1742541268470},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4262628e173b16c4c6c18f817173dd103fb9e9a8","modified":1742541268435},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1742541268471},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1742541268471},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"93f014809d6442da23f8b7d729f7375e2badba7d","modified":1742541268474},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1742541268474},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1742541268474},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1742541268474},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1742541268474},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1742541268471},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1742541268476},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1742541268471},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1742541268471},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"b47fb36915962309553ff7fb1782341585ed2b76","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1742541268473},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"be60b8dacd4dc9d2b1b68982dc4f0c5325b9a315","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1742541268476},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1742541268436},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1742541268471},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1742541268472},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1742541268472},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"21acb11e397526132605eef23bde7b307aa1eab5","modified":1742541268472},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1742541268473},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"86b110899eaae51b85c4c95eadfe7a912e58a813","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1742541268470},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1742541268476},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-copyright.styl","hash":"56805b77fe236fac19e19c716a49363bcf986311","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1742541268471},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"9b0217e1caecd91e05572c7e8e52d32016ca312f","modified":1742541268472},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1742541268476},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1742541268471},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1742541268472},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1742541268476},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1742541268471},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1742541268473},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1742541268473},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"8213015d9cae45d2c9945f8aba9d8db39c734efc","modified":1742541268474},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1742541268474},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"c3be8b0738f693e750486bb71769c3dbbec174cc","modified":1742541268476},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1742541268476},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"49329a7144f3413d1c832e52a1f4954171ef11e1","modified":1742541268473},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1742541268475},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1742541268469},{"_id":"public/2025/03/21/me/index.html","hash":"b3075462eda1fa7408c4dbd4e50ba410295e9f48","modified":1742545189647},{"_id":"public/2025/03/21/hello-world/index.html","hash":"6dcaa9361def793b03307269e68ac46309571e9f","modified":1742545189647},{"_id":"public/archives/index.html","hash":"43731c0b9cfbcd0fe8395e56dbf9892d86350257","modified":1742545189647},{"_id":"public/archives/2025/index.html","hash":"36722efa79fe37b58e1f82ca3753b8cd2e3dd240","modified":1742545189647},{"_id":"public/archives/2025/03/index.html","hash":"875580138b7194557479d39e7a3887acd819fb4a","modified":1742545189647},{"_id":"public/index.html","hash":"6ff580b07c012e0124e387bf473f68c6c27f17c3","modified":1742545189647},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1742542341931},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1742542341931},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1742542341931},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1742542341931},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1742542341931},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1742542341931},{"_id":"public/css/main.css","hash":"2c30d63399bb5e66f5d8ac53a90c221f4b0de27e","modified":1742542341931},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1742542341931},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1742542341931},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1742542341931},{"_id":"public/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1742542341931},{"_id":"public/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1742542341931},{"_id":"public/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1742542341931},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1742542341931},{"_id":"public/js/pjax.js","hash":"0996078604f356a4f6692b9b0838038b3b10aa8a","modified":1742542341931},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1742542341931},{"_id":"public/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1742542341931},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1742542341931},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1742542341931},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1742542341931},{"_id":"public/js/utils.js","hash":"d7954a623be2ee9fe3eadc785b17c17afac6c34d","modified":1742542341931},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1742542341931},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1742542341931},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1742542341931},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1742542341931},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1742542341931},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1742542341931},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1742542341931},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1742542341931},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1742542341931},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1742542341931},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1742542341931},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1742542341931},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1742542341931},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1742542341931},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1742542341931},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1742542341931},{"_id":"public/js/third-party/search/local-search.js","hash":"4262628e173b16c4c6c18f817173dd103fb9e9a8","modified":1742542341931},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1742542341931},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1742542341931},{"_id":"public/js/third-party/tags/mermaid.js","hash":"1d1b6d847215b16f26b230859d7e16501190ecc0","modified":1742542341931},{"_id":"public/js/third-party/search/algolia-search.js","hash":"111f60e26b82b4d5be4357737e9273617778c9a9","modified":1742542341931},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1742542341931},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1742542341931},{"_id":"source/_data/footer.swig","hash":"51caf6ba389dc86e3d4f4276ce6892fd1f7513ca","modified":1742545146473},{"_id":"source/_posts/0524.md","hash":"81a7e0a076035e40d50ea308b814bf5ba3902c10","modified":1742545146474},{"_id":"source/_posts/2020-11-13.md","hash":"80d6cefdeb8d501abe3ed12a5290ffae293e56c8","modified":1742545146474},{"_id":"source/_posts/03-30.md","hash":"a333c1f06d4c3d531fd11e2ce55a25ccee9942d1","modified":1742545146474},{"_id":"source/_posts/2020-11-12.md","hash":"a9f9c3aaaabd0a245572a6c7dbd1e120af4be076","modified":1742545146474},{"_id":"source/_posts/909.md","hash":"02b340cac20dea7fa6bd9b37ee85e109b54a4e4a","modified":1742545146474},{"_id":"source/_posts/2021-02-19.md","hash":"55d92b191cf1085947ad3342b935d084da825212","modified":1742545146474},{"_id":"source/_posts/2021-01-11.md","hash":"8c318d9f396d6972b90324346d034dcfc3736232","modified":1742545146474},{"_id":"source/_posts/08-22.md","hash":"c1d569a57b8d488b9f017603911aaed3dc86ee5d","modified":1742545146474},{"_id":"source/_posts/T1006.md","hash":"340ecfff8d4785ffac03d1aae18523c1ba9000cc","modified":1742545146474},{"_id":"source/_posts/fileIO.md","hash":"018205002770c3317abcb1f2ce78ad77d34bf53a","modified":1742545146475},{"_id":"source/_posts/running-page.md","hash":"09cd45313210689a7db60f5f81dcffa7b24212e2","modified":1742545146482},{"_id":"source/_posts/ssh01.md","hash":"277f19e84c7638cc247aefc39ea42118fbe61aaf","modified":1742545146482},{"_id":"source/_posts/stdIO.md","hash":"e25317424f298242a1821a5302289dbb303adc6f","modified":1742545146483},{"_id":"source/_posts/weekend.md","hash":"be2507e2dac5333856ee14f858dc60937f8c6233","modified":1742545146483},{"_id":"source/images/2020_11_12_pic02.png","hash":"5f6fe5873b847deb4acb23ad01caf0315e408264","modified":1742545146483},{"_id":"source/images/2020_11_12_pic03.png","hash":"e7c383c2c28f1210d30079cc5caab460175a9c7e","modified":1742545146483},{"_id":"source/_posts/fileno.md","hash":"b4015faaf31d5db2f56951582eaa5a2e87e44672","modified":1742545146475},{"_id":"source/_posts/func-io.md","hash":"89caca2b5ca16b3a600f16f6e0a692c3d53c3559","modified":1742545146482},{"_id":"source/images/2020_11_13_pic02.png","hash":"1ec33c9bb024207eba9c50b4132e51ddf87d05ff","modified":1742545146484},{"_id":"source/images/2020_11_13_pic01.png","hash":"6b50edd0048caaae9e5015b723da2c62f4732dc4","modified":1742545146484},{"_id":"source/images/2020_11_13_pic03.png","hash":"7b4c4e654849757b40c3479b7e1d04177a7a4366","modified":1742545146484},{"_id":"source/images/fileIO01.png","hash":"1db25d07c9c7d140b7233c6f686b3f72278320d3","modified":1742545146509},{"_id":"source/images/ssh03.png","hash":"98322cdf6995e57acc6ce4308e3d6c3c825a0c78","modified":1742545146517},{"_id":"source/images/ssh02.png","hash":"3e2191864369f371cc8a4f201c9ece0234b9195b","modified":1742545146516},{"_id":"source/images/pic01.png","hash":"25a9c45f08ac67a34f66559d0761b243b98ec89c","modified":1742545146516},{"_id":"source/_posts/fileno/fileno0.png","hash":"d8846060e4eb107662440552cf31ae4999b85f85","modified":1742545146475},{"_id":"source/images/ssh01.png","hash":"e95b15c227604aa1e732531eb14158bcf646d634","modified":1742545146516},{"_id":"source/images/2021-01-11/tree.png","hash":"0fb0c908789648965af4e1b21bb4835efdfda8e5","modified":1742545146490},{"_id":"source/images/2021-02-19/ICMP报文.png","hash":"d8a357944428542ee94784a896cfce4f624770ba","modified":1742545146490},{"_id":"source/images/2021-02-19/ip报文头.png","hash":"61acb4e5d0d148a479951d48541ed7f6a521ae9a","modified":1742545146492},{"_id":"source/images/2021-02-19/ping.png","hash":"02fca93857e36d907f904d54d90c3080df4621b5","modified":1742545146492},{"_id":"source/images/fileno/fileno0.png","hash":"d8846060e4eb107662440552cf31ae4999b85f85","modified":1742545146509},{"_id":"source/images/2020_11_13_pic00.png","hash":"2b3694c840b822690d235c15358d8f6393f3c875","modified":1742545146483},{"_id":"source/images/2021-02-19/mac层.png","hash":"dff7b255b0a62384dbd2a8ea17a202ee1d766bfe","modified":1742545146492},{"_id":"source/images/2021-01-11/add_c.png","hash":"acc1a5aac476cd55c318654a352b95fa3e807a22","modified":1742545146485},{"_id":"source/images/2021-01-11/add_h.png","hash":"760b6f1d75e1ceb402bde232e2d8596111eaed32","modified":1742545146486},{"_id":"source/images/2021-02-19/wireshark.png","hash":"4c9f5c61ee23c5542cb02d25e3e237124e5f2134","modified":1742545146492},{"_id":"source/images/2021-0524/pic2.jpg","hash":"5212c8c97031bbdafd571198480582fcae1d501b","modified":1742545146494},{"_id":"source/images/2021-01-11/a.png","hash":"12b5516d326043c4eda93908886274cb80c82024","modified":1742545146485},{"_id":"source/images/2021-01-11/so.png","hash":"1f6d311475241ccccef83692c3d68dba2e4b0302","modified":1742545146490},{"_id":"source/images/2021-01-11/main_c.png","hash":"a6e9385baea89aa2327a011ea545006785218a7f","modified":1742545146487},{"_id":"source/images/2021-02-19/ICMP格式.jpg","hash":"98126d75391cb1e781279d20c31b71565c145855","modified":1742545146491},{"_id":"source/images/2021-0524/pic4.jpg","hash":"9428f52dc5186a8bd9fdda2b03e7b8a68942736f","modified":1742545146495},{"_id":"source/images/2021-01-11/make_a.png","hash":"01f04416fd026d41f93152646d2921e4c312e61d","modified":1742545146488},{"_id":"source/images/2021-01-11/make_so.png","hash":"75e700839870c748fe8e64586c8eb388263d5c17","modified":1742545146489},{"_id":"source/images/2021-0524/pic3.jpg","hash":"e0dfc868f61a9a9e594904c1c0caf047e9595687","modified":1742545146494},{"_id":"source/images/2021-0524/pic1.jpg","hash":"fc92bfca3ac4359f35bc8cb6508ed3988bbd607c","modified":1742545146493},{"_id":"source/images/2021-0524/pic5.jpg","hash":"3fe3cd49938c4b5571f817de6d8e50518599b690","modified":1742545146496},{"_id":"source/images/Snipaste_2020-09-13_21-09-48.png","hash":"68937f8aa4fa78d098fca2d1c6094163b42e3ef7","modified":1742545146506},{"_id":"source/images/Snipaste_2020-09-13_21-11-56.png","hash":"28060c832ac1d25d52ab179f4319929650268cb6","modified":1742545146508},{"_id":"source/images/Snipaste_2020-09-13_21-04-19.png","hash":"1f19a7dccae0380f61f11adb6f45f4fc9d7b1ba2","modified":1742545146504},{"_id":"source/_posts/fileno/fileno1.png","hash":"443565443cb783eb91bb30dcb13631c9f1870500","modified":1742545146481},{"_id":"source/images/fileno/fileno1.png","hash":"443565443cb783eb91bb30dcb13631c9f1870500","modified":1742545146515},{"_id":"source/images/Snipaste_2020-09-13_20-58-39.png","hash":"b5ac0ce5d46a8bc1f3cdbcf75dbfc305b6220c7f","modified":1742545146498},{"_id":"source/images/Snipaste_2020-09-13_21-01-49.png","hash":"034059bab55a8ddbf5333a63f05842081340ae68","modified":1742545146502},{"_id":"public/2025/01/06/running-page/index.html","hash":"b902e9740bc9587be36d090c0d6607579d0aa345","modified":1742545189647},{"_id":"public/2021/03/30/03-30/index.html","hash":"caaa2a7b8dac224c17baeeecbb8d3d19028e75a9","modified":1742545189647},{"_id":"public/2021/08/22/08-22/index.html","hash":"d112fa56d24c84f43038dfa675861db03cec5c70","modified":1742545189647},{"_id":"public/2021/05/24/0524/index.html","hash":"cfad26c8c81784607fb53723c7cd22cfab007429","modified":1742545189647},{"_id":"public/2021/01/11/2021-01-11/index.html","hash":"b914130d8e08b102c9fb4f9949680578d2e2ef35","modified":1742545189647},{"_id":"public/2020/11/13/2020-11-13/index.html","hash":"5fe82631ceec7cfb45d03aee801f526b826dd2b0","modified":1742545189647},{"_id":"public/2020/11/12/2020-11-12/index.html","hash":"23aa8073512ae08a0af07195c68114f5d3a137e1","modified":1742545189647},{"_id":"public/2020/10/12/fileIO/index.html","hash":"c751f3d4fe1753f8135b78f9b2eeca88576e3293","modified":1742545189647},{"_id":"public/2021/02/19/2021-02-19/index.html","hash":"6609664841953c62e13998ef0335cc54dbca0cd7","modified":1742545189647},{"_id":"public/2020/10/12/stdIO/index.html","hash":"1c17b86eeeda8f3e9ed2f0696a95084aba212c9a","modified":1742545189647},{"_id":"public/2020/09/30/func-io/index.html","hash":"f6296b2610f9035470b4f44b4159913b10c4b702","modified":1742545189647},{"_id":"public/2020/09/24/fileno/index.html","hash":"c7dd14e537a6d3ffbca9606fe5960cac8e380cd8","modified":1742545189647},{"_id":"public/2020/09/13/weekend/index.html","hash":"e32fc7d4303ef5f1c5816581075d33a96f591902","modified":1742545189647},{"_id":"public/2020/09/09/ssh01/index.html","hash":"b625f181dbc8514d32144a64280668ab2352ead9","modified":1742545189647},{"_id":"public/2019/10/06/T1006/index.html","hash":"bcb0678e50cd93282e46410be0d972b9d31e198f","modified":1742545189647},{"_id":"public/2019/09/09/909/index.html","hash":"ac45f1c032c77d92cf5c27944ac13f4253f257ee","modified":1742545189647},{"_id":"public/archives/page/2/index.html","hash":"f1dfaaa869ea77bf6ce5912646c5832bd19a65b0","modified":1742545189647},{"_id":"public/archives/2019/index.html","hash":"dbc655dafd185f65e8bd800d32733e77e4e69c10","modified":1742545189647},{"_id":"public/archives/2019/09/index.html","hash":"7209a3c5412f2ca641bdf14ca04de71966ff0a2f","modified":1742545189647},{"_id":"public/archives/2019/10/index.html","hash":"38a56efdc7da8e633e4812f54b03aba0149cc574","modified":1742545189647},{"_id":"public/archives/2020/index.html","hash":"1fb9c29a84a81fa7ea8337ec176f86b66c647a96","modified":1742545189647},{"_id":"public/archives/2020/09/index.html","hash":"493d59b9d984dcde3c53478d24aa2e26725c6887","modified":1742545189647},{"_id":"public/archives/2020/11/index.html","hash":"6f6e440d93740d76d508caa9a72c88504a77fe6c","modified":1742545189647},{"_id":"public/archives/2020/10/index.html","hash":"7a913b7b6310e520445d8f0115c05127a59ae18c","modified":1742545189647},{"_id":"public/archives/2021/index.html","hash":"7a39d6c5d117cbdfadd0e708036e6809514d655b","modified":1742545189647},{"_id":"public/archives/2021/01/index.html","hash":"de4bd0316a04ab13b94019bf56de7a834bfe8520","modified":1742545189647},{"_id":"public/archives/2021/02/index.html","hash":"2da842f56d77fcae3fa02c51b3acf0d026bde9bb","modified":1742545189647},{"_id":"public/archives/2021/03/index.html","hash":"bb015089f2e377539d0212200f60f579e63a4491","modified":1742545189647},{"_id":"public/archives/2021/05/index.html","hash":"57323e0e03ec27cc99c37f5b2946e7d676d3cb0b","modified":1742545189647},{"_id":"public/archives/2021/08/index.html","hash":"c46d4c4a99e23f1ef30adf76c6deda30e84ea529","modified":1742545189647},{"_id":"public/archives/2025/01/index.html","hash":"aea017701352e76914ea4afd8429493a28b08869","modified":1742545189647},{"_id":"public/page/2/index.html","hash":"4ffc8f2790e9059e0fd5236cf77895db46448433","modified":1742545189647},{"_id":"public/tags/网络/index.html","hash":"688f373d786faff009ab41dc0bc41b1d9fc5b844","modified":1742545189647},{"_id":"public/tags/Technology/index.html","hash":"7a33fdcbe3f0c8f994eb431b6efc5447abf45788","modified":1742545189647},{"_id":"public/tags/fileno/index.html","hash":"1e0faa6295efaf11ca04f23d9d0368c537ef6100","modified":1742545189647},{"_id":"public/images/2020_11_12_pic02.png","hash":"5f6fe5873b847deb4acb23ad01caf0315e408264","modified":1742545189647},{"_id":"public/images/2020_11_13_pic02.png","hash":"1ec33c9bb024207eba9c50b4132e51ddf87d05ff","modified":1742545189647},{"_id":"public/images/2020_11_13_pic01.png","hash":"6b50edd0048caaae9e5015b723da2c62f4732dc4","modified":1742545189647},{"_id":"public/images/2020_11_13_pic03.png","hash":"7b4c4e654849757b40c3479b7e1d04177a7a4366","modified":1742545189647},{"_id":"public/images/fileIO01.png","hash":"1db25d07c9c7d140b7233c6f686b3f72278320d3","modified":1742545189647},{"_id":"public/images/ssh01.png","hash":"e95b15c227604aa1e732531eb14158bcf646d634","modified":1742545189647},{"_id":"public/images/ssh02.png","hash":"3e2191864369f371cc8a4f201c9ece0234b9195b","modified":1742545189647},{"_id":"public/images/2020_11_12_pic03.png","hash":"e7c383c2c28f1210d30079cc5caab460175a9c7e","modified":1742545189647},{"_id":"public/images/pic01.png","hash":"25a9c45f08ac67a34f66559d0761b243b98ec89c","modified":1742545189647},{"_id":"public/images/ssh03.png","hash":"98322cdf6995e57acc6ce4308e3d6c3c825a0c78","modified":1742545189647},{"_id":"public/images/2021-01-11/tree.png","hash":"0fb0c908789648965af4e1b21bb4835efdfda8e5","modified":1742545189647},{"_id":"public/images/2021-02-19/ICMP报文.png","hash":"d8a357944428542ee94784a896cfce4f624770ba","modified":1742545189647},{"_id":"public/images/2021-02-19/ip报文头.png","hash":"61acb4e5d0d148a479951d48541ed7f6a521ae9a","modified":1742545189647},{"_id":"public/images/2021-02-19/mac层.png","hash":"dff7b255b0a62384dbd2a8ea17a202ee1d766bfe","modified":1742545189647},{"_id":"public/images/2021-02-19/ping.png","hash":"02fca93857e36d907f904d54d90c3080df4621b5","modified":1742545189647},{"_id":"public/images/fileno/fileno0.png","hash":"d8846060e4eb107662440552cf31ae4999b85f85","modified":1742545189647},{"_id":"public/images/2020_11_13_pic00.png","hash":"2b3694c840b822690d235c15358d8f6393f3c875","modified":1742545189647},{"_id":"public/images/2021-01-11/add_h.png","hash":"760b6f1d75e1ceb402bde232e2d8596111eaed32","modified":1742545189647},{"_id":"public/images/2021-01-11/add_c.png","hash":"acc1a5aac476cd55c318654a352b95fa3e807a22","modified":1742545189647},{"_id":"public/images/2021-02-19/wireshark.png","hash":"4c9f5c61ee23c5542cb02d25e3e237124e5f2134","modified":1742545189647},{"_id":"public/images/2021-0524/pic2.jpg","hash":"5212c8c97031bbdafd571198480582fcae1d501b","modified":1742545189647},{"_id":"public/images/2021-01-11/a.png","hash":"12b5516d326043c4eda93908886274cb80c82024","modified":1742545189647},{"_id":"public/images/2021-01-11/so.png","hash":"1f6d311475241ccccef83692c3d68dba2e4b0302","modified":1742545189647},{"_id":"public/images/2021-02-19/ICMP格式.jpg","hash":"98126d75391cb1e781279d20c31b71565c145855","modified":1742545189647},{"_id":"public/images/2021-01-11/main_c.png","hash":"a6e9385baea89aa2327a011ea545006785218a7f","modified":1742545189647},{"_id":"public/images/2021-0524/pic4.jpg","hash":"9428f52dc5186a8bd9fdda2b03e7b8a68942736f","modified":1742545189647},{"_id":"public/images/2021-01-11/make_so.png","hash":"75e700839870c748fe8e64586c8eb388263d5c17","modified":1742545189647},{"_id":"public/images/2021-01-11/make_a.png","hash":"01f04416fd026d41f93152646d2921e4c312e61d","modified":1742545189647},{"_id":"public/images/2021-0524/pic5.jpg","hash":"3fe3cd49938c4b5571f817de6d8e50518599b690","modified":1742545189647},{"_id":"public/images/2021-0524/pic1.jpg","hash":"fc92bfca3ac4359f35bc8cb6508ed3988bbd607c","modified":1742545189647},{"_id":"public/images/2021-0524/pic3.jpg","hash":"e0dfc868f61a9a9e594904c1c0caf047e9595687","modified":1742545189647},{"_id":"public/images/Snipaste_2020-09-13_21-11-56.png","hash":"28060c832ac1d25d52ab179f4319929650268cb6","modified":1742545189647},{"_id":"public/images/Snipaste_2020-09-13_21-09-48.png","hash":"68937f8aa4fa78d098fca2d1c6094163b42e3ef7","modified":1742545189647},{"_id":"public/images/Snipaste_2020-09-13_21-04-19.png","hash":"1f19a7dccae0380f61f11adb6f45f4fc9d7b1ba2","modified":1742545189647},{"_id":"public/images/fileno/fileno1.png","hash":"443565443cb783eb91bb30dcb13631c9f1870500","modified":1742545189647},{"_id":"public/images/Snipaste_2020-09-13_20-58-39.png","hash":"b5ac0ce5d46a8bc1f3cdbcf75dbfc305b6220c7f","modified":1742545189647},{"_id":"public/images/Snipaste_2020-09-13_21-01-49.png","hash":"034059bab55a8ddbf5333a63f05842081340ae68","modified":1742545189647}],"Category":[],"Data":[{"_id":"footer","data":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>\n\n"}],"Page":[],"Post":[{"title":"me","date":"2025-03-21T07:31:56.000Z","_content":"","source":"_posts/me.md","raw":"---\ntitle: me\ndate: 2025-03-21 15:31:56\ntags:\n---\n","slug":"me","published":1,"updated":"2025-03-21T07:31:56.923Z","comments":1,"layout":"post","photos":[],"_id":"cm8igpw9v0000s0orasgj7ov8","content":"","excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-03-21T07:03:35.469Z","updated":"2025-03-21T07:07:14.220Z","comments":1,"layout":"post","photos":[],"_id":"cm8igpw9x0001s0orbjsua5bc","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"08-22 记","date":"2021-08-22T15:32:07.000Z","_content":"\n先把 前几天做的网页挂上\n[our_love](https://www.padparadccha.cn/love/)\n\n只因你，我想过有你在身边的生活\n只是明明已经幻想过很多次。\n幻想一起下班，做饭\n幻想周末一起活动\n在大学的时候就开始幻想\n\n<!--more-->\n甚至 现在我连我们在一起时，结婚时的发言，我都想过\n雷女士，我终于等到你。\n一直都是你。\n有你之后，一直就 想要有个家\n这一路太过漫长，但未来我和你会更漫长\n\n\n觉得自己 比以前有担当了，但是却始终鼓起不来勇气，\n我们俩之间 始终隔着那一层距离\n我想 我们可以从头开始 ？\n但我好像找不到 我俩的共同生活节奏\n是要真正的 生活在一起后吗\n\n但我相信 真正的爱 永远不会过期。\n=======================\n今天看到 朋友圈 发求婚视频\n羡慕(易羡慕体质)\n\n男生很用心，小情侣也很有夫妻相。\n视频 透露的爱情的味道\n\n我想我们的 爱情，如果在一起，\n应该也是这样的吧。\n毕竟，我俩用心维护的 结晶\n不会过期\n","source":"_posts/08-22.md","raw":"---\ntitle: 08-22 记\ndate: 2021-08-22 23:32:07\ntags:\n---\n\n先把 前几天做的网页挂上\n[our_love](https://www.padparadccha.cn/love/)\n\n只因你，我想过有你在身边的生活\n只是明明已经幻想过很多次。\n幻想一起下班，做饭\n幻想周末一起活动\n在大学的时候就开始幻想\n\n<!--more-->\n甚至 现在我连我们在一起时，结婚时的发言，我都想过\n雷女士，我终于等到你。\n一直都是你。\n有你之后，一直就 想要有个家\n这一路太过漫长，但未来我和你会更漫长\n\n\n觉得自己 比以前有担当了，但是却始终鼓起不来勇气，\n我们俩之间 始终隔着那一层距离\n我想 我们可以从头开始 ？\n但我好像找不到 我俩的共同生活节奏\n是要真正的 生活在一起后吗\n\n但我相信 真正的爱 永远不会过期。\n=======================\n今天看到 朋友圈 发求婚视频\n羡慕(易羡慕体质)\n\n男生很用心，小情侣也很有夫妻相。\n视频 透露的爱情的味道\n\n我想我们的 爱情，如果在一起，\n应该也是这样的吧。\n毕竟，我俩用心维护的 结晶\n不会过期\n","slug":"08-22","published":1,"updated":"2025-03-21T08:19:06.474Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmq000036or1nl18psj","content":"<p>先把 前几天做的网页挂上<br><a href=\"https://www.padparadccha.cn/love/\">our_love</a></p>\n<p>只因你，我想过有你在身边的生活<br>只是明明已经幻想过很多次。<br>幻想一起下班，做饭<br>幻想周末一起活动<br>在大学的时候就开始幻想</p>\n<span id=\"more\"></span>\n<p>甚至 现在我连我们在一起时，结婚时的发言，我都想过<br>雷女士，我终于等到你。<br>一直都是你。<br>有你之后，一直就 想要有个家<br>这一路太过漫长，但未来我和你会更漫长</p>\n<p>觉得自己 比以前有担当了，但是却始终鼓起不来勇气，<br>我们俩之间 始终隔着那一层距离<br>我想 我们可以从头开始 ？<br>但我好像找不到 我俩的共同生活节奏<br>是要真正的 生活在一起后吗</p>\n<h1 id=\"但我相信-真正的爱-永远不会过期。\"><a href=\"#但我相信-真正的爱-永远不会过期。\" class=\"headerlink\" title=\"但我相信 真正的爱 永远不会过期。\"></a>但我相信 真正的爱 永远不会过期。</h1><p>今天看到 朋友圈 发求婚视频<br>羡慕(易羡慕体质)</p>\n<p>男生很用心，小情侣也很有夫妻相。<br>视频 透露的爱情的味道</p>\n<p>我想我们的 爱情，如果在一起，<br>应该也是这样的吧。<br>毕竟，我俩用心维护的 结晶<br>不会过期</p>\n","excerpt":"<p>先把 前几天做的网页挂上<br><a href=\"https://www.padparadccha.cn/love/\">our_love</a></p>\n<p>只因你，我想过有你在身边的生活<br>只是明明已经幻想过很多次。<br>幻想一起下班，做饭<br>幻想周末一起活动<br>在大学的时候就开始幻想</p>","more":"<p>甚至 现在我连我们在一起时，结婚时的发言，我都想过<br>雷女士，我终于等到你。<br>一直都是你。<br>有你之后，一直就 想要有个家<br>这一路太过漫长，但未来我和你会更漫长</p>\n<p>觉得自己 比以前有担当了，但是却始终鼓起不来勇气，<br>我们俩之间 始终隔着那一层距离<br>我想 我们可以从头开始 ？<br>但我好像找不到 我俩的共同生活节奏<br>是要真正的 生活在一起后吗</p>\n<h1 id=\"但我相信-真正的爱-永远不会过期。\"><a href=\"#但我相信-真正的爱-永远不会过期。\" class=\"headerlink\" title=\"但我相信 真正的爱 永远不会过期。\"></a>但我相信 真正的爱 永远不会过期。</h1><p>今天看到 朋友圈 发求婚视频<br>羡慕(易羡慕体质)</p>\n<p>男生很用心，小情侣也很有夫妻相。<br>视频 透露的爱情的味道</p>\n<p>我想我们的 爱情，如果在一起，<br>应该也是这样的吧。<br>毕竟，我俩用心维护的 结晶<br>不会过期</p>"},{"title":"面试心得","date":"2021-03-30T02:17:27.000Z","_content":"\n\n","source":"_posts/03-30.md","raw":"---\ntitle: '面试心得'\ndate: 2021-03-30 10:17:27\ntags: \n---\n\n\n","slug":"03-30","published":1,"updated":"2025-03-21T08:19:06.474Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmr000136or3vjj4vir","content":"","excerpt":"","more":""},{"title":"成都分享会周末复盘","date":"2021-05-23T16:45:20.000Z","_content":"## 1.热点 --尊重生命 热爱生命\n1.\"袁隆平先生 过世\" \n2.\"甘肃越野赛 21人遇难\"\n\n逝者已逝，我们能做到就是传承精神。\n大的我可能还做不到，那我就不浪费一滴粮，节约爱惜每一滴粮。\n\n越野赛事情 \n个人对事情的风险评估 很重要\n```\n整件事 主要是恶劣天气突发，而大会没有强制要求运动员带相关安全保障的装备。到时运动员体温失衡而遇难。\n其实组织参加这些越野活动，认为是需要的，说的大一些，我们公民都要具备这种野外生存素质，来提高国民综合素质。\n而现状是，很多户外知识的普及不完全，很多民众对环境和不同地区的户外情况的不清楚。这是一条很漫长的路\n```\n## 参加 帅张成都线下大会\n一个月前，给自己定了这个计划，参加张哥成都线下大会。也终于等到了这天，过去的行程和回来的行程有些坎坷。但这不妨碍是一次对我自己的突破和成长。\n\n<!--more-->\n\n### 2.反思\n周五晚上，主要工作忙，没时间细细安排整个行程，倒是来回的行程出了差错。在等航班的时候，我深深的自己反思了。至于来回行程有多糟糕？成都线下大会，我简单列一下时间点\n```\n周五:\n晚上10点 到重庆机场\n\n晚上11点 一个人到重庆市中心观音桥 吃夜宵\n\n凌晨12点 打车到重庆西站\n\n凌晨1点半 到酒店   ---> 本来直接从机场打车到重庆西站就好\n周六：\n早上6点 酒店起床 \n\n6点50 赶火车 \n\n8点左右 重庆西站到成都东站\n\n近一个小时左右  地铁 赶到会场\n```\n以上就是我坎坷的去路行程，这行程是我出发前被迫制定的...\n```\n还有回来的行程\n预定的航班:  \n4点成都出发 到杭州 6点\n\n结果看错时间 以为是6点起飞 \n\n4点到机场的时候，完美错过\n\n原价定了晚上8点的航班 --> 准备把这种车票裱起来\n\n关键航班还延误\n\n在机场等了五个小时\n```\n自己的疏忽，损失的金钱和时间\n这不可谓是一个深深的教训\n遂，我给自己定下目标。每次出行前，把行程计划列完整再行动。\n做事也是，工作也是。我就是脑子里有一个可行性的想法后，就直接迷迷糊糊按着感觉走了。往往中间会出很多的不确定，导致时间的拖延，各种损失。\n\n以上是我对自己的行程反思，接下来讲讲这次大会我的收获～\n![Lena](/images/2021-0524/pic5.jpg)\n## 3.大会的分享\n### (1) 社交\n主动走出去，积极去交流，遇见倾听不同的人。我还是有点腼腆，不过我想我走出了这一步，慢慢的尝试，就会突破腼腆\n![Lena](/images/2021-0524/pic1.jpg)\n![Lena](/images/2021-0524/pic3.jpg)\n\n### (2) 把自己当创业者\n\"把自己当做创业者\"，这是张哥提出的，这是一句很宏观的话。算是总体方针，具体的实施还是得按自己的情况去创业。我个人暂时理解的，对于我个人来说：职场技术能力，职场综合能力(时间管理，沟通表达，处理事务，与人协作等)，以及个人生活能力。\n这些我都不足或欠缺，要花时间去尝试和学习，去补充。\n以创业者的思维处理问题，道理很简单，如何去实施，按照自己的情况怎么去做。得自己专研。\n\n### (3) 对自己狠一点 知道自己的痛点，想方设法去解决\n养成习惯，突破自我：张哥讲了他的经历。我觉得我能学习其精髓(赶飞机的事情)。知道自己的痛点，不惜一切去解决它。对就是这种和自己拼的精神，我是不具备的。\n很多时候，我困了就睡，得过且过，很多事情觉得没有也行，觉得都在我的承受范围内，也不会强迫自己。一直想要周围的环境来压迫自己，没有逼自己的决心。是我自己的问题。总觉得没有时间，工作忙，每当自己写的差不多，做的差不多的时候就想，\"OK，今天就到这里,明天再干吧。\"\n这就是缺少那种做好事情的决心。\n\n### (4) 转变角度 以生产者，服务者看产品和事物\n以创业者的角度看问题、看广告、去了解产品、去接触不同的事物。\n了解商业背后逻辑，去挖掘数据。这是我要尝试去做的角度和方向，或者说是养成的习惯。这次大会后，我隐隐有自己的方向---创业。\n创业九死一生，听起来就很不错。慢慢积累自己，等某一天恰好有了那机遇或者自己能力达到了，去满足自己这一颗想要不平凡的心。\n\n### (5) 跨圈 与不同的思想沟通\n当然是我来说，最重要的是走出来。\n相对于程序员封闭的圈子，跨圈交流，对不同人、行业的有新认知。张哥谈到，他做开发的时候，常常和产品，和运营混一起。每个人对事物有自己的角度，多交流，不同认知，海纳百川。\n\n### (6) 面对不同的机会，如何做选择\n说到如何做选择，我就是一个选择困难，遇到事情的时候，对事情判断的时候，总是想起特殊情况，倾向个例，独特。而张哥说，他相信概率，做选择的时候也是用概率的角度来做取舍。\n细的去信，我那是感性，而概率是理性。\n\n### (7) 对自己的要求\n后面问答会，提到，如何选择创业伙伴上？嘉宾提到一句话，有没有做过一件有结果的事？有结果的事可以是运营这几千粉丝的号，可以是组织办完一次优质的分享大会。我会想我自己，并没有。包括写的好物，也拿不出手。一个人做的有结果的事，我很认同。\n接下来的阶段，我就是要专攻一个领域。做成一件有结果的事。\n\n### (8) 个人情况\n1.如何安排好现在忙碌的工作时间和个人时间，是我接下来一个阶段要处理的\n\n2.或许我对业务的熟悉，处理工作的效率会加快，还有改变我的时间管理方法，以及我的碰到事情问的态度。这都是我要去解决的。\n\n3.接下来理想的上班状态，能轻松处理手头事务；有自己的时间，学习巩固技术。遇到好的点子，自己能出个工具去解决问题，有时间继续深耕好物，写写公众号~\n![Lena](/images/2021-0524/pic4.jpg)\n\nThe End\nwrite by 2021/05/24 凌晨1点\n","source":"_posts/0524.md","raw":"---\ntitle: '成都分享会周末复盘'\ndate: 2021-05-24 00:45:20\ntags: \n---\n## 1.热点 --尊重生命 热爱生命\n1.\"袁隆平先生 过世\" \n2.\"甘肃越野赛 21人遇难\"\n\n逝者已逝，我们能做到就是传承精神。\n大的我可能还做不到，那我就不浪费一滴粮，节约爱惜每一滴粮。\n\n越野赛事情 \n个人对事情的风险评估 很重要\n```\n整件事 主要是恶劣天气突发，而大会没有强制要求运动员带相关安全保障的装备。到时运动员体温失衡而遇难。\n其实组织参加这些越野活动，认为是需要的，说的大一些，我们公民都要具备这种野外生存素质，来提高国民综合素质。\n而现状是，很多户外知识的普及不完全，很多民众对环境和不同地区的户外情况的不清楚。这是一条很漫长的路\n```\n## 参加 帅张成都线下大会\n一个月前，给自己定了这个计划，参加张哥成都线下大会。也终于等到了这天，过去的行程和回来的行程有些坎坷。但这不妨碍是一次对我自己的突破和成长。\n\n<!--more-->\n\n### 2.反思\n周五晚上，主要工作忙，没时间细细安排整个行程，倒是来回的行程出了差错。在等航班的时候，我深深的自己反思了。至于来回行程有多糟糕？成都线下大会，我简单列一下时间点\n```\n周五:\n晚上10点 到重庆机场\n\n晚上11点 一个人到重庆市中心观音桥 吃夜宵\n\n凌晨12点 打车到重庆西站\n\n凌晨1点半 到酒店   ---> 本来直接从机场打车到重庆西站就好\n周六：\n早上6点 酒店起床 \n\n6点50 赶火车 \n\n8点左右 重庆西站到成都东站\n\n近一个小时左右  地铁 赶到会场\n```\n以上就是我坎坷的去路行程，这行程是我出发前被迫制定的...\n```\n还有回来的行程\n预定的航班:  \n4点成都出发 到杭州 6点\n\n结果看错时间 以为是6点起飞 \n\n4点到机场的时候，完美错过\n\n原价定了晚上8点的航班 --> 准备把这种车票裱起来\n\n关键航班还延误\n\n在机场等了五个小时\n```\n自己的疏忽，损失的金钱和时间\n这不可谓是一个深深的教训\n遂，我给自己定下目标。每次出行前，把行程计划列完整再行动。\n做事也是，工作也是。我就是脑子里有一个可行性的想法后，就直接迷迷糊糊按着感觉走了。往往中间会出很多的不确定，导致时间的拖延，各种损失。\n\n以上是我对自己的行程反思，接下来讲讲这次大会我的收获～\n![Lena](/images/2021-0524/pic5.jpg)\n## 3.大会的分享\n### (1) 社交\n主动走出去，积极去交流，遇见倾听不同的人。我还是有点腼腆，不过我想我走出了这一步，慢慢的尝试，就会突破腼腆\n![Lena](/images/2021-0524/pic1.jpg)\n![Lena](/images/2021-0524/pic3.jpg)\n\n### (2) 把自己当创业者\n\"把自己当做创业者\"，这是张哥提出的，这是一句很宏观的话。算是总体方针，具体的实施还是得按自己的情况去创业。我个人暂时理解的，对于我个人来说：职场技术能力，职场综合能力(时间管理，沟通表达，处理事务，与人协作等)，以及个人生活能力。\n这些我都不足或欠缺，要花时间去尝试和学习，去补充。\n以创业者的思维处理问题，道理很简单，如何去实施，按照自己的情况怎么去做。得自己专研。\n\n### (3) 对自己狠一点 知道自己的痛点，想方设法去解决\n养成习惯，突破自我：张哥讲了他的经历。我觉得我能学习其精髓(赶飞机的事情)。知道自己的痛点，不惜一切去解决它。对就是这种和自己拼的精神，我是不具备的。\n很多时候，我困了就睡，得过且过，很多事情觉得没有也行，觉得都在我的承受范围内，也不会强迫自己。一直想要周围的环境来压迫自己，没有逼自己的决心。是我自己的问题。总觉得没有时间，工作忙，每当自己写的差不多，做的差不多的时候就想，\"OK，今天就到这里,明天再干吧。\"\n这就是缺少那种做好事情的决心。\n\n### (4) 转变角度 以生产者，服务者看产品和事物\n以创业者的角度看问题、看广告、去了解产品、去接触不同的事物。\n了解商业背后逻辑，去挖掘数据。这是我要尝试去做的角度和方向，或者说是养成的习惯。这次大会后，我隐隐有自己的方向---创业。\n创业九死一生，听起来就很不错。慢慢积累自己，等某一天恰好有了那机遇或者自己能力达到了，去满足自己这一颗想要不平凡的心。\n\n### (5) 跨圈 与不同的思想沟通\n当然是我来说，最重要的是走出来。\n相对于程序员封闭的圈子，跨圈交流，对不同人、行业的有新认知。张哥谈到，他做开发的时候，常常和产品，和运营混一起。每个人对事物有自己的角度，多交流，不同认知，海纳百川。\n\n### (6) 面对不同的机会，如何做选择\n说到如何做选择，我就是一个选择困难，遇到事情的时候，对事情判断的时候，总是想起特殊情况，倾向个例，独特。而张哥说，他相信概率，做选择的时候也是用概率的角度来做取舍。\n细的去信，我那是感性，而概率是理性。\n\n### (7) 对自己的要求\n后面问答会，提到，如何选择创业伙伴上？嘉宾提到一句话，有没有做过一件有结果的事？有结果的事可以是运营这几千粉丝的号，可以是组织办完一次优质的分享大会。我会想我自己，并没有。包括写的好物，也拿不出手。一个人做的有结果的事，我很认同。\n接下来的阶段，我就是要专攻一个领域。做成一件有结果的事。\n\n### (8) 个人情况\n1.如何安排好现在忙碌的工作时间和个人时间，是我接下来一个阶段要处理的\n\n2.或许我对业务的熟悉，处理工作的效率会加快，还有改变我的时间管理方法，以及我的碰到事情问的态度。这都是我要去解决的。\n\n3.接下来理想的上班状态，能轻松处理手头事务；有自己的时间，学习巩固技术。遇到好的点子，自己能出个工具去解决问题，有时间继续深耕好物，写写公众号~\n![Lena](/images/2021-0524/pic4.jpg)\n\nThe End\nwrite by 2021/05/24 凌晨1点\n","slug":"0524","published":1,"updated":"2025-03-21T08:19:06.474Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmr000236or00b5edsy","content":"<h2 id=\"1-热点-–尊重生命-热爱生命\"><a href=\"#1-热点-–尊重生命-热爱生命\" class=\"headerlink\" title=\"1.热点 –尊重生命 热爱生命\"></a>1.热点 –尊重生命 热爱生命</h2><p>1.”袁隆平先生 过世”<br>2.”甘肃越野赛 21人遇难”</p>\n<p>逝者已逝，我们能做到就是传承精神。<br>大的我可能还做不到，那我就不浪费一滴粮，节约爱惜每一滴粮。</p>\n<p>越野赛事情<br>个人对事情的风险评估 很重要</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">整件事 主要是恶劣天气突发，而大会没有强制要求运动员带相关安全保障的装备。到时运动员体温失衡而遇难。</span><br><span class=\"line\">其实组织参加这些越野活动，认为是需要的，说的大一些，我们公民都要具备这种野外生存素质，来提高国民综合素质。</span><br><span class=\"line\">而现状是，很多户外知识的普及不完全，很多民众对环境和不同地区的户外情况的不清楚。这是一条很漫长的路</span><br></pre></td></tr></table></figure>\n<h2 id=\"参加-帅张成都线下大会\"><a href=\"#参加-帅张成都线下大会\" class=\"headerlink\" title=\"参加 帅张成都线下大会\"></a>参加 帅张成都线下大会</h2><p>一个月前，给自己定了这个计划，参加张哥成都线下大会。也终于等到了这天，过去的行程和回来的行程有些坎坷。但这不妨碍是一次对我自己的突破和成长。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"2-反思\"><a href=\"#2-反思\" class=\"headerlink\" title=\"2.反思\"></a>2.反思</h3><p>周五晚上，主要工作忙，没时间细细安排整个行程，倒是来回的行程出了差错。在等航班的时候，我深深的自己反思了。至于来回行程有多糟糕？成都线下大会，我简单列一下时间点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">周五:</span><br><span class=\"line\">晚上10点 到重庆机场</span><br><span class=\"line\"></span><br><span class=\"line\">晚上11点 一个人到重庆市中心观音桥 吃夜宵</span><br><span class=\"line\"></span><br><span class=\"line\">凌晨12点 打车到重庆西站</span><br><span class=\"line\"></span><br><span class=\"line\">凌晨1点半 到酒店   ---&gt; 本来直接从机场打车到重庆西站就好</span><br><span class=\"line\">周六：</span><br><span class=\"line\">早上6点 酒店起床 </span><br><span class=\"line\"></span><br><span class=\"line\">6点50 赶火车 </span><br><span class=\"line\"></span><br><span class=\"line\">8点左右 重庆西站到成都东站</span><br><span class=\"line\"></span><br><span class=\"line\">近一个小时左右  地铁 赶到会场</span><br></pre></td></tr></table></figure>\n<p>以上就是我坎坷的去路行程，这行程是我出发前被迫制定的…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">还有回来的行程</span><br><span class=\"line\">预定的航班:  </span><br><span class=\"line\">4点成都出发 到杭州 6点</span><br><span class=\"line\"></span><br><span class=\"line\">结果看错时间 以为是6点起飞 </span><br><span class=\"line\"></span><br><span class=\"line\">4点到机场的时候，完美错过</span><br><span class=\"line\"></span><br><span class=\"line\">原价定了晚上8点的航班 --&gt; 准备把这种车票裱起来</span><br><span class=\"line\"></span><br><span class=\"line\">关键航班还延误</span><br><span class=\"line\"></span><br><span class=\"line\">在机场等了五个小时</span><br></pre></td></tr></table></figure>\n<p>自己的疏忽，损失的金钱和时间<br>这不可谓是一个深深的教训<br>遂，我给自己定下目标。每次出行前，把行程计划列完整再行动。<br>做事也是，工作也是。我就是脑子里有一个可行性的想法后，就直接迷迷糊糊按着感觉走了。往往中间会出很多的不确定，导致时间的拖延，各种损失。</p>\n<p>以上是我对自己的行程反思，接下来讲讲这次大会我的收获～<br><img src=\"/images/2021-0524/pic5.jpg\" alt=\"Lena\"></p>\n<h2 id=\"3-大会的分享\"><a href=\"#3-大会的分享\" class=\"headerlink\" title=\"3.大会的分享\"></a>3.大会的分享</h2><h3 id=\"1-社交\"><a href=\"#1-社交\" class=\"headerlink\" title=\"(1) 社交\"></a>(1) 社交</h3><p>主动走出去，积极去交流，遇见倾听不同的人。我还是有点腼腆，不过我想我走出了这一步，慢慢的尝试，就会突破腼腆<br><img src=\"/images/2021-0524/pic1.jpg\" alt=\"Lena\"><br><img src=\"/images/2021-0524/pic3.jpg\" alt=\"Lena\"></p>\n<h3 id=\"2-把自己当创业者\"><a href=\"#2-把自己当创业者\" class=\"headerlink\" title=\"(2) 把自己当创业者\"></a>(2) 把自己当创业者</h3><p>“把自己当做创业者”，这是张哥提出的，这是一句很宏观的话。算是总体方针，具体的实施还是得按自己的情况去创业。我个人暂时理解的，对于我个人来说：职场技术能力，职场综合能力(时间管理，沟通表达，处理事务，与人协作等)，以及个人生活能力。<br>这些我都不足或欠缺，要花时间去尝试和学习，去补充。<br>以创业者的思维处理问题，道理很简单，如何去实施，按照自己的情况怎么去做。得自己专研。</p>\n<h3 id=\"3-对自己狠一点-知道自己的痛点，想方设法去解决\"><a href=\"#3-对自己狠一点-知道自己的痛点，想方设法去解决\" class=\"headerlink\" title=\"(3) 对自己狠一点 知道自己的痛点，想方设法去解决\"></a>(3) 对自己狠一点 知道自己的痛点，想方设法去解决</h3><p>养成习惯，突破自我：张哥讲了他的经历。我觉得我能学习其精髓(赶飞机的事情)。知道自己的痛点，不惜一切去解决它。对就是这种和自己拼的精神，我是不具备的。<br>很多时候，我困了就睡，得过且过，很多事情觉得没有也行，觉得都在我的承受范围内，也不会强迫自己。一直想要周围的环境来压迫自己，没有逼自己的决心。是我自己的问题。总觉得没有时间，工作忙，每当自己写的差不多，做的差不多的时候就想，”OK，今天就到这里,明天再干吧。”<br>这就是缺少那种做好事情的决心。</p>\n<h3 id=\"4-转变角度-以生产者，服务者看产品和事物\"><a href=\"#4-转变角度-以生产者，服务者看产品和事物\" class=\"headerlink\" title=\"(4) 转变角度 以生产者，服务者看产品和事物\"></a>(4) 转变角度 以生产者，服务者看产品和事物</h3><p>以创业者的角度看问题、看广告、去了解产品、去接触不同的事物。<br>了解商业背后逻辑，去挖掘数据。这是我要尝试去做的角度和方向，或者说是养成的习惯。这次大会后，我隐隐有自己的方向—创业。<br>创业九死一生，听起来就很不错。慢慢积累自己，等某一天恰好有了那机遇或者自己能力达到了，去满足自己这一颗想要不平凡的心。</p>\n<h3 id=\"5-跨圈-与不同的思想沟通\"><a href=\"#5-跨圈-与不同的思想沟通\" class=\"headerlink\" title=\"(5) 跨圈 与不同的思想沟通\"></a>(5) 跨圈 与不同的思想沟通</h3><p>当然是我来说，最重要的是走出来。<br>相对于程序员封闭的圈子，跨圈交流，对不同人、行业的有新认知。张哥谈到，他做开发的时候，常常和产品，和运营混一起。每个人对事物有自己的角度，多交流，不同认知，海纳百川。</p>\n<h3 id=\"6-面对不同的机会，如何做选择\"><a href=\"#6-面对不同的机会，如何做选择\" class=\"headerlink\" title=\"(6) 面对不同的机会，如何做选择\"></a>(6) 面对不同的机会，如何做选择</h3><p>说到如何做选择，我就是一个选择困难，遇到事情的时候，对事情判断的时候，总是想起特殊情况，倾向个例，独特。而张哥说，他相信概率，做选择的时候也是用概率的角度来做取舍。<br>细的去信，我那是感性，而概率是理性。</p>\n<h3 id=\"7-对自己的要求\"><a href=\"#7-对自己的要求\" class=\"headerlink\" title=\"(7) 对自己的要求\"></a>(7) 对自己的要求</h3><p>后面问答会，提到，如何选择创业伙伴上？嘉宾提到一句话，有没有做过一件有结果的事？有结果的事可以是运营这几千粉丝的号，可以是组织办完一次优质的分享大会。我会想我自己，并没有。包括写的好物，也拿不出手。一个人做的有结果的事，我很认同。<br>接下来的阶段，我就是要专攻一个领域。做成一件有结果的事。</p>\n<h3 id=\"8-个人情况\"><a href=\"#8-个人情况\" class=\"headerlink\" title=\"(8) 个人情况\"></a>(8) 个人情况</h3><p>1.如何安排好现在忙碌的工作时间和个人时间，是我接下来一个阶段要处理的</p>\n<p>2.或许我对业务的熟悉，处理工作的效率会加快，还有改变我的时间管理方法，以及我的碰到事情问的态度。这都是我要去解决的。</p>\n<p>3.接下来理想的上班状态，能轻松处理手头事务；有自己的时间，学习巩固技术。遇到好的点子，自己能出个工具去解决问题，有时间继续深耕好物，写写公众号~<br><img src=\"/images/2021-0524/pic4.jpg\" alt=\"Lena\"></p>\n<p>The End<br>write by 2021&#x2F;05&#x2F;24 凌晨1点</p>\n","excerpt":"<h2 id=\"1-热点-–尊重生命-热爱生命\"><a href=\"#1-热点-–尊重生命-热爱生命\" class=\"headerlink\" title=\"1.热点 –尊重生命 热爱生命\"></a>1.热点 –尊重生命 热爱生命</h2><p>1.”袁隆平先生 过世”<br>2.”甘肃越野赛 21人遇难”</p>\n<p>逝者已逝，我们能做到就是传承精神。<br>大的我可能还做不到，那我就不浪费一滴粮，节约爱惜每一滴粮。</p>\n<p>越野赛事情<br>个人对事情的风险评估 很重要</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">整件事 主要是恶劣天气突发，而大会没有强制要求运动员带相关安全保障的装备。到时运动员体温失衡而遇难。</span><br><span class=\"line\">其实组织参加这些越野活动，认为是需要的，说的大一些，我们公民都要具备这种野外生存素质，来提高国民综合素质。</span><br><span class=\"line\">而现状是，很多户外知识的普及不完全，很多民众对环境和不同地区的户外情况的不清楚。这是一条很漫长的路</span><br></pre></td></tr></table></figure>\n<h2 id=\"参加-帅张成都线下大会\"><a href=\"#参加-帅张成都线下大会\" class=\"headerlink\" title=\"参加 帅张成都线下大会\"></a>参加 帅张成都线下大会</h2><p>一个月前，给自己定了这个计划，参加张哥成都线下大会。也终于等到了这天，过去的行程和回来的行程有些坎坷。但这不妨碍是一次对我自己的突破和成长。</p>","more":"<h3 id=\"2-反思\"><a href=\"#2-反思\" class=\"headerlink\" title=\"2.反思\"></a>2.反思</h3><p>周五晚上，主要工作忙，没时间细细安排整个行程，倒是来回的行程出了差错。在等航班的时候，我深深的自己反思了。至于来回行程有多糟糕？成都线下大会，我简单列一下时间点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">周五:</span><br><span class=\"line\">晚上10点 到重庆机场</span><br><span class=\"line\"></span><br><span class=\"line\">晚上11点 一个人到重庆市中心观音桥 吃夜宵</span><br><span class=\"line\"></span><br><span class=\"line\">凌晨12点 打车到重庆西站</span><br><span class=\"line\"></span><br><span class=\"line\">凌晨1点半 到酒店   ---&gt; 本来直接从机场打车到重庆西站就好</span><br><span class=\"line\">周六：</span><br><span class=\"line\">早上6点 酒店起床 </span><br><span class=\"line\"></span><br><span class=\"line\">6点50 赶火车 </span><br><span class=\"line\"></span><br><span class=\"line\">8点左右 重庆西站到成都东站</span><br><span class=\"line\"></span><br><span class=\"line\">近一个小时左右  地铁 赶到会场</span><br></pre></td></tr></table></figure>\n<p>以上就是我坎坷的去路行程，这行程是我出发前被迫制定的…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">还有回来的行程</span><br><span class=\"line\">预定的航班:  </span><br><span class=\"line\">4点成都出发 到杭州 6点</span><br><span class=\"line\"></span><br><span class=\"line\">结果看错时间 以为是6点起飞 </span><br><span class=\"line\"></span><br><span class=\"line\">4点到机场的时候，完美错过</span><br><span class=\"line\"></span><br><span class=\"line\">原价定了晚上8点的航班 --&gt; 准备把这种车票裱起来</span><br><span class=\"line\"></span><br><span class=\"line\">关键航班还延误</span><br><span class=\"line\"></span><br><span class=\"line\">在机场等了五个小时</span><br></pre></td></tr></table></figure>\n<p>自己的疏忽，损失的金钱和时间<br>这不可谓是一个深深的教训<br>遂，我给自己定下目标。每次出行前，把行程计划列完整再行动。<br>做事也是，工作也是。我就是脑子里有一个可行性的想法后，就直接迷迷糊糊按着感觉走了。往往中间会出很多的不确定，导致时间的拖延，各种损失。</p>\n<p>以上是我对自己的行程反思，接下来讲讲这次大会我的收获～<br><img src=\"/images/2021-0524/pic5.jpg\" alt=\"Lena\"></p>\n<h2 id=\"3-大会的分享\"><a href=\"#3-大会的分享\" class=\"headerlink\" title=\"3.大会的分享\"></a>3.大会的分享</h2><h3 id=\"1-社交\"><a href=\"#1-社交\" class=\"headerlink\" title=\"(1) 社交\"></a>(1) 社交</h3><p>主动走出去，积极去交流，遇见倾听不同的人。我还是有点腼腆，不过我想我走出了这一步，慢慢的尝试，就会突破腼腆<br><img src=\"/images/2021-0524/pic1.jpg\" alt=\"Lena\"><br><img src=\"/images/2021-0524/pic3.jpg\" alt=\"Lena\"></p>\n<h3 id=\"2-把自己当创业者\"><a href=\"#2-把自己当创业者\" class=\"headerlink\" title=\"(2) 把自己当创业者\"></a>(2) 把自己当创业者</h3><p>“把自己当做创业者”，这是张哥提出的，这是一句很宏观的话。算是总体方针，具体的实施还是得按自己的情况去创业。我个人暂时理解的，对于我个人来说：职场技术能力，职场综合能力(时间管理，沟通表达，处理事务，与人协作等)，以及个人生活能力。<br>这些我都不足或欠缺，要花时间去尝试和学习，去补充。<br>以创业者的思维处理问题，道理很简单，如何去实施，按照自己的情况怎么去做。得自己专研。</p>\n<h3 id=\"3-对自己狠一点-知道自己的痛点，想方设法去解决\"><a href=\"#3-对自己狠一点-知道自己的痛点，想方设法去解决\" class=\"headerlink\" title=\"(3) 对自己狠一点 知道自己的痛点，想方设法去解决\"></a>(3) 对自己狠一点 知道自己的痛点，想方设法去解决</h3><p>养成习惯，突破自我：张哥讲了他的经历。我觉得我能学习其精髓(赶飞机的事情)。知道自己的痛点，不惜一切去解决它。对就是这种和自己拼的精神，我是不具备的。<br>很多时候，我困了就睡，得过且过，很多事情觉得没有也行，觉得都在我的承受范围内，也不会强迫自己。一直想要周围的环境来压迫自己，没有逼自己的决心。是我自己的问题。总觉得没有时间，工作忙，每当自己写的差不多，做的差不多的时候就想，”OK，今天就到这里,明天再干吧。”<br>这就是缺少那种做好事情的决心。</p>\n<h3 id=\"4-转变角度-以生产者，服务者看产品和事物\"><a href=\"#4-转变角度-以生产者，服务者看产品和事物\" class=\"headerlink\" title=\"(4) 转变角度 以生产者，服务者看产品和事物\"></a>(4) 转变角度 以生产者，服务者看产品和事物</h3><p>以创业者的角度看问题、看广告、去了解产品、去接触不同的事物。<br>了解商业背后逻辑，去挖掘数据。这是我要尝试去做的角度和方向，或者说是养成的习惯。这次大会后，我隐隐有自己的方向—创业。<br>创业九死一生，听起来就很不错。慢慢积累自己，等某一天恰好有了那机遇或者自己能力达到了，去满足自己这一颗想要不平凡的心。</p>\n<h3 id=\"5-跨圈-与不同的思想沟通\"><a href=\"#5-跨圈-与不同的思想沟通\" class=\"headerlink\" title=\"(5) 跨圈 与不同的思想沟通\"></a>(5) 跨圈 与不同的思想沟通</h3><p>当然是我来说，最重要的是走出来。<br>相对于程序员封闭的圈子，跨圈交流，对不同人、行业的有新认知。张哥谈到，他做开发的时候，常常和产品，和运营混一起。每个人对事物有自己的角度，多交流，不同认知，海纳百川。</p>\n<h3 id=\"6-面对不同的机会，如何做选择\"><a href=\"#6-面对不同的机会，如何做选择\" class=\"headerlink\" title=\"(6) 面对不同的机会，如何做选择\"></a>(6) 面对不同的机会，如何做选择</h3><p>说到如何做选择，我就是一个选择困难，遇到事情的时候，对事情判断的时候，总是想起特殊情况，倾向个例，独特。而张哥说，他相信概率，做选择的时候也是用概率的角度来做取舍。<br>细的去信，我那是感性，而概率是理性。</p>\n<h3 id=\"7-对自己的要求\"><a href=\"#7-对自己的要求\" class=\"headerlink\" title=\"(7) 对自己的要求\"></a>(7) 对自己的要求</h3><p>后面问答会，提到，如何选择创业伙伴上？嘉宾提到一句话，有没有做过一件有结果的事？有结果的事可以是运营这几千粉丝的号，可以是组织办完一次优质的分享大会。我会想我自己，并没有。包括写的好物，也拿不出手。一个人做的有结果的事，我很认同。<br>接下来的阶段，我就是要专攻一个领域。做成一件有结果的事。</p>\n<h3 id=\"8-个人情况\"><a href=\"#8-个人情况\" class=\"headerlink\" title=\"(8) 个人情况\"></a>(8) 个人情况</h3><p>1.如何安排好现在忙碌的工作时间和个人时间，是我接下来一个阶段要处理的</p>\n<p>2.或许我对业务的熟悉，处理工作的效率会加快，还有改变我的时间管理方法，以及我的碰到事情问的态度。这都是我要去解决的。</p>\n<p>3.接下来理想的上班状态，能轻松处理手头事务；有自己的时间，学习巩固技术。遇到好的点子，自己能出个工具去解决问题，有时间继续深耕好物，写写公众号~<br><img src=\"/images/2021-0524/pic4.jpg\" alt=\"Lena\"></p>\n<p>The End<br>write by 2021&#x2F;05&#x2F;24 凌晨1点</p>"},{"title":"makefile制作静态库和动态库","date":"2021-01-11T11:16:42.000Z","_content":"makefile的基本以及动态库和静态库的基本自行百度\n本文主要将如何用makefile制作动态库和静态库以及使用\n\n<!--more-->\n\n# main.c  add.c  add.h 文件\n## 三个文件\n![Lena](/images/2021-01-11/add_c.png)\n![Lena](/images/2021-01-11/add_h.png)\n![Lena](/images/2021-01-11/main_c.png)\n\n## 文件存放目录结构\n![Lena](/images/2021-01-11/tree.png)\n\n# 静态库文件\n## 静态库文件的制作\n```\n制作.o文件\n\tgcc -c *.c\n用ar打包生成.a静态库文件\n\tar cr 静态库的名字(libMytest.a) 生成的所有的.o\n```\n![Lena](/images/2021-01-11/a.png)\n\n## 静态库文件的调用\n1.gcc main.c lib/libadd.a -I include -o main\n2.gcc main.c -I include -L lib -l add -o main\nnm libadd.a\n![Lena](/images/2021-01-11/make_a.png)\n\n# 动态库\n## 动态库文件的制作\n```\n生成与位置无关的.o文件\n\t  gcc -fPIC -c *.c\n生成.so动态库文件\n\t  gcc -shared -I include -o lib库名.so *.o\n```\n![Lena](/images/2021-01-11/so.png)\n\n## 动态库文件的调用\n1.gcc main.c lib/libMyCalc.so -I include -o app 可以直接加绝对路径编译\n2.gcc main.c -I include -L lib -l MyCalc -o app 需要更新环境变量\nldd \n![Lena](/images/2021-01-11/make_so.png)\n\n注： 第二种需要配置环境变量\n```\nLD_LIBRARY_PATH\nexport LD_LIBRARY_PATH=./lib\nvi ~/.bashrc\nexport LD_LIBRARY_PATH=/home/lib\n\n1.找到动态库链接器的配置文件 vi /etc/ld.so.conf\n2.动态库的路径写到配置文件中\n3.更新 sudo ldconfig -v \n```\n","source":"_posts/2021-01-11.md","raw":"---\ntitle: makefile制作静态库和动态库\ndate: 2021-01-11 19:16:42\ntags:\n---\nmakefile的基本以及动态库和静态库的基本自行百度\n本文主要将如何用makefile制作动态库和静态库以及使用\n\n<!--more-->\n\n# main.c  add.c  add.h 文件\n## 三个文件\n![Lena](/images/2021-01-11/add_c.png)\n![Lena](/images/2021-01-11/add_h.png)\n![Lena](/images/2021-01-11/main_c.png)\n\n## 文件存放目录结构\n![Lena](/images/2021-01-11/tree.png)\n\n# 静态库文件\n## 静态库文件的制作\n```\n制作.o文件\n\tgcc -c *.c\n用ar打包生成.a静态库文件\n\tar cr 静态库的名字(libMytest.a) 生成的所有的.o\n```\n![Lena](/images/2021-01-11/a.png)\n\n## 静态库文件的调用\n1.gcc main.c lib/libadd.a -I include -o main\n2.gcc main.c -I include -L lib -l add -o main\nnm libadd.a\n![Lena](/images/2021-01-11/make_a.png)\n\n# 动态库\n## 动态库文件的制作\n```\n生成与位置无关的.o文件\n\t  gcc -fPIC -c *.c\n生成.so动态库文件\n\t  gcc -shared -I include -o lib库名.so *.o\n```\n![Lena](/images/2021-01-11/so.png)\n\n## 动态库文件的调用\n1.gcc main.c lib/libMyCalc.so -I include -o app 可以直接加绝对路径编译\n2.gcc main.c -I include -L lib -l MyCalc -o app 需要更新环境变量\nldd \n![Lena](/images/2021-01-11/make_so.png)\n\n注： 第二种需要配置环境变量\n```\nLD_LIBRARY_PATH\nexport LD_LIBRARY_PATH=./lib\nvi ~/.bashrc\nexport LD_LIBRARY_PATH=/home/lib\n\n1.找到动态库链接器的配置文件 vi /etc/ld.so.conf\n2.动态库的路径写到配置文件中\n3.更新 sudo ldconfig -v \n```\n","slug":"2021-01-11","published":1,"updated":"2025-03-21T08:19:06.474Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexms000336orejj1beb5","content":"<p>makefile的基本以及动态库和静态库的基本自行百度<br>本文主要将如何用makefile制作动态库和静态库以及使用</p>\n<span id=\"more\"></span>\n\n<h1 id=\"main-c-add-c-add-h-文件\"><a href=\"#main-c-add-c-add-h-文件\" class=\"headerlink\" title=\"main.c  add.c  add.h 文件\"></a>main.c  add.c  add.h 文件</h1><h2 id=\"三个文件\"><a href=\"#三个文件\" class=\"headerlink\" title=\"三个文件\"></a>三个文件</h2><p><img src=\"/images/2021-01-11/add_c.png\" alt=\"Lena\"><br><img src=\"/images/2021-01-11/add_h.png\" alt=\"Lena\"><br><img src=\"/images/2021-01-11/main_c.png\" alt=\"Lena\"></p>\n<h2 id=\"文件存放目录结构\"><a href=\"#文件存放目录结构\" class=\"headerlink\" title=\"文件存放目录结构\"></a>文件存放目录结构</h2><p><img src=\"/images/2021-01-11/tree.png\" alt=\"Lena\"></p>\n<h1 id=\"静态库文件\"><a href=\"#静态库文件\" class=\"headerlink\" title=\"静态库文件\"></a>静态库文件</h1><h2 id=\"静态库文件的制作\"><a href=\"#静态库文件的制作\" class=\"headerlink\" title=\"静态库文件的制作\"></a>静态库文件的制作</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">制作.o文件</span><br><span class=\"line\">\tgcc -c *.c</span><br><span class=\"line\">用ar打包生成.a静态库文件</span><br><span class=\"line\">\tar cr 静态库的名字(libMytest.a) 生成的所有的.o</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2021-01-11/a.png\" alt=\"Lena\"></p>\n<h2 id=\"静态库文件的调用\"><a href=\"#静态库文件的调用\" class=\"headerlink\" title=\"静态库文件的调用\"></a>静态库文件的调用</h2><p>1.gcc main.c lib&#x2F;libadd.a -I include -o main<br>2.gcc main.c -I include -L lib -l add -o main<br>nm libadd.a<br><img src=\"/images/2021-01-11/make_a.png\" alt=\"Lena\"></p>\n<h1 id=\"动态库\"><a href=\"#动态库\" class=\"headerlink\" title=\"动态库\"></a>动态库</h1><h2 id=\"动态库文件的制作\"><a href=\"#动态库文件的制作\" class=\"headerlink\" title=\"动态库文件的制作\"></a>动态库文件的制作</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">生成与位置无关的.o文件</span><br><span class=\"line\">\t  gcc -fPIC -c *.c</span><br><span class=\"line\">生成.so动态库文件</span><br><span class=\"line\">\t  gcc -shared -I include -o lib库名.so *.o</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2021-01-11/so.png\" alt=\"Lena\"></p>\n<h2 id=\"动态库文件的调用\"><a href=\"#动态库文件的调用\" class=\"headerlink\" title=\"动态库文件的调用\"></a>动态库文件的调用</h2><p>1.gcc main.c lib&#x2F;libMyCalc.so -I include -o app 可以直接加绝对路径编译<br>2.gcc main.c -I include -L lib -l MyCalc -o app 需要更新环境变量<br>ldd<br><img src=\"/images/2021-01-11/make_so.png\" alt=\"Lena\"></p>\n<p>注： 第二种需要配置环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LD_LIBRARY_PATH</span><br><span class=\"line\">export LD_LIBRARY_PATH=./lib</span><br><span class=\"line\">vi ~/.bashrc</span><br><span class=\"line\">export LD_LIBRARY_PATH=/home/lib</span><br><span class=\"line\"></span><br><span class=\"line\">1.找到动态库链接器的配置文件 vi /etc/ld.so.conf</span><br><span class=\"line\">2.动态库的路径写到配置文件中</span><br><span class=\"line\">3.更新 sudo ldconfig -v </span><br></pre></td></tr></table></figure>\n","excerpt":"<p>makefile的基本以及动态库和静态库的基本自行百度<br>本文主要将如何用makefile制作动态库和静态库以及使用</p>","more":"<h1 id=\"main-c-add-c-add-h-文件\"><a href=\"#main-c-add-c-add-h-文件\" class=\"headerlink\" title=\"main.c  add.c  add.h 文件\"></a>main.c  add.c  add.h 文件</h1><h2 id=\"三个文件\"><a href=\"#三个文件\" class=\"headerlink\" title=\"三个文件\"></a>三个文件</h2><p><img src=\"/images/2021-01-11/add_c.png\" alt=\"Lena\"><br><img src=\"/images/2021-01-11/add_h.png\" alt=\"Lena\"><br><img src=\"/images/2021-01-11/main_c.png\" alt=\"Lena\"></p>\n<h2 id=\"文件存放目录结构\"><a href=\"#文件存放目录结构\" class=\"headerlink\" title=\"文件存放目录结构\"></a>文件存放目录结构</h2><p><img src=\"/images/2021-01-11/tree.png\" alt=\"Lena\"></p>\n<h1 id=\"静态库文件\"><a href=\"#静态库文件\" class=\"headerlink\" title=\"静态库文件\"></a>静态库文件</h1><h2 id=\"静态库文件的制作\"><a href=\"#静态库文件的制作\" class=\"headerlink\" title=\"静态库文件的制作\"></a>静态库文件的制作</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">制作.o文件</span><br><span class=\"line\">\tgcc -c *.c</span><br><span class=\"line\">用ar打包生成.a静态库文件</span><br><span class=\"line\">\tar cr 静态库的名字(libMytest.a) 生成的所有的.o</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2021-01-11/a.png\" alt=\"Lena\"></p>\n<h2 id=\"静态库文件的调用\"><a href=\"#静态库文件的调用\" class=\"headerlink\" title=\"静态库文件的调用\"></a>静态库文件的调用</h2><p>1.gcc main.c lib&#x2F;libadd.a -I include -o main<br>2.gcc main.c -I include -L lib -l add -o main<br>nm libadd.a<br><img src=\"/images/2021-01-11/make_a.png\" alt=\"Lena\"></p>\n<h1 id=\"动态库\"><a href=\"#动态库\" class=\"headerlink\" title=\"动态库\"></a>动态库</h1><h2 id=\"动态库文件的制作\"><a href=\"#动态库文件的制作\" class=\"headerlink\" title=\"动态库文件的制作\"></a>动态库文件的制作</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">生成与位置无关的.o文件</span><br><span class=\"line\">\t  gcc -fPIC -c *.c</span><br><span class=\"line\">生成.so动态库文件</span><br><span class=\"line\">\t  gcc -shared -I include -o lib库名.so *.o</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2021-01-11/so.png\" alt=\"Lena\"></p>\n<h2 id=\"动态库文件的调用\"><a href=\"#动态库文件的调用\" class=\"headerlink\" title=\"动态库文件的调用\"></a>动态库文件的调用</h2><p>1.gcc main.c lib&#x2F;libMyCalc.so -I include -o app 可以直接加绝对路径编译<br>2.gcc main.c -I include -L lib -l MyCalc -o app 需要更新环境变量<br>ldd<br><img src=\"/images/2021-01-11/make_so.png\" alt=\"Lena\"></p>\n<p>注： 第二种需要配置环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LD_LIBRARY_PATH</span><br><span class=\"line\">export LD_LIBRARY_PATH=./lib</span><br><span class=\"line\">vi ~/.bashrc</span><br><span class=\"line\">export LD_LIBRARY_PATH=/home/lib</span><br><span class=\"line\"></span><br><span class=\"line\">1.找到动态库链接器的配置文件 vi /etc/ld.so.conf</span><br><span class=\"line\">2.动态库的路径写到配置文件中</span><br><span class=\"line\">3.更新 sudo ldconfig -v </span><br></pre></td></tr></table></figure>"},{"title":"ICMP协议","date":"2021-02-19T09:37:50.000Z","_content":"# ICMP协议\nICMP全称\"Internet Control Message Protocol\",互联网控制报文协议。\n<!--more-->\n\n# Wireshark抓包ping命令\n过滤规则： ip.addr == 47.114.0.16 and icmp\n抓包内容： Ethernet II + IP + ICMP\n\n![Lena](/images/2021-02-19/wireshark.png)\n\n## Ethernet II\n```\nEthernet II： 源Mac地址(6字节) 目标mac地址(6字节) 类型(2字节)  共 14字节\n```\n![Lena](/images/2021-02-19/mac层.png)\n\n## IP报文头\n```\nIP: 版本(4位)/首部长度(4位) (1字节) 服务类型TOS(1字节) \n\t总长度(2字节)\n\t标识(2字节)\n\t标志(3位)/片偏移(13位) (2字节)\n\tTTL(1字节) 协议(1字节)\n\t首部校验和(2字节)\n\t源IP地址(4字节)\n\t目标IP地址(4字节)  共 20字节\n```\n\n## ICMP报文\n![Lena](/images/2021-02-19/ip报文头.png)\n```\nICMP：类型(1字节) 代码(1字节)\n\t 校验和(2字节)\n\t 根据类型和代码不同而不同\n```\n![Lena](/images/2021-02-19/ICMP报文.png)\n\n# ICMP报文的格式\nICMP报文是封装在IP包里面的，属于网络层。\n![Lena](/images/2021-02-19/ICMP格式.jpg)\n\n# 查询报文类型\n查询报文类型 用于诊断的查询信息.\n\n类型\t\t\t\t代码\t\t状态\t\t描述\t\n0 - Echo Reply\t0\t\t\t\techo响应 (被程序ping使用）\n8 - 请求回显\t\t0\t\t\t\tEcho请求\t\n9 - 路由器通告\t0\t\t\t\t路由通告\n10 - 路由器请求\t0\t\t\t\t路由器的发现/选择/请求\n13 - 时间戳请求\t0\t\t\t\t时间戳请求\t\n14 - 时间戳应答\t0\t\t\t\t时间戳应答\t\n常见的类型是主动请求为8，主动请求的应答为0\n\n# 差错报文类型\n差错报文类型 通知出错原因的错误消息\n类型 1.2 未分配 保留\n\n## 3-目的不可达\n代码 0\t\t目标网络不可达\t\t\n代码 1\t\t目标主机不可达\t\t\n代码 2\t\t目标协议不可达\t\t\n代码 3\t\t目标端口不可达\t\t\n代码 4\t\t要求分段并设置DF flag标志\t\t\n\n## 5-重定向\n代码 0\t\t重定向网络\n代码 1\t\t重定向主机\n代码 2\t\t基于TOS 的网络重定向\n代码 3\t\t基于TOS 的主机重定向\n\n## 11-ICMP超时\n代码 0\t\tTTL 超时\n代码 1 \t\t分片重组超时\n\n# 查询报文应用: ping命令\n```\nping -c 2 www.padparadccha.cn\n\n-c 2 收到两次包后，自动退出\n-i 3 发送周期 3秒\n-s 1024 设置发送包的大小\n-t 255 设置TTL值为 255\n```\n![Lena](/images/2021-02-19/ping.png)\n\n# 差错报文应用: Traceroute命令\n```\ntraceroute www.padparadccha.cn 显示到达目的地的数据包路由\n\n```\nTraceroute程序的设计是利用ICMP及IP header的TTL（Time To Live）栏位（field）\n\n>TTL是1的IP datagram（其实，每次送出的为3个40字节的包，包括源地址，目的地址和包发出的时间标签）到目的地，当路径上的第一个路由器（router）收到这个datagram时，它将TTL减1。此时，TTL变为0了，所以该路由器会将此datagram丢掉，并送回一个「ICMP time exceeded」消息（包括发IP包的源地址，IP包的所有内容及路由器的IP地址），traceroute 收到这个消息后，便知道这个路由器存在于这个路径上，接着traceroute 再送出另一个TTL是2 的datagram，发现第2 个路由器...... traceroute 每次将送出的datagram的TTL 加1来发现另一个路由器，这个重复的动作一直持续到某个datagram 抵达目的地。\n\n>当datagram到达目的地后，该主机并不会送回ICMP time exceeded消息，因为它已是目的地了，那么traceroute如何得知目的地到达了呢？Traceroute在送出UDP datagrams到目的地时，它所选择送达的port number 是一个一般应用程序都不会用的号码（30000 以上），所以当此UDP datagram 到达目的地后该主机会送回一个「ICMP port unreachable」的消息，而当traceroute 收到这个消息时，便知道目的地已经到达了。所以traceroute 在Server端也是没有所谓的Daemon 程式。\n\n## Traceroute规则\n1.故意设置特殊的TTL，来追踪去往目的地时沿途经过的路由器\n2.故意设置不分片，从而确定路径的MTU\n","source":"_posts/2021-02-19.md","raw":"---\ntitle: 'ICMP协议'\ndate: 2021-02-19 17:37:50\ntags: '网络'\n---\n# ICMP协议\nICMP全称\"Internet Control Message Protocol\",互联网控制报文协议。\n<!--more-->\n\n# Wireshark抓包ping命令\n过滤规则： ip.addr == 47.114.0.16 and icmp\n抓包内容： Ethernet II + IP + ICMP\n\n![Lena](/images/2021-02-19/wireshark.png)\n\n## Ethernet II\n```\nEthernet II： 源Mac地址(6字节) 目标mac地址(6字节) 类型(2字节)  共 14字节\n```\n![Lena](/images/2021-02-19/mac层.png)\n\n## IP报文头\n```\nIP: 版本(4位)/首部长度(4位) (1字节) 服务类型TOS(1字节) \n\t总长度(2字节)\n\t标识(2字节)\n\t标志(3位)/片偏移(13位) (2字节)\n\tTTL(1字节) 协议(1字节)\n\t首部校验和(2字节)\n\t源IP地址(4字节)\n\t目标IP地址(4字节)  共 20字节\n```\n\n## ICMP报文\n![Lena](/images/2021-02-19/ip报文头.png)\n```\nICMP：类型(1字节) 代码(1字节)\n\t 校验和(2字节)\n\t 根据类型和代码不同而不同\n```\n![Lena](/images/2021-02-19/ICMP报文.png)\n\n# ICMP报文的格式\nICMP报文是封装在IP包里面的，属于网络层。\n![Lena](/images/2021-02-19/ICMP格式.jpg)\n\n# 查询报文类型\n查询报文类型 用于诊断的查询信息.\n\n类型\t\t\t\t代码\t\t状态\t\t描述\t\n0 - Echo Reply\t0\t\t\t\techo响应 (被程序ping使用）\n8 - 请求回显\t\t0\t\t\t\tEcho请求\t\n9 - 路由器通告\t0\t\t\t\t路由通告\n10 - 路由器请求\t0\t\t\t\t路由器的发现/选择/请求\n13 - 时间戳请求\t0\t\t\t\t时间戳请求\t\n14 - 时间戳应答\t0\t\t\t\t时间戳应答\t\n常见的类型是主动请求为8，主动请求的应答为0\n\n# 差错报文类型\n差错报文类型 通知出错原因的错误消息\n类型 1.2 未分配 保留\n\n## 3-目的不可达\n代码 0\t\t目标网络不可达\t\t\n代码 1\t\t目标主机不可达\t\t\n代码 2\t\t目标协议不可达\t\t\n代码 3\t\t目标端口不可达\t\t\n代码 4\t\t要求分段并设置DF flag标志\t\t\n\n## 5-重定向\n代码 0\t\t重定向网络\n代码 1\t\t重定向主机\n代码 2\t\t基于TOS 的网络重定向\n代码 3\t\t基于TOS 的主机重定向\n\n## 11-ICMP超时\n代码 0\t\tTTL 超时\n代码 1 \t\t分片重组超时\n\n# 查询报文应用: ping命令\n```\nping -c 2 www.padparadccha.cn\n\n-c 2 收到两次包后，自动退出\n-i 3 发送周期 3秒\n-s 1024 设置发送包的大小\n-t 255 设置TTL值为 255\n```\n![Lena](/images/2021-02-19/ping.png)\n\n# 差错报文应用: Traceroute命令\n```\ntraceroute www.padparadccha.cn 显示到达目的地的数据包路由\n\n```\nTraceroute程序的设计是利用ICMP及IP header的TTL（Time To Live）栏位（field）\n\n>TTL是1的IP datagram（其实，每次送出的为3个40字节的包，包括源地址，目的地址和包发出的时间标签）到目的地，当路径上的第一个路由器（router）收到这个datagram时，它将TTL减1。此时，TTL变为0了，所以该路由器会将此datagram丢掉，并送回一个「ICMP time exceeded」消息（包括发IP包的源地址，IP包的所有内容及路由器的IP地址），traceroute 收到这个消息后，便知道这个路由器存在于这个路径上，接着traceroute 再送出另一个TTL是2 的datagram，发现第2 个路由器...... traceroute 每次将送出的datagram的TTL 加1来发现另一个路由器，这个重复的动作一直持续到某个datagram 抵达目的地。\n\n>当datagram到达目的地后，该主机并不会送回ICMP time exceeded消息，因为它已是目的地了，那么traceroute如何得知目的地到达了呢？Traceroute在送出UDP datagrams到目的地时，它所选择送达的port number 是一个一般应用程序都不会用的号码（30000 以上），所以当此UDP datagram 到达目的地后该主机会送回一个「ICMP port unreachable」的消息，而当traceroute 收到这个消息时，便知道目的地已经到达了。所以traceroute 在Server端也是没有所谓的Daemon 程式。\n\n## Traceroute规则\n1.故意设置特殊的TTL，来追踪去往目的地时沿途经过的路由器\n2.故意设置不分片，从而确定路径的MTU\n","slug":"2021-02-19","published":1,"updated":"2025-03-21T08:19:06.474Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexms000436orc5qp1x7c","content":"<h1 id=\"ICMP协议\"><a href=\"#ICMP协议\" class=\"headerlink\" title=\"ICMP协议\"></a>ICMP协议</h1><p>ICMP全称”Internet Control Message Protocol”,互联网控制报文协议。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Wireshark抓包ping命令\"><a href=\"#Wireshark抓包ping命令\" class=\"headerlink\" title=\"Wireshark抓包ping命令\"></a>Wireshark抓包ping命令</h1><p>过滤规则： ip.addr &#x3D;&#x3D; 47.114.0.16 and icmp<br>抓包内容： Ethernet II + IP + ICMP</p>\n<p><img src=\"/images/2021-02-19/wireshark.png\" alt=\"Lena\"></p>\n<h2 id=\"Ethernet-II\"><a href=\"#Ethernet-II\" class=\"headerlink\" title=\"Ethernet II\"></a>Ethernet II</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ethernet II： 源Mac地址(6字节) 目标mac地址(6字节) 类型(2字节)  共 14字节</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2021-02-19/mac%E5%B1%82.png\" alt=\"Lena\"></p>\n<h2 id=\"IP报文头\"><a href=\"#IP报文头\" class=\"headerlink\" title=\"IP报文头\"></a>IP报文头</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IP: 版本(4位)/首部长度(4位) (1字节) 服务类型TOS(1字节) </span><br><span class=\"line\">\t总长度(2字节)</span><br><span class=\"line\">\t标识(2字节)</span><br><span class=\"line\">\t标志(3位)/片偏移(13位) (2字节)</span><br><span class=\"line\">\tTTL(1字节) 协议(1字节)</span><br><span class=\"line\">\t首部校验和(2字节)</span><br><span class=\"line\">\t源IP地址(4字节)</span><br><span class=\"line\">\t目标IP地址(4字节)  共 20字节</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ICMP报文\"><a href=\"#ICMP报文\" class=\"headerlink\" title=\"ICMP报文\"></a>ICMP报文</h2><p><img src=\"/images/2021-02-19/ip%E6%8A%A5%E6%96%87%E5%A4%B4.png\" alt=\"Lena\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ICMP：类型(1字节) 代码(1字节)</span><br><span class=\"line\">\t 校验和(2字节)</span><br><span class=\"line\">\t 根据类型和代码不同而不同</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2021-02-19/ICMP%E6%8A%A5%E6%96%87.png\" alt=\"Lena\"></p>\n<h1 id=\"ICMP报文的格式\"><a href=\"#ICMP报文的格式\" class=\"headerlink\" title=\"ICMP报文的格式\"></a>ICMP报文的格式</h1><p>ICMP报文是封装在IP包里面的，属于网络层。<br><img src=\"/images/2021-02-19/ICMP%E6%A0%BC%E5%BC%8F.jpg\" alt=\"Lena\"></p>\n<h1 id=\"查询报文类型\"><a href=\"#查询报文类型\" class=\"headerlink\" title=\"查询报文类型\"></a>查询报文类型</h1><p>查询报文类型 用于诊断的查询信息.</p>\n<p>类型\t\t\t\t代码\t\t状态\t\t描述\t<br>0 - Echo Reply\t0\t\t\t\techo响应 (被程序ping使用）<br>8 - 请求回显\t\t0\t\t\t\tEcho请求\t<br>9 - 路由器通告\t0\t\t\t\t路由通告<br>10 - 路由器请求\t0\t\t\t\t路由器的发现&#x2F;选择&#x2F;请求<br>13 - 时间戳请求\t0\t\t\t\t时间戳请求\t<br>14 - 时间戳应答\t0\t\t\t\t时间戳应答\t<br>常见的类型是主动请求为8，主动请求的应答为0</p>\n<h1 id=\"差错报文类型\"><a href=\"#差错报文类型\" class=\"headerlink\" title=\"差错报文类型\"></a>差错报文类型</h1><p>差错报文类型 通知出错原因的错误消息<br>类型 1.2 未分配 保留</p>\n<h2 id=\"3-目的不可达\"><a href=\"#3-目的不可达\" class=\"headerlink\" title=\"3-目的不可达\"></a>3-目的不可达</h2><p>代码 0\t\t目标网络不可达\t\t<br>代码 1\t\t目标主机不可达\t\t<br>代码 2\t\t目标协议不可达\t\t<br>代码 3\t\t目标端口不可达\t\t<br>代码 4\t\t要求分段并设置DF flag标志\t\t</p>\n<h2 id=\"5-重定向\"><a href=\"#5-重定向\" class=\"headerlink\" title=\"5-重定向\"></a>5-重定向</h2><p>代码 0\t\t重定向网络<br>代码 1\t\t重定向主机<br>代码 2\t\t基于TOS 的网络重定向<br>代码 3\t\t基于TOS 的主机重定向</p>\n<h2 id=\"11-ICMP超时\"><a href=\"#11-ICMP超时\" class=\"headerlink\" title=\"11-ICMP超时\"></a>11-ICMP超时</h2><p>代码 0\t\tTTL 超时<br>代码 1 \t\t分片重组超时</p>\n<h1 id=\"查询报文应用-ping命令\"><a href=\"#查询报文应用-ping命令\" class=\"headerlink\" title=\"查询报文应用: ping命令\"></a>查询报文应用: ping命令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping -c 2 www.padparadccha.cn</span><br><span class=\"line\"></span><br><span class=\"line\">-c 2 收到两次包后，自动退出</span><br><span class=\"line\">-i 3 发送周期 3秒</span><br><span class=\"line\">-s 1024 设置发送包的大小</span><br><span class=\"line\">-t 255 设置TTL值为 255</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2021-02-19/ping.png\" alt=\"Lena\"></p>\n<h1 id=\"差错报文应用-Traceroute命令\"><a href=\"#差错报文应用-Traceroute命令\" class=\"headerlink\" title=\"差错报文应用: Traceroute命令\"></a>差错报文应用: Traceroute命令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">traceroute www.padparadccha.cn 显示到达目的地的数据包路由</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Traceroute程序的设计是利用ICMP及IP header的TTL（Time To Live）栏位（field）</p>\n<blockquote>\n<p>TTL是1的IP datagram（其实，每次送出的为3个40字节的包，包括源地址，目的地址和包发出的时间标签）到目的地，当路径上的第一个路由器（router）收到这个datagram时，它将TTL减1。此时，TTL变为0了，所以该路由器会将此datagram丢掉，并送回一个「ICMP time exceeded」消息（包括发IP包的源地址，IP包的所有内容及路由器的IP地址），traceroute 收到这个消息后，便知道这个路由器存在于这个路径上，接着traceroute 再送出另一个TTL是2 的datagram，发现第2 个路由器…… traceroute 每次将送出的datagram的TTL 加1来发现另一个路由器，这个重复的动作一直持续到某个datagram 抵达目的地。</p>\n</blockquote>\n<blockquote>\n<p>当datagram到达目的地后，该主机并不会送回ICMP time exceeded消息，因为它已是目的地了，那么traceroute如何得知目的地到达了呢？Traceroute在送出UDP datagrams到目的地时，它所选择送达的port number 是一个一般应用程序都不会用的号码（30000 以上），所以当此UDP datagram 到达目的地后该主机会送回一个「ICMP port unreachable」的消息，而当traceroute 收到这个消息时，便知道目的地已经到达了。所以traceroute 在Server端也是没有所谓的Daemon 程式。</p>\n</blockquote>\n<h2 id=\"Traceroute规则\"><a href=\"#Traceroute规则\" class=\"headerlink\" title=\"Traceroute规则\"></a>Traceroute规则</h2><p>1.故意设置特殊的TTL，来追踪去往目的地时沿途经过的路由器<br>2.故意设置不分片，从而确定路径的MTU</p>\n","excerpt":"<h1 id=\"ICMP协议\"><a href=\"#ICMP协议\" class=\"headerlink\" title=\"ICMP协议\"></a>ICMP协议</h1><p>ICMP全称”Internet Control Message Protocol”,互联网控制报文协议。</p>","more":"<h1 id=\"Wireshark抓包ping命令\"><a href=\"#Wireshark抓包ping命令\" class=\"headerlink\" title=\"Wireshark抓包ping命令\"></a>Wireshark抓包ping命令</h1><p>过滤规则： ip.addr &#x3D;&#x3D; 47.114.0.16 and icmp<br>抓包内容： Ethernet II + IP + ICMP</p>\n<p><img src=\"/images/2021-02-19/wireshark.png\" alt=\"Lena\"></p>\n<h2 id=\"Ethernet-II\"><a href=\"#Ethernet-II\" class=\"headerlink\" title=\"Ethernet II\"></a>Ethernet II</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ethernet II： 源Mac地址(6字节) 目标mac地址(6字节) 类型(2字节)  共 14字节</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2021-02-19/mac%E5%B1%82.png\" alt=\"Lena\"></p>\n<h2 id=\"IP报文头\"><a href=\"#IP报文头\" class=\"headerlink\" title=\"IP报文头\"></a>IP报文头</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IP: 版本(4位)/首部长度(4位) (1字节) 服务类型TOS(1字节) </span><br><span class=\"line\">\t总长度(2字节)</span><br><span class=\"line\">\t标识(2字节)</span><br><span class=\"line\">\t标志(3位)/片偏移(13位) (2字节)</span><br><span class=\"line\">\tTTL(1字节) 协议(1字节)</span><br><span class=\"line\">\t首部校验和(2字节)</span><br><span class=\"line\">\t源IP地址(4字节)</span><br><span class=\"line\">\t目标IP地址(4字节)  共 20字节</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ICMP报文\"><a href=\"#ICMP报文\" class=\"headerlink\" title=\"ICMP报文\"></a>ICMP报文</h2><p><img src=\"/images/2021-02-19/ip%E6%8A%A5%E6%96%87%E5%A4%B4.png\" alt=\"Lena\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ICMP：类型(1字节) 代码(1字节)</span><br><span class=\"line\">\t 校验和(2字节)</span><br><span class=\"line\">\t 根据类型和代码不同而不同</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2021-02-19/ICMP%E6%8A%A5%E6%96%87.png\" alt=\"Lena\"></p>\n<h1 id=\"ICMP报文的格式\"><a href=\"#ICMP报文的格式\" class=\"headerlink\" title=\"ICMP报文的格式\"></a>ICMP报文的格式</h1><p>ICMP报文是封装在IP包里面的，属于网络层。<br><img src=\"/images/2021-02-19/ICMP%E6%A0%BC%E5%BC%8F.jpg\" alt=\"Lena\"></p>\n<h1 id=\"查询报文类型\"><a href=\"#查询报文类型\" class=\"headerlink\" title=\"查询报文类型\"></a>查询报文类型</h1><p>查询报文类型 用于诊断的查询信息.</p>\n<p>类型\t\t\t\t代码\t\t状态\t\t描述\t<br>0 - Echo Reply\t0\t\t\t\techo响应 (被程序ping使用）<br>8 - 请求回显\t\t0\t\t\t\tEcho请求\t<br>9 - 路由器通告\t0\t\t\t\t路由通告<br>10 - 路由器请求\t0\t\t\t\t路由器的发现&#x2F;选择&#x2F;请求<br>13 - 时间戳请求\t0\t\t\t\t时间戳请求\t<br>14 - 时间戳应答\t0\t\t\t\t时间戳应答\t<br>常见的类型是主动请求为8，主动请求的应答为0</p>\n<h1 id=\"差错报文类型\"><a href=\"#差错报文类型\" class=\"headerlink\" title=\"差错报文类型\"></a>差错报文类型</h1><p>差错报文类型 通知出错原因的错误消息<br>类型 1.2 未分配 保留</p>\n<h2 id=\"3-目的不可达\"><a href=\"#3-目的不可达\" class=\"headerlink\" title=\"3-目的不可达\"></a>3-目的不可达</h2><p>代码 0\t\t目标网络不可达\t\t<br>代码 1\t\t目标主机不可达\t\t<br>代码 2\t\t目标协议不可达\t\t<br>代码 3\t\t目标端口不可达\t\t<br>代码 4\t\t要求分段并设置DF flag标志\t\t</p>\n<h2 id=\"5-重定向\"><a href=\"#5-重定向\" class=\"headerlink\" title=\"5-重定向\"></a>5-重定向</h2><p>代码 0\t\t重定向网络<br>代码 1\t\t重定向主机<br>代码 2\t\t基于TOS 的网络重定向<br>代码 3\t\t基于TOS 的主机重定向</p>\n<h2 id=\"11-ICMP超时\"><a href=\"#11-ICMP超时\" class=\"headerlink\" title=\"11-ICMP超时\"></a>11-ICMP超时</h2><p>代码 0\t\tTTL 超时<br>代码 1 \t\t分片重组超时</p>\n<h1 id=\"查询报文应用-ping命令\"><a href=\"#查询报文应用-ping命令\" class=\"headerlink\" title=\"查询报文应用: ping命令\"></a>查询报文应用: ping命令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping -c 2 www.padparadccha.cn</span><br><span class=\"line\"></span><br><span class=\"line\">-c 2 收到两次包后，自动退出</span><br><span class=\"line\">-i 3 发送周期 3秒</span><br><span class=\"line\">-s 1024 设置发送包的大小</span><br><span class=\"line\">-t 255 设置TTL值为 255</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2021-02-19/ping.png\" alt=\"Lena\"></p>\n<h1 id=\"差错报文应用-Traceroute命令\"><a href=\"#差错报文应用-Traceroute命令\" class=\"headerlink\" title=\"差错报文应用: Traceroute命令\"></a>差错报文应用: Traceroute命令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">traceroute www.padparadccha.cn 显示到达目的地的数据包路由</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Traceroute程序的设计是利用ICMP及IP header的TTL（Time To Live）栏位（field）</p>\n<blockquote>\n<p>TTL是1的IP datagram（其实，每次送出的为3个40字节的包，包括源地址，目的地址和包发出的时间标签）到目的地，当路径上的第一个路由器（router）收到这个datagram时，它将TTL减1。此时，TTL变为0了，所以该路由器会将此datagram丢掉，并送回一个「ICMP time exceeded」消息（包括发IP包的源地址，IP包的所有内容及路由器的IP地址），traceroute 收到这个消息后，便知道这个路由器存在于这个路径上，接着traceroute 再送出另一个TTL是2 的datagram，发现第2 个路由器…… traceroute 每次将送出的datagram的TTL 加1来发现另一个路由器，这个重复的动作一直持续到某个datagram 抵达目的地。</p>\n</blockquote>\n<blockquote>\n<p>当datagram到达目的地后，该主机并不会送回ICMP time exceeded消息，因为它已是目的地了，那么traceroute如何得知目的地到达了呢？Traceroute在送出UDP datagrams到目的地时，它所选择送达的port number 是一个一般应用程序都不会用的号码（30000 以上），所以当此UDP datagram 到达目的地后该主机会送回一个「ICMP port unreachable」的消息，而当traceroute 收到这个消息时，便知道目的地已经到达了。所以traceroute 在Server端也是没有所谓的Daemon 程式。</p>\n</blockquote>\n<h2 id=\"Traceroute规则\"><a href=\"#Traceroute规则\" class=\"headerlink\" title=\"Traceroute规则\"></a>Traceroute规则</h2><p>1.故意设置特殊的TTL，来追踪去往目的地时沿途经过的路由器<br>2.故意设置不分片，从而确定路径的MTU</p>"},{"title":"Hexo create","date":"2019-10-06T11:23:01.000Z","_content":"# Hexo create\nHexo搭建了很多次，由于是在虚拟机中搭建的\n由于经常换虚拟机，每次更换搭建的hexo都没有了\nheox的环境搭建也较麻烦，在此记录\n<!--more-->\n\n## 1.安装git工具\nsudo yum -y install git-all.noarch\n\n## 2.安装Node.js\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\nnvm install node\n\n## 3.安装 Hexo\nnpm install -g hexo-cli\nnpm install hexo\n3.1设置hexo环境变量\necho 'PATH=\"$PATH:./node_modules/.bin\"' >> ~/.profile\n\n## 4.建站\nhexo init\n### 4.1 Next 主题\nmkdir themes/next\ncurl -L https://api.github.com/repos/iissnan/hexo-theme-next/tarball/v5.1.2 | tar -zxv -C themes/next --strip-components=1\n### 4.2安装本地服务器\nnpm install hexo-server --save\n\n## 5.hexo和github联系起来\n### 5.1安装git插件\nnpm install hexo-deployer-git --save\n### 5.2本地添加公钥参考git.syn\n### 5.3配置Deployment 在_config.yml文件，修改repo值\ndeploy:\n\ttype: git\t\n\trepository: git@github.com:padparadccha/padparadccha.github.io.git\n    branch: master\n\n## 6.部署发布\nhexo d -g\n\n","source":"_posts/T1006.md","raw":"---\ntitle: Hexo create\ndate: 2019-10-06 19:23:01\ntags: Technology\n---\n# Hexo create\nHexo搭建了很多次，由于是在虚拟机中搭建的\n由于经常换虚拟机，每次更换搭建的hexo都没有了\nheox的环境搭建也较麻烦，在此记录\n<!--more-->\n\n## 1.安装git工具\nsudo yum -y install git-all.noarch\n\n## 2.安装Node.js\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\nnvm install node\n\n## 3.安装 Hexo\nnpm install -g hexo-cli\nnpm install hexo\n3.1设置hexo环境变量\necho 'PATH=\"$PATH:./node_modules/.bin\"' >> ~/.profile\n\n## 4.建站\nhexo init\n### 4.1 Next 主题\nmkdir themes/next\ncurl -L https://api.github.com/repos/iissnan/hexo-theme-next/tarball/v5.1.2 | tar -zxv -C themes/next --strip-components=1\n### 4.2安装本地服务器\nnpm install hexo-server --save\n\n## 5.hexo和github联系起来\n### 5.1安装git插件\nnpm install hexo-deployer-git --save\n### 5.2本地添加公钥参考git.syn\n### 5.3配置Deployment 在_config.yml文件，修改repo值\ndeploy:\n\ttype: git\t\n\trepository: git@github.com:padparadccha/padparadccha.github.io.git\n    branch: master\n\n## 6.部署发布\nhexo d -g\n\n","slug":"T1006","published":1,"updated":"2025-03-21T08:19:06.474Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexms000536or9s5u1x17","content":"<h1 id=\"Hexo-create\"><a href=\"#Hexo-create\" class=\"headerlink\" title=\"Hexo create\"></a>Hexo create</h1><p>Hexo搭建了很多次，由于是在虚拟机中搭建的<br>由于经常换虚拟机，每次更换搭建的hexo都没有了<br>heox的环境搭建也较麻烦，在此记录</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-安装git工具\"><a href=\"#1-安装git工具\" class=\"headerlink\" title=\"1.安装git工具\"></a>1.安装git工具</h2><p>sudo yum -y install git-all.noarch</p>\n<h2 id=\"2-安装Node-js\"><a href=\"#2-安装Node-js\" class=\"headerlink\" title=\"2.安装Node.js\"></a>2.安装Node.js</h2><p>curl -o- <a href=\"https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh\">https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh</a> | bash<br>nvm install node</p>\n<h2 id=\"3-安装-Hexo\"><a href=\"#3-安装-Hexo\" class=\"headerlink\" title=\"3.安装 Hexo\"></a>3.安装 Hexo</h2><p>npm install -g hexo-cli<br>npm install hexo<br>3.1设置hexo环境变量<br>echo ‘PATH&#x3D;”$PATH:.&#x2F;node_modules&#x2F;.bin”‘ &gt;&gt; ~&#x2F;.profile</p>\n<h2 id=\"4-建站\"><a href=\"#4-建站\" class=\"headerlink\" title=\"4.建站\"></a>4.建站</h2><p>hexo init</p>\n<h3 id=\"4-1-Next-主题\"><a href=\"#4-1-Next-主题\" class=\"headerlink\" title=\"4.1 Next 主题\"></a>4.1 Next 主题</h3><p>mkdir themes&#x2F;next<br>curl -L <a href=\"https://api.github.com/repos/iissnan/hexo-theme-next/tarball/v5.1.2\">https://api.github.com/repos/iissnan/hexo-theme-next/tarball/v5.1.2</a> | tar -zxv -C themes&#x2F;next –strip-components&#x3D;1</p>\n<h3 id=\"4-2安装本地服务器\"><a href=\"#4-2安装本地服务器\" class=\"headerlink\" title=\"4.2安装本地服务器\"></a>4.2安装本地服务器</h3><p>npm install hexo-server –save</p>\n<h2 id=\"5-hexo和github联系起来\"><a href=\"#5-hexo和github联系起来\" class=\"headerlink\" title=\"5.hexo和github联系起来\"></a>5.hexo和github联系起来</h2><h3 id=\"5-1安装git插件\"><a href=\"#5-1安装git插件\" class=\"headerlink\" title=\"5.1安装git插件\"></a>5.1安装git插件</h3><p>npm install hexo-deployer-git –save</p>\n<h3 id=\"5-2本地添加公钥参考git-syn\"><a href=\"#5-2本地添加公钥参考git-syn\" class=\"headerlink\" title=\"5.2本地添加公钥参考git.syn\"></a>5.2本地添加公钥参考git.syn</h3><h3 id=\"5-3配置Deployment-在-config-yml文件，修改repo值\"><a href=\"#5-3配置Deployment-在-config-yml文件，修改repo值\" class=\"headerlink\" title=\"5.3配置Deployment 在_config.yml文件，修改repo值\"></a>5.3配置Deployment 在_config.yml文件，修改repo值</h3><p>deploy:<br>    type: git\t<br>    repository: <a href=\"mailto:&#103;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;\">&#103;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>:padparadccha&#x2F;padparadccha.github.io.git<br>    branch: master</p>\n<h2 id=\"6-部署发布\"><a href=\"#6-部署发布\" class=\"headerlink\" title=\"6.部署发布\"></a>6.部署发布</h2><p>hexo d -g</p>\n","excerpt":"<h1 id=\"Hexo-create\"><a href=\"#Hexo-create\" class=\"headerlink\" title=\"Hexo create\"></a>Hexo create</h1><p>Hexo搭建了很多次，由于是在虚拟机中搭建的<br>由于经常换虚拟机，每次更换搭建的hexo都没有了<br>heox的环境搭建也较麻烦，在此记录</p>","more":"<h2 id=\"1-安装git工具\"><a href=\"#1-安装git工具\" class=\"headerlink\" title=\"1.安装git工具\"></a>1.安装git工具</h2><p>sudo yum -y install git-all.noarch</p>\n<h2 id=\"2-安装Node-js\"><a href=\"#2-安装Node-js\" class=\"headerlink\" title=\"2.安装Node.js\"></a>2.安装Node.js</h2><p>curl -o- <a href=\"https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh\">https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh</a> | bash<br>nvm install node</p>\n<h2 id=\"3-安装-Hexo\"><a href=\"#3-安装-Hexo\" class=\"headerlink\" title=\"3.安装 Hexo\"></a>3.安装 Hexo</h2><p>npm install -g hexo-cli<br>npm install hexo<br>3.1设置hexo环境变量<br>echo ‘PATH&#x3D;”$PATH:.&#x2F;node_modules&#x2F;.bin”‘ &gt;&gt; ~&#x2F;.profile</p>\n<h2 id=\"4-建站\"><a href=\"#4-建站\" class=\"headerlink\" title=\"4.建站\"></a>4.建站</h2><p>hexo init</p>\n<h3 id=\"4-1-Next-主题\"><a href=\"#4-1-Next-主题\" class=\"headerlink\" title=\"4.1 Next 主题\"></a>4.1 Next 主题</h3><p>mkdir themes&#x2F;next<br>curl -L <a href=\"https://api.github.com/repos/iissnan/hexo-theme-next/tarball/v5.1.2\">https://api.github.com/repos/iissnan/hexo-theme-next/tarball/v5.1.2</a> | tar -zxv -C themes&#x2F;next –strip-components&#x3D;1</p>\n<h3 id=\"4-2安装本地服务器\"><a href=\"#4-2安装本地服务器\" class=\"headerlink\" title=\"4.2安装本地服务器\"></a>4.2安装本地服务器</h3><p>npm install hexo-server –save</p>\n<h2 id=\"5-hexo和github联系起来\"><a href=\"#5-hexo和github联系起来\" class=\"headerlink\" title=\"5.hexo和github联系起来\"></a>5.hexo和github联系起来</h2><h3 id=\"5-1安装git插件\"><a href=\"#5-1安装git插件\" class=\"headerlink\" title=\"5.1安装git插件\"></a>5.1安装git插件</h3><p>npm install hexo-deployer-git –save</p>\n<h3 id=\"5-2本地添加公钥参考git-syn\"><a href=\"#5-2本地添加公钥参考git-syn\" class=\"headerlink\" title=\"5.2本地添加公钥参考git.syn\"></a>5.2本地添加公钥参考git.syn</h3><h3 id=\"5-3配置Deployment-在-config-yml文件，修改repo值\"><a href=\"#5-3配置Deployment-在-config-yml文件，修改repo值\" class=\"headerlink\" title=\"5.3配置Deployment 在_config.yml文件，修改repo值\"></a>5.3配置Deployment 在_config.yml文件，修改repo值</h3><p>deploy:<br>    type: git\t<br>    repository: <a href=\"mailto:&#103;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;\">&#103;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>:padparadccha&#x2F;padparadccha.github.io.git<br>    branch: master</p>\n<h2 id=\"6-部署发布\"><a href=\"#6-部署发布\" class=\"headerlink\" title=\"6.部署发布\"></a>6.部署发布</h2><p>hexo d -g</p>"},{"title":"hexo博客 + nginx + https-ssl","date":"2020-11-13T07:28:57.000Z","_content":"# 前言\n紧接上篇文章，想在个人博客上添加ssl证书，能够https访问个人网站。\n\n<!--more-->\n\n# 下载申请免费ssl证书\n1.免费购买证书\n![Lena](/images/2020_11_13_pic00.png)\n![Lena](/images/2020_11_13_pic01.png)\n![Lena](/images/2020_11_13_pic02.png)\n2.证书申请\n![Lena](/images/2020_11_13_pic03.png)\n3.配置到域名解析列表\n在域名dns中添加txt信息\n4.证书验证\n5.证书部署\n6.证书下载\n下载生成 证书文件 和 私钥文件\n```\n[root@para1 www]# ls 4757052_www.padparadccha.cn.*\n4757052_www.padparadccha.cn.key  4757052_www.padparadccha.cn.pem\n```\n\n# nginx 更新 http_ssl 模块\n1.查看nginx是否安装http_ssl_module模块\n```\n$ /usr/local/nginx/sbin/nginx -V\n```\n如果出现 configure arguments: --with-http_ssl_module, 则已安装（下面的步骤可以跳过，进入 nginx.conf 配置）。\n2.需要新安装的模块，重新编译 \n下载添加 ngx_http_google_filter_module\n```\ngit clone https://github.com/cuber/ngx_http_google_filter_module\n```\n下载添加 ngx_http_substitutions_filter_module\n```\ngit clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module\n```\n3.安装 编译新的nginx\n进入nginx的源文件目录 \n```\n[root@para1 nginx]# sbin/nginx -V\nnginx version: nginx/1.18.0\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) \nbuilt with OpenSSL 1.1.1g  21 Apr 2020\nTLS SNI support enabled\nconfigure arguments: --prefix=/usr/local/nginx --with-http_gzip_static_module --http-client-body-temp-path=/usr/local/nginx/tmp/client/ --http-proxy-temp-path=/usr/local/nginx/tmp/proxy/ --http-fastcgi-temp-path=/usr/local/nginx/tmp/fcgi/ --with-poll_module --with-file-aio --with-http_realip_module --with-http_addition_module --with-http_addition_module --with-http_random_index_module --with-http_stub_status_module --http-uwsgi-temp-path=/usr/local/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/nginx/scgi_temp --with-stream \n```\n添加新的--with-http_ssl_module模块和配置两个add-module路径\n```\n./configure --prefix=/usr/local/nginx --with-openssl=/usr/local/openssl --with-http_ssl_module --with-http_gzip_static_module --http-client-body-temp-path=/usr/local/nginx/tmp/client/ --http-proxy-temp-path=/usr/local/nginx/tmp/proxy/ --http-fastcgi-temp-path=/usr/local/nginx/tmp/fcgi/ --with-poll_module --with-file-aio --with-http_realip_module --with-http_addition_module --with-http_addition_module --with-http_random_index_module --with-http_stub_status_module --http-uwsgi-temp-path=/usr/local/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/nginx/scgi_temp --with-stream --add-module=/root/data/ngx_http_google_filter_module --add-module=/root/data/ngx_http_substitutions_filter_module\n```\n4.make 注:千万不要make install 那样就会覆盖安装\n5.将原来的 Nginx备份，拷贝新生成的nginx\n```\ncp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak\ncp objs/nginx /usr/local/nginx/sbin/nginx\n```\n\n# nginx 配置文件\n修改 nginx.conf 如下：\n```\nhttp {\n\n    server {\n        listen       80;\n        server_name  www.padparadccha.cn;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   /home/git/project/blog;\n            index  index.html index.htm;\n        }\n\n\n    server {\n        listen       443 ssl;\n        server_name  www.padparadccha.cn;\n\n        ssl_certificate      cert.pem;\n        ssl_certificate_key  cert.key;\n\n        ssl_session_cache    shared:SSL:1m;\n        ssl_session_timeout  5m;\n\n        ssl_ciphers  HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers  on;\n\n        location / {\n            root   /home/git/project/blog;\n            index  index.html index.htm;\n        }\n   }\n\n   [...]\n}\n\n[...]\n```\nlisten\tssl访问端口号为 443\nssl_certificate 证书文件\nssl_certificate_key 私钥文件\nssl_ciphers  配置加密套件，写法遵循openssl标准\n\n# 启动\n/usr/local/nginx/sbin/nginx\n\n# 关于https的文章\nhttps://www.cnblogs.com/zery/p/5164795.html\n\n","source":"_posts/2020-11-13.md","raw":"---\ntitle: 'hexo博客 + nginx + https-ssl'\ndate: 2020-11-13 15:28:57\ntags:\n---\n# 前言\n紧接上篇文章，想在个人博客上添加ssl证书，能够https访问个人网站。\n\n<!--more-->\n\n# 下载申请免费ssl证书\n1.免费购买证书\n![Lena](/images/2020_11_13_pic00.png)\n![Lena](/images/2020_11_13_pic01.png)\n![Lena](/images/2020_11_13_pic02.png)\n2.证书申请\n![Lena](/images/2020_11_13_pic03.png)\n3.配置到域名解析列表\n在域名dns中添加txt信息\n4.证书验证\n5.证书部署\n6.证书下载\n下载生成 证书文件 和 私钥文件\n```\n[root@para1 www]# ls 4757052_www.padparadccha.cn.*\n4757052_www.padparadccha.cn.key  4757052_www.padparadccha.cn.pem\n```\n\n# nginx 更新 http_ssl 模块\n1.查看nginx是否安装http_ssl_module模块\n```\n$ /usr/local/nginx/sbin/nginx -V\n```\n如果出现 configure arguments: --with-http_ssl_module, 则已安装（下面的步骤可以跳过，进入 nginx.conf 配置）。\n2.需要新安装的模块，重新编译 \n下载添加 ngx_http_google_filter_module\n```\ngit clone https://github.com/cuber/ngx_http_google_filter_module\n```\n下载添加 ngx_http_substitutions_filter_module\n```\ngit clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module\n```\n3.安装 编译新的nginx\n进入nginx的源文件目录 \n```\n[root@para1 nginx]# sbin/nginx -V\nnginx version: nginx/1.18.0\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) \nbuilt with OpenSSL 1.1.1g  21 Apr 2020\nTLS SNI support enabled\nconfigure arguments: --prefix=/usr/local/nginx --with-http_gzip_static_module --http-client-body-temp-path=/usr/local/nginx/tmp/client/ --http-proxy-temp-path=/usr/local/nginx/tmp/proxy/ --http-fastcgi-temp-path=/usr/local/nginx/tmp/fcgi/ --with-poll_module --with-file-aio --with-http_realip_module --with-http_addition_module --with-http_addition_module --with-http_random_index_module --with-http_stub_status_module --http-uwsgi-temp-path=/usr/local/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/nginx/scgi_temp --with-stream \n```\n添加新的--with-http_ssl_module模块和配置两个add-module路径\n```\n./configure --prefix=/usr/local/nginx --with-openssl=/usr/local/openssl --with-http_ssl_module --with-http_gzip_static_module --http-client-body-temp-path=/usr/local/nginx/tmp/client/ --http-proxy-temp-path=/usr/local/nginx/tmp/proxy/ --http-fastcgi-temp-path=/usr/local/nginx/tmp/fcgi/ --with-poll_module --with-file-aio --with-http_realip_module --with-http_addition_module --with-http_addition_module --with-http_random_index_module --with-http_stub_status_module --http-uwsgi-temp-path=/usr/local/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/nginx/scgi_temp --with-stream --add-module=/root/data/ngx_http_google_filter_module --add-module=/root/data/ngx_http_substitutions_filter_module\n```\n4.make 注:千万不要make install 那样就会覆盖安装\n5.将原来的 Nginx备份，拷贝新生成的nginx\n```\ncp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak\ncp objs/nginx /usr/local/nginx/sbin/nginx\n```\n\n# nginx 配置文件\n修改 nginx.conf 如下：\n```\nhttp {\n\n    server {\n        listen       80;\n        server_name  www.padparadccha.cn;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   /home/git/project/blog;\n            index  index.html index.htm;\n        }\n\n\n    server {\n        listen       443 ssl;\n        server_name  www.padparadccha.cn;\n\n        ssl_certificate      cert.pem;\n        ssl_certificate_key  cert.key;\n\n        ssl_session_cache    shared:SSL:1m;\n        ssl_session_timeout  5m;\n\n        ssl_ciphers  HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers  on;\n\n        location / {\n            root   /home/git/project/blog;\n            index  index.html index.htm;\n        }\n   }\n\n   [...]\n}\n\n[...]\n```\nlisten\tssl访问端口号为 443\nssl_certificate 证书文件\nssl_certificate_key 私钥文件\nssl_ciphers  配置加密套件，写法遵循openssl标准\n\n# 启动\n/usr/local/nginx/sbin/nginx\n\n# 关于https的文章\nhttps://www.cnblogs.com/zery/p/5164795.html\n\n","slug":"2020-11-13","published":1,"updated":"2025-03-21T08:19:06.474Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmt000736ordngk745v","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>紧接上篇文章，想在个人博客上添加ssl证书，能够https访问个人网站。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"下载申请免费ssl证书\"><a href=\"#下载申请免费ssl证书\" class=\"headerlink\" title=\"下载申请免费ssl证书\"></a>下载申请免费ssl证书</h1><p>1.免费购买证书<br><img src=\"/images/2020_11_13_pic00.png\" alt=\"Lena\"><br><img src=\"/images/2020_11_13_pic01.png\" alt=\"Lena\"><br><img src=\"/images/2020_11_13_pic02.png\" alt=\"Lena\"><br>2.证书申请<br><img src=\"/images/2020_11_13_pic03.png\" alt=\"Lena\"><br>3.配置到域名解析列表<br>在域名dns中添加txt信息<br>4.证书验证<br>5.证书部署<br>6.证书下载<br>下载生成 证书文件 和 私钥文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@para1 www]# ls 4757052_www.padparadccha.cn.*</span><br><span class=\"line\">4757052_www.padparadccha.cn.key  4757052_www.padparadccha.cn.pem</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"nginx-更新-http-ssl-模块\"><a href=\"#nginx-更新-http-ssl-模块\" class=\"headerlink\" title=\"nginx 更新 http_ssl 模块\"></a>nginx 更新 http_ssl 模块</h1><p>1.查看nginx是否安装http_ssl_module模块</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure>\n<p>如果出现 configure arguments: –with-http_ssl_module, 则已安装（下面的步骤可以跳过，进入 nginx.conf 配置）。<br>2.需要新安装的模块，重新编译<br>下载添加 ngx_http_google_filter_module</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/cuber/ngx_http_google_filter_module</span><br></pre></td></tr></table></figure>\n<p>下载添加 ngx_http_substitutions_filter_module</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module</span><br></pre></td></tr></table></figure>\n<p>3.安装 编译新的nginx<br>进入nginx的源文件目录 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@para1 nginx]# sbin/nginx -V</span><br><span class=\"line\">nginx version: nginx/1.18.0</span><br><span class=\"line\">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class=\"line\">built with OpenSSL 1.1.1g  21 Apr 2020</span><br><span class=\"line\">TLS SNI support enabled</span><br><span class=\"line\">configure arguments: --prefix=/usr/local/nginx --with-http_gzip_static_module --http-client-body-temp-path=/usr/local/nginx/tmp/client/ --http-proxy-temp-path=/usr/local/nginx/tmp/proxy/ --http-fastcgi-temp-path=/usr/local/nginx/tmp/fcgi/ --with-poll_module --with-file-aio --with-http_realip_module --with-http_addition_module --with-http_addition_module --with-http_random_index_module --with-http_stub_status_module --http-uwsgi-temp-path=/usr/local/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/nginx/scgi_temp --with-stream </span><br></pre></td></tr></table></figure>\n<p>添加新的–with-http_ssl_module模块和配置两个add-module路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nginx --with-openssl=/usr/local/openssl --with-http_ssl_module --with-http_gzip_static_module --http-client-body-temp-path=/usr/local/nginx/tmp/client/ --http-proxy-temp-path=/usr/local/nginx/tmp/proxy/ --http-fastcgi-temp-path=/usr/local/nginx/tmp/fcgi/ --with-poll_module --with-file-aio --with-http_realip_module --with-http_addition_module --with-http_addition_module --with-http_random_index_module --with-http_stub_status_module --http-uwsgi-temp-path=/usr/local/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/nginx/scgi_temp --with-stream --add-module=/root/data/ngx_http_google_filter_module --add-module=/root/data/ngx_http_substitutions_filter_module</span><br></pre></td></tr></table></figure>\n<p>4.make 注:千万不要make install 那样就会覆盖安装<br>5.将原来的 Nginx备份，拷贝新生成的nginx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</span><br><span class=\"line\">cp objs/nginx /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"nginx-配置文件\"><a href=\"#nginx-配置文件\" class=\"headerlink\" title=\"nginx 配置文件\"></a>nginx 配置文件</h1><p>修改 nginx.conf 如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  www.padparadccha.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   /home/git/project/blog;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       443 ssl;</span><br><span class=\"line\">        server_name  www.padparadccha.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl_certificate      cert.pem;</span><br><span class=\"line\">        ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">        ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">        ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   /home/git/project/blog;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   [...]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[...]</span><br></pre></td></tr></table></figure>\n<p>listen\tssl访问端口号为 443<br>ssl_certificate 证书文件<br>ssl_certificate_key 私钥文件<br>ssl_ciphers  配置加密套件，写法遵循openssl标准</p>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</p>\n<h1 id=\"关于https的文章\"><a href=\"#关于https的文章\" class=\"headerlink\" title=\"关于https的文章\"></a>关于https的文章</h1><p><a href=\"https://www.cnblogs.com/zery/p/5164795.html\">https://www.cnblogs.com/zery/p/5164795.html</a></p>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>紧接上篇文章，想在个人博客上添加ssl证书，能够https访问个人网站。</p>","more":"<h1 id=\"下载申请免费ssl证书\"><a href=\"#下载申请免费ssl证书\" class=\"headerlink\" title=\"下载申请免费ssl证书\"></a>下载申请免费ssl证书</h1><p>1.免费购买证书<br><img src=\"/images/2020_11_13_pic00.png\" alt=\"Lena\"><br><img src=\"/images/2020_11_13_pic01.png\" alt=\"Lena\"><br><img src=\"/images/2020_11_13_pic02.png\" alt=\"Lena\"><br>2.证书申请<br><img src=\"/images/2020_11_13_pic03.png\" alt=\"Lena\"><br>3.配置到域名解析列表<br>在域名dns中添加txt信息<br>4.证书验证<br>5.证书部署<br>6.证书下载<br>下载生成 证书文件 和 私钥文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@para1 www]# ls 4757052_www.padparadccha.cn.*</span><br><span class=\"line\">4757052_www.padparadccha.cn.key  4757052_www.padparadccha.cn.pem</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"nginx-更新-http-ssl-模块\"><a href=\"#nginx-更新-http-ssl-模块\" class=\"headerlink\" title=\"nginx 更新 http_ssl 模块\"></a>nginx 更新 http_ssl 模块</h1><p>1.查看nginx是否安装http_ssl_module模块</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure>\n<p>如果出现 configure arguments: –with-http_ssl_module, 则已安装（下面的步骤可以跳过，进入 nginx.conf 配置）。<br>2.需要新安装的模块，重新编译<br>下载添加 ngx_http_google_filter_module</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/cuber/ngx_http_google_filter_module</span><br></pre></td></tr></table></figure>\n<p>下载添加 ngx_http_substitutions_filter_module</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module</span><br></pre></td></tr></table></figure>\n<p>3.安装 编译新的nginx<br>进入nginx的源文件目录 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@para1 nginx]# sbin/nginx -V</span><br><span class=\"line\">nginx version: nginx/1.18.0</span><br><span class=\"line\">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class=\"line\">built with OpenSSL 1.1.1g  21 Apr 2020</span><br><span class=\"line\">TLS SNI support enabled</span><br><span class=\"line\">configure arguments: --prefix=/usr/local/nginx --with-http_gzip_static_module --http-client-body-temp-path=/usr/local/nginx/tmp/client/ --http-proxy-temp-path=/usr/local/nginx/tmp/proxy/ --http-fastcgi-temp-path=/usr/local/nginx/tmp/fcgi/ --with-poll_module --with-file-aio --with-http_realip_module --with-http_addition_module --with-http_addition_module --with-http_random_index_module --with-http_stub_status_module --http-uwsgi-temp-path=/usr/local/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/nginx/scgi_temp --with-stream </span><br></pre></td></tr></table></figure>\n<p>添加新的–with-http_ssl_module模块和配置两个add-module路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nginx --with-openssl=/usr/local/openssl --with-http_ssl_module --with-http_gzip_static_module --http-client-body-temp-path=/usr/local/nginx/tmp/client/ --http-proxy-temp-path=/usr/local/nginx/tmp/proxy/ --http-fastcgi-temp-path=/usr/local/nginx/tmp/fcgi/ --with-poll_module --with-file-aio --with-http_realip_module --with-http_addition_module --with-http_addition_module --with-http_random_index_module --with-http_stub_status_module --http-uwsgi-temp-path=/usr/local/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/nginx/scgi_temp --with-stream --add-module=/root/data/ngx_http_google_filter_module --add-module=/root/data/ngx_http_substitutions_filter_module</span><br></pre></td></tr></table></figure>\n<p>4.make 注:千万不要make install 那样就会覆盖安装<br>5.将原来的 Nginx备份，拷贝新生成的nginx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</span><br><span class=\"line\">cp objs/nginx /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"nginx-配置文件\"><a href=\"#nginx-配置文件\" class=\"headerlink\" title=\"nginx 配置文件\"></a>nginx 配置文件</h1><p>修改 nginx.conf 如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  www.padparadccha.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   /home/git/project/blog;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       443 ssl;</span><br><span class=\"line\">        server_name  www.padparadccha.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl_certificate      cert.pem;</span><br><span class=\"line\">        ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">        ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">        ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   /home/git/project/blog;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   [...]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[...]</span><br></pre></td></tr></table></figure>\n<p>listen\tssl访问端口号为 443<br>ssl_certificate 证书文件<br>ssl_certificate_key 私钥文件<br>ssl_ciphers  配置加密套件，写法遵循openssl标准</p>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</p>\n<h1 id=\"关于https的文章\"><a href=\"#关于https的文章\" class=\"headerlink\" title=\"关于https的文章\"></a>关于https的文章</h1><p><a href=\"https://www.cnblogs.com/zery/p/5164795.html\">https://www.cnblogs.com/zery/p/5164795.html</a></p>"},{"title":"hexo博客部署到服务器","date":"2020-11-12T06:01:38.000Z","_content":"# 前言\n之前博客都是放在github page上进行部署，现在用nginx部署在自己的服务器上\n前面的基本配置，简单略过，详细可以参考hexo官方文档\n本篇主要在服务器建立一个裸仓库，本地将静态页面上传到服务器，用nginx进行部署\n\n<!--more-->\n# 基本配置\n## 本地安装 node\n1.node官网下载 推荐使用nvm\n2.配置全局变量\n3.安装hexo-cli\n\n## 初始化hexo\n1.初始化\n```\nhexo init myblo && myblog\nnpm i\n```\n2.下载主题\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n3.本地执行hexo项目 npm start\n添加 start脚本 \n![Lena](/images/pic01.png)\n4.验证效果\n\n## git环境搭建\n1.git 安装\n2.ssh 认证\n```\ngit config --global user.name \"yourname\"\ngit config --global user.email youremail@example.com\nssh-keygen -t rsa -C \"youremail@example.com\"\ngit config --global core.autocrlf false  // 禁用自动转换，这个不设置后面上传时会出现警告，如下\n```\n# 服务器配置\n## 搭建远程Git私库\n1.登录远程服务器\n2.安装git\n```\ngit --version // 如无，则安装\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel\nyum install -y git\n```\n3.创建用户并配置其仓库\n```\nuseradd git\npasswd git // 设置密码\nsu git // 这步很重要，不切换用户后面会很麻烦\ncd /home/git/\nmkdir -p projects/blog // 项目存在的真实目录\nmkdir repos && cd repos\ngit init --bare blog.git // 创建一个裸露的仓库\ncd blog.git/hooks\nvi post-receive // 创建 hook 钩子函数，输入了内容如下\n#输入完成后\nchmod +x post-receive\nexit // 退出到 root 登录\nchown -R git:git /home/git/repos/blog.git // 添加权限\n```\n```\nfile  post-receive:\n#!/bin/sh\ngit --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f\n#将传到/home/git/repos/blog.git地址的文件，放到/home/git/projects/blog\n```\n4.测试git仓库是否可用\n```\ngit clone git@server_ip:/home/git/repos/blog.git\n```\n5.本地电脑 建立ssh信任关系\n```\nssh-copy-id -i C:/Users/yourname/.ssh/id_rsa.pub git@server_ip\nssh git@server_ip // 测试能否登录\n```\n6.禁用git用户的shell登录权限\n```\ncat /etc/shells // 查看 git-shell 是否在登录方式里面\nwhich git-shell // 查看是否安装\nvi /etc/shells\n#添加上2步显示出来的路径，通常在 /usr/bin/git-shell\n```\n修改/etc/passwd中的权限\n```\n// 将原来的\ngit:x:1000:1000::/home/git:/bin/bash\n\n// 修改为\ngit:x:1000:1000:,,,:/home/git:/usr/bin/git-shell\n```\n\n# 搭建nginx服务器\n## 下载安装 nginx\n```\ncd /usr/local/src\nwget http://nginx.org/download/nginx-1.15.2.tar.gz\ntar xzvf nginx-1.15.2.tar.gz\ncd nginx-1.15.2\n./configure // 如果后面还想要配置 SSL 协议，就执行后面一句！\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module\nmake && make install\nalias nginx='/usr/local/nginx/sbin/nginx' // 为 nginx 取别名，后面可直接用\n```\n\n## 配置nginx文件\n1.先启动是否安装成功\n```\nnginx \n#浏览器查看 server_ip，默认是 80 端口\n```\n\n2.修改配置文件\n```\nnginx -s stop // 先停止nginx\ncd /usr/local/nginx/conf\nvi nginx.conf\n修改 root 解析路径, 如下图\n同时将 user 改为 root, 不然nginx无法访问 /home/git/projects/blog\nnginx\n```\n![Lena](/images/2020_11_12_pic02.png)\n\n# 发布\n## 本地配置 _config.yml文件\n![Lena](/images/2020_11_12_pic03.png)\n## 在package.json 中添加npm脚本\n## 链接 \n本地调试 npm start\n上次服务器 npm run deply","source":"_posts/2020-11-12.md","raw":"---\ntitle: 'hexo博客部署到服务器'\ndate: 2020-11-12 14:01:38\ntags:\n---\n# 前言\n之前博客都是放在github page上进行部署，现在用nginx部署在自己的服务器上\n前面的基本配置，简单略过，详细可以参考hexo官方文档\n本篇主要在服务器建立一个裸仓库，本地将静态页面上传到服务器，用nginx进行部署\n\n<!--more-->\n# 基本配置\n## 本地安装 node\n1.node官网下载 推荐使用nvm\n2.配置全局变量\n3.安装hexo-cli\n\n## 初始化hexo\n1.初始化\n```\nhexo init myblo && myblog\nnpm i\n```\n2.下载主题\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n3.本地执行hexo项目 npm start\n添加 start脚本 \n![Lena](/images/pic01.png)\n4.验证效果\n\n## git环境搭建\n1.git 安装\n2.ssh 认证\n```\ngit config --global user.name \"yourname\"\ngit config --global user.email youremail@example.com\nssh-keygen -t rsa -C \"youremail@example.com\"\ngit config --global core.autocrlf false  // 禁用自动转换，这个不设置后面上传时会出现警告，如下\n```\n# 服务器配置\n## 搭建远程Git私库\n1.登录远程服务器\n2.安装git\n```\ngit --version // 如无，则安装\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel\nyum install -y git\n```\n3.创建用户并配置其仓库\n```\nuseradd git\npasswd git // 设置密码\nsu git // 这步很重要，不切换用户后面会很麻烦\ncd /home/git/\nmkdir -p projects/blog // 项目存在的真实目录\nmkdir repos && cd repos\ngit init --bare blog.git // 创建一个裸露的仓库\ncd blog.git/hooks\nvi post-receive // 创建 hook 钩子函数，输入了内容如下\n#输入完成后\nchmod +x post-receive\nexit // 退出到 root 登录\nchown -R git:git /home/git/repos/blog.git // 添加权限\n```\n```\nfile  post-receive:\n#!/bin/sh\ngit --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f\n#将传到/home/git/repos/blog.git地址的文件，放到/home/git/projects/blog\n```\n4.测试git仓库是否可用\n```\ngit clone git@server_ip:/home/git/repos/blog.git\n```\n5.本地电脑 建立ssh信任关系\n```\nssh-copy-id -i C:/Users/yourname/.ssh/id_rsa.pub git@server_ip\nssh git@server_ip // 测试能否登录\n```\n6.禁用git用户的shell登录权限\n```\ncat /etc/shells // 查看 git-shell 是否在登录方式里面\nwhich git-shell // 查看是否安装\nvi /etc/shells\n#添加上2步显示出来的路径，通常在 /usr/bin/git-shell\n```\n修改/etc/passwd中的权限\n```\n// 将原来的\ngit:x:1000:1000::/home/git:/bin/bash\n\n// 修改为\ngit:x:1000:1000:,,,:/home/git:/usr/bin/git-shell\n```\n\n# 搭建nginx服务器\n## 下载安装 nginx\n```\ncd /usr/local/src\nwget http://nginx.org/download/nginx-1.15.2.tar.gz\ntar xzvf nginx-1.15.2.tar.gz\ncd nginx-1.15.2\n./configure // 如果后面还想要配置 SSL 协议，就执行后面一句！\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module\nmake && make install\nalias nginx='/usr/local/nginx/sbin/nginx' // 为 nginx 取别名，后面可直接用\n```\n\n## 配置nginx文件\n1.先启动是否安装成功\n```\nnginx \n#浏览器查看 server_ip，默认是 80 端口\n```\n\n2.修改配置文件\n```\nnginx -s stop // 先停止nginx\ncd /usr/local/nginx/conf\nvi nginx.conf\n修改 root 解析路径, 如下图\n同时将 user 改为 root, 不然nginx无法访问 /home/git/projects/blog\nnginx\n```\n![Lena](/images/2020_11_12_pic02.png)\n\n# 发布\n## 本地配置 _config.yml文件\n![Lena](/images/2020_11_12_pic03.png)\n## 在package.json 中添加npm脚本\n## 链接 \n本地调试 npm start\n上次服务器 npm run deply","slug":"2020-11-12","published":1,"updated":"2025-03-21T08:19:06.474Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmt000836orej4400vr","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前博客都是放在github page上进行部署，现在用nginx部署在自己的服务器上<br>前面的基本配置，简单略过，详细可以参考hexo官方文档<br>本篇主要在服务器建立一个裸仓库，本地将静态页面上传到服务器，用nginx进行部署</p>\n<span id=\"more\"></span>\n<h1 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h1><h2 id=\"本地安装-node\"><a href=\"#本地安装-node\" class=\"headerlink\" title=\"本地安装 node\"></a>本地安装 node</h2><p>1.node官网下载 推荐使用nvm<br>2.配置全局变量<br>3.安装hexo-cli</p>\n<h2 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h2><p>1.初始化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myblo &amp;&amp; myblog</span><br><span class=\"line\">npm i</span><br></pre></td></tr></table></figure>\n<p>2.下载主题<br>git clone <a href=\"https://github.com/iissnan/hexo-theme-next\">https://github.com/iissnan/hexo-theme-next</a> themes&#x2F;next<br>3.本地执行hexo项目 npm start<br>添加 start脚本<br><img src=\"/images/pic01.png\" alt=\"Lena\"><br>4.验证效果</p>\n<h2 id=\"git环境搭建\"><a href=\"#git环境搭建\" class=\"headerlink\" title=\"git环境搭建\"></a>git环境搭建</h2><p>1.git 安装<br>2.ssh 认证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;yourname&quot;</span><br><span class=\"line\">git config --global user.email youremail@example.com</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class=\"line\">git config --global core.autocrlf false  // 禁用自动转换，这个不设置后面上传时会出现警告，如下</span><br></pre></td></tr></table></figure>\n<h1 id=\"服务器配置\"><a href=\"#服务器配置\" class=\"headerlink\" title=\"服务器配置\"></a>服务器配置</h1><h2 id=\"搭建远程Git私库\"><a href=\"#搭建远程Git私库\" class=\"headerlink\" title=\"搭建远程Git私库\"></a>搭建远程Git私库</h2><p>1.登录远程服务器<br>2.安装git</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version // 如无，则安装</span><br><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class=\"line\">yum install -y git</span><br></pre></td></tr></table></figure>\n<p>3.创建用户并配置其仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd git</span><br><span class=\"line\">passwd git // 设置密码</span><br><span class=\"line\">su git // 这步很重要，不切换用户后面会很麻烦</span><br><span class=\"line\">cd /home/git/</span><br><span class=\"line\">mkdir -p projects/blog // 项目存在的真实目录</span><br><span class=\"line\">mkdir repos &amp;&amp; cd repos</span><br><span class=\"line\">git init --bare blog.git // 创建一个裸露的仓库</span><br><span class=\"line\">cd blog.git/hooks</span><br><span class=\"line\">vi post-receive // 创建 hook 钩子函数，输入了内容如下</span><br><span class=\"line\">#输入完成后</span><br><span class=\"line\">chmod +x post-receive</span><br><span class=\"line\">exit // 退出到 root 登录</span><br><span class=\"line\">chown -R git:git /home/git/repos/blog.git // 添加权限</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file  post-receive:</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f</span><br><span class=\"line\">#将传到/home/git/repos/blog.git地址的文件，放到/home/git/projects/blog</span><br></pre></td></tr></table></figure>\n<p>4.测试git仓库是否可用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@server_ip:/home/git/repos/blog.git</span><br></pre></td></tr></table></figure>\n<p>5.本地电脑 建立ssh信任关系</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i C:/Users/yourname/.ssh/id_rsa.pub git@server_ip</span><br><span class=\"line\">ssh git@server_ip // 测试能否登录</span><br></pre></td></tr></table></figure>\n<p>6.禁用git用户的shell登录权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/shells // 查看 git-shell 是否在登录方式里面</span><br><span class=\"line\">which git-shell // 查看是否安装</span><br><span class=\"line\">vi /etc/shells</span><br><span class=\"line\">#添加上2步显示出来的路径，通常在 /usr/bin/git-shell</span><br></pre></td></tr></table></figure>\n<p>修改&#x2F;etc&#x2F;passwd中的权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将原来的</span><br><span class=\"line\">git:x:1000:1000::/home/git:/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改为</span><br><span class=\"line\">git:x:1000:1000:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"搭建nginx服务器\"><a href=\"#搭建nginx服务器\" class=\"headerlink\" title=\"搭建nginx服务器\"></a>搭建nginx服务器</h1><h2 id=\"下载安装-nginx\"><a href=\"#下载安装-nginx\" class=\"headerlink\" title=\"下载安装 nginx\"></a>下载安装 nginx</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/src</span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.15.2.tar.gz</span><br><span class=\"line\">tar xzvf nginx-1.15.2.tar.gz</span><br><span class=\"line\">cd nginx-1.15.2</span><br><span class=\"line\">./configure // 如果后面还想要配置 SSL 协议，就执行后面一句！</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">alias nginx=&#x27;/usr/local/nginx/sbin/nginx&#x27; // 为 nginx 取别名，后面可直接用</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置nginx文件\"><a href=\"#配置nginx文件\" class=\"headerlink\" title=\"配置nginx文件\"></a>配置nginx文件</h2><p>1.先启动是否安装成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx </span><br><span class=\"line\">#浏览器查看 server_ip，默认是 80 端口</span><br></pre></td></tr></table></figure>\n\n<p>2.修改配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop // 先停止nginx</span><br><span class=\"line\">cd /usr/local/nginx/conf</span><br><span class=\"line\">vi nginx.conf</span><br><span class=\"line\">修改 root 解析路径, 如下图</span><br><span class=\"line\">同时将 user 改为 root, 不然nginx无法访问 /home/git/projects/blog</span><br><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020_11_12_pic02.png\" alt=\"Lena\"></p>\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><h2 id=\"本地配置-config-yml文件\"><a href=\"#本地配置-config-yml文件\" class=\"headerlink\" title=\"本地配置 _config.yml文件\"></a>本地配置 _config.yml文件</h2><p><img src=\"/images/2020_11_12_pic03.png\" alt=\"Lena\"></p>\n<h2 id=\"在package-json-中添加npm脚本\"><a href=\"#在package-json-中添加npm脚本\" class=\"headerlink\" title=\"在package.json 中添加npm脚本\"></a>在package.json 中添加npm脚本</h2><h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>本地调试 npm start<br>上次服务器 npm run deply</p>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前博客都是放在github page上进行部署，现在用nginx部署在自己的服务器上<br>前面的基本配置，简单略过，详细可以参考hexo官方文档<br>本篇主要在服务器建立一个裸仓库，本地将静态页面上传到服务器，用nginx进行部署</p>","more":"<h1 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h1><h2 id=\"本地安装-node\"><a href=\"#本地安装-node\" class=\"headerlink\" title=\"本地安装 node\"></a>本地安装 node</h2><p>1.node官网下载 推荐使用nvm<br>2.配置全局变量<br>3.安装hexo-cli</p>\n<h2 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h2><p>1.初始化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myblo &amp;&amp; myblog</span><br><span class=\"line\">npm i</span><br></pre></td></tr></table></figure>\n<p>2.下载主题<br>git clone <a href=\"https://github.com/iissnan/hexo-theme-next\">https://github.com/iissnan/hexo-theme-next</a> themes&#x2F;next<br>3.本地执行hexo项目 npm start<br>添加 start脚本<br><img src=\"/images/pic01.png\" alt=\"Lena\"><br>4.验证效果</p>\n<h2 id=\"git环境搭建\"><a href=\"#git环境搭建\" class=\"headerlink\" title=\"git环境搭建\"></a>git环境搭建</h2><p>1.git 安装<br>2.ssh 认证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;yourname&quot;</span><br><span class=\"line\">git config --global user.email youremail@example.com</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class=\"line\">git config --global core.autocrlf false  // 禁用自动转换，这个不设置后面上传时会出现警告，如下</span><br></pre></td></tr></table></figure>\n<h1 id=\"服务器配置\"><a href=\"#服务器配置\" class=\"headerlink\" title=\"服务器配置\"></a>服务器配置</h1><h2 id=\"搭建远程Git私库\"><a href=\"#搭建远程Git私库\" class=\"headerlink\" title=\"搭建远程Git私库\"></a>搭建远程Git私库</h2><p>1.登录远程服务器<br>2.安装git</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version // 如无，则安装</span><br><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class=\"line\">yum install -y git</span><br></pre></td></tr></table></figure>\n<p>3.创建用户并配置其仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd git</span><br><span class=\"line\">passwd git // 设置密码</span><br><span class=\"line\">su git // 这步很重要，不切换用户后面会很麻烦</span><br><span class=\"line\">cd /home/git/</span><br><span class=\"line\">mkdir -p projects/blog // 项目存在的真实目录</span><br><span class=\"line\">mkdir repos &amp;&amp; cd repos</span><br><span class=\"line\">git init --bare blog.git // 创建一个裸露的仓库</span><br><span class=\"line\">cd blog.git/hooks</span><br><span class=\"line\">vi post-receive // 创建 hook 钩子函数，输入了内容如下</span><br><span class=\"line\">#输入完成后</span><br><span class=\"line\">chmod +x post-receive</span><br><span class=\"line\">exit // 退出到 root 登录</span><br><span class=\"line\">chown -R git:git /home/git/repos/blog.git // 添加权限</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file  post-receive:</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f</span><br><span class=\"line\">#将传到/home/git/repos/blog.git地址的文件，放到/home/git/projects/blog</span><br></pre></td></tr></table></figure>\n<p>4.测试git仓库是否可用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@server_ip:/home/git/repos/blog.git</span><br></pre></td></tr></table></figure>\n<p>5.本地电脑 建立ssh信任关系</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i C:/Users/yourname/.ssh/id_rsa.pub git@server_ip</span><br><span class=\"line\">ssh git@server_ip // 测试能否登录</span><br></pre></td></tr></table></figure>\n<p>6.禁用git用户的shell登录权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/shells // 查看 git-shell 是否在登录方式里面</span><br><span class=\"line\">which git-shell // 查看是否安装</span><br><span class=\"line\">vi /etc/shells</span><br><span class=\"line\">#添加上2步显示出来的路径，通常在 /usr/bin/git-shell</span><br></pre></td></tr></table></figure>\n<p>修改&#x2F;etc&#x2F;passwd中的权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将原来的</span><br><span class=\"line\">git:x:1000:1000::/home/git:/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改为</span><br><span class=\"line\">git:x:1000:1000:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"搭建nginx服务器\"><a href=\"#搭建nginx服务器\" class=\"headerlink\" title=\"搭建nginx服务器\"></a>搭建nginx服务器</h1><h2 id=\"下载安装-nginx\"><a href=\"#下载安装-nginx\" class=\"headerlink\" title=\"下载安装 nginx\"></a>下载安装 nginx</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/src</span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.15.2.tar.gz</span><br><span class=\"line\">tar xzvf nginx-1.15.2.tar.gz</span><br><span class=\"line\">cd nginx-1.15.2</span><br><span class=\"line\">./configure // 如果后面还想要配置 SSL 协议，就执行后面一句！</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">alias nginx=&#x27;/usr/local/nginx/sbin/nginx&#x27; // 为 nginx 取别名，后面可直接用</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置nginx文件\"><a href=\"#配置nginx文件\" class=\"headerlink\" title=\"配置nginx文件\"></a>配置nginx文件</h2><p>1.先启动是否安装成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx </span><br><span class=\"line\">#浏览器查看 server_ip，默认是 80 端口</span><br></pre></td></tr></table></figure>\n\n<p>2.修改配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop // 先停止nginx</span><br><span class=\"line\">cd /usr/local/nginx/conf</span><br><span class=\"line\">vi nginx.conf</span><br><span class=\"line\">修改 root 解析路径, 如下图</span><br><span class=\"line\">同时将 user 改为 root, 不然nginx无法访问 /home/git/projects/blog</span><br><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020_11_12_pic02.png\" alt=\"Lena\"></p>\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><h2 id=\"本地配置-config-yml文件\"><a href=\"#本地配置-config-yml文件\" class=\"headerlink\" title=\"本地配置 _config.yml文件\"></a>本地配置 _config.yml文件</h2><p><img src=\"/images/2020_11_12_pic03.png\" alt=\"Lena\"></p>\n<h2 id=\"在package-json-中添加npm脚本\"><a href=\"#在package-json-中添加npm脚本\" class=\"headerlink\" title=\"在package.json 中添加npm脚本\"></a>在package.json 中添加npm脚本</h2><h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>本地调试 npm start<br>上次服务器 npm run deply</p>"},{"title":"记录下第一封信","date":"2019-09-09T06:02:31.000Z","_content":"\n今天早上，我看到你发的日记了。。。\n我哭了，因为你的感受和我的一样，你写的我都感受的到。\n你总是在我脑海里，随时都可能会出现，\n不经意间的出现，我就呆呆的在那思索片刻，又继续工作。\n<!--more-->\n\n我总是在想，我是个渣男\n没有能力承担这责任，也不知道该如何解决。\n我就不该去找你，而找你之后，我却狠心离开。\n我常常在想分开那晚，你说的话：\n你不想挂断，因为你知道，这已挂断就不会再有联系了。\n我像个骗子一样，不停的安慰你：\n没事的，就当今晚什么都没有发生，我们第二天仍然像以前一样。\n过了多少个第二天，确实没有再联系了。\n我真是个骗子。\n\n我进退两难，\n不知道该去找你，还是继续克制自己。\n以前我一直抓住不放手，是因为我觉得，我还有机会改变我们以后，\n现在，我对自己无力了，时间飞逝，以来不及我去做准备，\n毕业三年来，还是原来的我，没有任何能力去改变，\n我终究没有能力，\n我一直以为，我会成长到去拥有你的能力，\n才发现，时间已过，我还在原地\n我真不想浪费你的时间了\n\n愿， 你， 幸福\n\n","source":"_posts/909.md","raw":"---\ntitle: 记录下第一封信 \ndate: 2019-09-09 14:02:31\ntags:\n---\n\n今天早上，我看到你发的日记了。。。\n我哭了，因为你的感受和我的一样，你写的我都感受的到。\n你总是在我脑海里，随时都可能会出现，\n不经意间的出现，我就呆呆的在那思索片刻，又继续工作。\n<!--more-->\n\n我总是在想，我是个渣男\n没有能力承担这责任，也不知道该如何解决。\n我就不该去找你，而找你之后，我却狠心离开。\n我常常在想分开那晚，你说的话：\n你不想挂断，因为你知道，这已挂断就不会再有联系了。\n我像个骗子一样，不停的安慰你：\n没事的，就当今晚什么都没有发生，我们第二天仍然像以前一样。\n过了多少个第二天，确实没有再联系了。\n我真是个骗子。\n\n我进退两难，\n不知道该去找你，还是继续克制自己。\n以前我一直抓住不放手，是因为我觉得，我还有机会改变我们以后，\n现在，我对自己无力了，时间飞逝，以来不及我去做准备，\n毕业三年来，还是原来的我，没有任何能力去改变，\n我终究没有能力，\n我一直以为，我会成长到去拥有你的能力，\n才发现，时间已过，我还在原地\n我真不想浪费你的时间了\n\n愿， 你， 幸福\n\n","slug":"909","published":1,"updated":"2025-03-21T08:19:06.474Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmu000936ordh1i8rw0","content":"<p>今天早上，我看到你发的日记了。。。<br>我哭了，因为你的感受和我的一样，你写的我都感受的到。<br>你总是在我脑海里，随时都可能会出现，<br>不经意间的出现，我就呆呆的在那思索片刻，又继续工作。</p>\n<span id=\"more\"></span>\n\n<p>我总是在想，我是个渣男<br>没有能力承担这责任，也不知道该如何解决。<br>我就不该去找你，而找你之后，我却狠心离开。<br>我常常在想分开那晚，你说的话：<br>你不想挂断，因为你知道，这已挂断就不会再有联系了。<br>我像个骗子一样，不停的安慰你：<br>没事的，就当今晚什么都没有发生，我们第二天仍然像以前一样。<br>过了多少个第二天，确实没有再联系了。<br>我真是个骗子。</p>\n<p>我进退两难，<br>不知道该去找你，还是继续克制自己。<br>以前我一直抓住不放手，是因为我觉得，我还有机会改变我们以后，<br>现在，我对自己无力了，时间飞逝，以来不及我去做准备，<br>毕业三年来，还是原来的我，没有任何能力去改变，<br>我终究没有能力，<br>我一直以为，我会成长到去拥有你的能力，<br>才发现，时间已过，我还在原地<br>我真不想浪费你的时间了</p>\n<p>愿， 你， 幸福</p>\n","excerpt":"<p>今天早上，我看到你发的日记了。。。<br>我哭了，因为你的感受和我的一样，你写的我都感受的到。<br>你总是在我脑海里，随时都可能会出现，<br>不经意间的出现，我就呆呆的在那思索片刻，又继续工作。</p>","more":"<p>我总是在想，我是个渣男<br>没有能力承担这责任，也不知道该如何解决。<br>我就不该去找你，而找你之后，我却狠心离开。<br>我常常在想分开那晚，你说的话：<br>你不想挂断，因为你知道，这已挂断就不会再有联系了。<br>我像个骗子一样，不停的安慰你：<br>没事的，就当今晚什么都没有发生，我们第二天仍然像以前一样。<br>过了多少个第二天，确实没有再联系了。<br>我真是个骗子。</p>\n<p>我进退两难，<br>不知道该去找你，还是继续克制自己。<br>以前我一直抓住不放手，是因为我觉得，我还有机会改变我们以后，<br>现在，我对自己无力了，时间飞逝，以来不及我去做准备，<br>毕业三年来，还是原来的我，没有任何能力去改变，<br>我终究没有能力，<br>我一直以为，我会成长到去拥有你的能力，<br>才发现，时间已过，我还在原地<br>我真不想浪费你的时间了</p>\n<p>愿， 你， 幸福</p>"},{"title":"文件IO--fileIO","date":"2020-10-12T02:58:48.000Z","_content":"# 文件IO简介 \n1.文件IO也称不带缓冲的I/O(unbuffered)。不带缓冲指的是每个read, write都调用内核中的一个系统调用。\n2.遵循POSIX相关标准，任何兼容POSIX标准的操作系统上都支持文件I/O。\n3.读写文件时, 每次操作都会执行相关系统调用, 好处是直接读写实际文件，坏处是频繁的系统调用会增加系统开销。\n\n<!--more-->\n\n# 原子操作\n--> 打开文件 + 移动到末尾\n考虑一个进程，它将数据添加到一个文件尾端。早期的 unix版本并不支持open的O_APPEND选项，\n```\nif (lseek(fd, 0L, 2) < 0)\n\terr_sys(\"lseek error\");\nif (write(fd, buff, 100) != 100)\n\terr_sys(\"write error\");\n```\n以上情况，若两个进程A和B对同一文件进行添加操作。每个进程都打开了该文件，但未使用O_APPEND标志。\n每个进程都有它自己的文件表项，但是共享一个v节点表项。\n1.假定进程A调用lseek，对于进程A的该文件的当前位置量设置为1500L,\n2.然后内核切换进程使B进程运行。进程B执行lseek，也将该文件的当前位移量设置为1500L,\n3.然后B调用write，它将B的该文件的当前位置量增至1600\n4.因为文件的长度已经增加，所以内核对v节点中的当前长度更新为1600\n5.然后内核又切换使用进程A恢复运行\n6.当A调用write时，及从其当前文件位移量(1500)处写数据到文件中\n这样就覆盖了进程B写到文件中的内容\n\n这里的问题出在逻辑操作\"定位到文件尾处，然后写\"使用了两个分开的函数调用。\n解决的方法是使用这两个操作对于进程而言成为一个原子操作。\nunix提供了一种方法使这种操作成为原子操作，在打开文件时设置O_APPEND标志。\n使内核每次对这种文件进行写之前，都将进程的当前位置量设置到该文件的尾端处，\n于是在每次写之前就不再需要调用lseek\n\n--> 创建临时文件\n```\n#include <stdio.h>\nchar *tmpnam(char *s);\n描述 create a name for a temporary file\n\nFILE *tmpfile(void);\n描述 create a temporary file\n```\n以上两个函数都是创建一个临时文件。\ntmpnam函数 得到一个临时文件名之后需要自己创建文件并打开\ntmpfile函数 得到并打开一个临时文件(w+), 文件会自动删除当它关闭或者进程结束\n对比两个函数，tmpfile函数操作原子化。\n\n# 重定向 dup、dup2\n## 函数 dup、dup2\n```\n#include <unistd.h>\nint dup(int oldfd);  //uses the lowest-numbered unused descriptor for the new descriptor\nint dup2(int oldfd, int newfd);  //makes newfd be the copy of oldfd, closing newfd first if necessary\n\n//关闭 newfd前，注意：\n//1.oldfd 是一个无效的文件描述符 调用失败,newfd不会关闭\n//2.oldfd 是一个有效的文件描述符 且newfd和oldfd值一样，dup2什么也不做，直接返回newfd\n返回值 \nOn success, these system calls return the new descriptor.  On error, -1 is returned, and errno is set appropriately.\n```\n\n## 输入重定向\n1.命令 < 文件   将指定文件作为命令的输入设备\n2.命令  << 分界符 表示从标准输入设备（键盘）中读入，直到遇到分界符才停止（读入的数据不包括分界符），这里的分界符其实就是自定义的字符串\n```\n命令 < 文件 \n1.fd_file = open  O_RDONLY | O_EXCL \n2.fd_in = dup(0)\n3.dup2(fd_file, 0)\n操作\n4.dup2(fd_in, 0)\n5.close(fd_in)\n6.close(fd_file)\n```\n\n## 输出重定向\n1.命令 > 文件\n3.命令 2> 文件  错误重定向 至文件\n3.命令 >> 文件\n4.命令  2>> 文件\n5.命令 >> 文件 2>&1  // 命令 &>> 文件  // &>/dev/null\n\n```\ncommand > file  输出重定向 至file,以覆盖的方式\n1.fd_file = open 有则清空无则创建 O_WRONLY | O_CREAT | O_TRUNC\n2.fd_out = dup(1)\n3.dup2(fd_file,1)\n4.操作\n5.dup2(fd_out,1)\n6.close(fd_out)\n7.close(fd_file)\n```\n\n```\ncommand >>file 输出重定向 至file,以追加的方式 \n1.fd_file = open 有则清空无则创建 O_WRONLY | O_CREAT | O_APPEND\n2.fd_out = dup(1)  //复制标准输出 进行备份\n3.dup2(fd_file,1)  //将标准输出的位置进行替换  \n4.操作\n5.dup2(fd_out,1)   //标准输出进行还原\n6.close(fd_out)\n7.close(fd_file)\n```\n\n```\n命令 >> 文件 2>&1  以追加的方式，把正确输出和错误信息同时保存到同一个文件（file）中。\n1.fd_file = open 有则清空无则创建 O_WRONLY | O_CREAT | O_APPEND\n2.fd_out = dup(1)   fd_err = dup(2) //复制标准输出 进行备份\n3.dup2(fd_file,1)   dup2(fd_file,2) //将标准输出的位置进行替换\n4.操作\n5.dup2(fd_out,1)  dup2(fd_err,2) //标准输出进行还原\n6.close(fd_out) close(fd_err)\n7.close(fd_file)\n```\n\n注意\n1.dup使用的是系统调用IO，如果替换标准输入输出，而使用文件IO的话，会有缓冲区的问题\n2.dup使用的时候，注意原子操作，其他人会操作文件描述符\n\n## 命令 >> 文件 2>&1 的由来\n命令 1>> 文件 2>&1   --->  2>&1   用文件描述符1修改文件描述符2，因此文件描述符2(错误输出)dup2(1,2) --> 错误输出和标准输出都输出至 文件中\n```\n[para dup]$ ls -l aaa &> file       &>  全部输出 至file\n[para dup]$ ls -l aaa >> file 2>&1    先标准输出 输出至file 将1复制给1，共同输出至file\n```\n\n## 内容输出至 /dev/null\n命令 >> /dev/null 2>&1 \n命令 &>> /dev/null\n\n![Lena](/images/fileIO01.png)\n\n# 文件和设备\n\t--> /dev/console - 系统控制台,系统错误信息都输出到这里\n    --> /dev/tty - 进程控制台，访问不同的物理设备。\n    --> /dev/null - 空设备，向所有写这个设备的输出都将被丢弃\n    --> /dev/zero \n\n","source":"_posts/fileIO.md","raw":"---\ntitle: 文件IO--fileIO\ndate: 2020-10-12 10:58:48\ntags:\n---\n# 文件IO简介 \n1.文件IO也称不带缓冲的I/O(unbuffered)。不带缓冲指的是每个read, write都调用内核中的一个系统调用。\n2.遵循POSIX相关标准，任何兼容POSIX标准的操作系统上都支持文件I/O。\n3.读写文件时, 每次操作都会执行相关系统调用, 好处是直接读写实际文件，坏处是频繁的系统调用会增加系统开销。\n\n<!--more-->\n\n# 原子操作\n--> 打开文件 + 移动到末尾\n考虑一个进程，它将数据添加到一个文件尾端。早期的 unix版本并不支持open的O_APPEND选项，\n```\nif (lseek(fd, 0L, 2) < 0)\n\terr_sys(\"lseek error\");\nif (write(fd, buff, 100) != 100)\n\terr_sys(\"write error\");\n```\n以上情况，若两个进程A和B对同一文件进行添加操作。每个进程都打开了该文件，但未使用O_APPEND标志。\n每个进程都有它自己的文件表项，但是共享一个v节点表项。\n1.假定进程A调用lseek，对于进程A的该文件的当前位置量设置为1500L,\n2.然后内核切换进程使B进程运行。进程B执行lseek，也将该文件的当前位移量设置为1500L,\n3.然后B调用write，它将B的该文件的当前位置量增至1600\n4.因为文件的长度已经增加，所以内核对v节点中的当前长度更新为1600\n5.然后内核又切换使用进程A恢复运行\n6.当A调用write时，及从其当前文件位移量(1500)处写数据到文件中\n这样就覆盖了进程B写到文件中的内容\n\n这里的问题出在逻辑操作\"定位到文件尾处，然后写\"使用了两个分开的函数调用。\n解决的方法是使用这两个操作对于进程而言成为一个原子操作。\nunix提供了一种方法使这种操作成为原子操作，在打开文件时设置O_APPEND标志。\n使内核每次对这种文件进行写之前，都将进程的当前位置量设置到该文件的尾端处，\n于是在每次写之前就不再需要调用lseek\n\n--> 创建临时文件\n```\n#include <stdio.h>\nchar *tmpnam(char *s);\n描述 create a name for a temporary file\n\nFILE *tmpfile(void);\n描述 create a temporary file\n```\n以上两个函数都是创建一个临时文件。\ntmpnam函数 得到一个临时文件名之后需要自己创建文件并打开\ntmpfile函数 得到并打开一个临时文件(w+), 文件会自动删除当它关闭或者进程结束\n对比两个函数，tmpfile函数操作原子化。\n\n# 重定向 dup、dup2\n## 函数 dup、dup2\n```\n#include <unistd.h>\nint dup(int oldfd);  //uses the lowest-numbered unused descriptor for the new descriptor\nint dup2(int oldfd, int newfd);  //makes newfd be the copy of oldfd, closing newfd first if necessary\n\n//关闭 newfd前，注意：\n//1.oldfd 是一个无效的文件描述符 调用失败,newfd不会关闭\n//2.oldfd 是一个有效的文件描述符 且newfd和oldfd值一样，dup2什么也不做，直接返回newfd\n返回值 \nOn success, these system calls return the new descriptor.  On error, -1 is returned, and errno is set appropriately.\n```\n\n## 输入重定向\n1.命令 < 文件   将指定文件作为命令的输入设备\n2.命令  << 分界符 表示从标准输入设备（键盘）中读入，直到遇到分界符才停止（读入的数据不包括分界符），这里的分界符其实就是自定义的字符串\n```\n命令 < 文件 \n1.fd_file = open  O_RDONLY | O_EXCL \n2.fd_in = dup(0)\n3.dup2(fd_file, 0)\n操作\n4.dup2(fd_in, 0)\n5.close(fd_in)\n6.close(fd_file)\n```\n\n## 输出重定向\n1.命令 > 文件\n3.命令 2> 文件  错误重定向 至文件\n3.命令 >> 文件\n4.命令  2>> 文件\n5.命令 >> 文件 2>&1  // 命令 &>> 文件  // &>/dev/null\n\n```\ncommand > file  输出重定向 至file,以覆盖的方式\n1.fd_file = open 有则清空无则创建 O_WRONLY | O_CREAT | O_TRUNC\n2.fd_out = dup(1)\n3.dup2(fd_file,1)\n4.操作\n5.dup2(fd_out,1)\n6.close(fd_out)\n7.close(fd_file)\n```\n\n```\ncommand >>file 输出重定向 至file,以追加的方式 \n1.fd_file = open 有则清空无则创建 O_WRONLY | O_CREAT | O_APPEND\n2.fd_out = dup(1)  //复制标准输出 进行备份\n3.dup2(fd_file,1)  //将标准输出的位置进行替换  \n4.操作\n5.dup2(fd_out,1)   //标准输出进行还原\n6.close(fd_out)\n7.close(fd_file)\n```\n\n```\n命令 >> 文件 2>&1  以追加的方式，把正确输出和错误信息同时保存到同一个文件（file）中。\n1.fd_file = open 有则清空无则创建 O_WRONLY | O_CREAT | O_APPEND\n2.fd_out = dup(1)   fd_err = dup(2) //复制标准输出 进行备份\n3.dup2(fd_file,1)   dup2(fd_file,2) //将标准输出的位置进行替换\n4.操作\n5.dup2(fd_out,1)  dup2(fd_err,2) //标准输出进行还原\n6.close(fd_out) close(fd_err)\n7.close(fd_file)\n```\n\n注意\n1.dup使用的是系统调用IO，如果替换标准输入输出，而使用文件IO的话，会有缓冲区的问题\n2.dup使用的时候，注意原子操作，其他人会操作文件描述符\n\n## 命令 >> 文件 2>&1 的由来\n命令 1>> 文件 2>&1   --->  2>&1   用文件描述符1修改文件描述符2，因此文件描述符2(错误输出)dup2(1,2) --> 错误输出和标准输出都输出至 文件中\n```\n[para dup]$ ls -l aaa &> file       &>  全部输出 至file\n[para dup]$ ls -l aaa >> file 2>&1    先标准输出 输出至file 将1复制给1，共同输出至file\n```\n\n## 内容输出至 /dev/null\n命令 >> /dev/null 2>&1 \n命令 &>> /dev/null\n\n![Lena](/images/fileIO01.png)\n\n# 文件和设备\n\t--> /dev/console - 系统控制台,系统错误信息都输出到这里\n    --> /dev/tty - 进程控制台，访问不同的物理设备。\n    --> /dev/null - 空设备，向所有写这个设备的输出都将被丢弃\n    --> /dev/zero \n\n","slug":"fileIO","published":1,"updated":"2025-03-21T08:19:06.475Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmu000d36or14e6ghtq","content":"<h1 id=\"文件IO简介\"><a href=\"#文件IO简介\" class=\"headerlink\" title=\"文件IO简介\"></a>文件IO简介</h1><p>1.文件IO也称不带缓冲的I&#x2F;O(unbuffered)。不带缓冲指的是每个read, write都调用内核中的一个系统调用。<br>2.遵循POSIX相关标准，任何兼容POSIX标准的操作系统上都支持文件I&#x2F;O。<br>3.读写文件时, 每次操作都会执行相关系统调用, 好处是直接读写实际文件，坏处是频繁的系统调用会增加系统开销。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"原子操作\"><a href=\"#原子操作\" class=\"headerlink\" title=\"原子操作\"></a>原子操作</h1><p>–&gt; 打开文件 + 移动到末尾<br>考虑一个进程，它将数据添加到一个文件尾端。早期的 unix版本并不支持open的O_APPEND选项，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (lseek(fd, 0L, 2) &lt; 0)</span><br><span class=\"line\">\terr_sys(&quot;lseek error&quot;);</span><br><span class=\"line\">if (write(fd, buff, 100) != 100)</span><br><span class=\"line\">\terr_sys(&quot;write error&quot;);</span><br></pre></td></tr></table></figure>\n<p>以上情况，若两个进程A和B对同一文件进行添加操作。每个进程都打开了该文件，但未使用O_APPEND标志。<br>每个进程都有它自己的文件表项，但是共享一个v节点表项。<br>1.假定进程A调用lseek，对于进程A的该文件的当前位置量设置为1500L,<br>2.然后内核切换进程使B进程运行。进程B执行lseek，也将该文件的当前位移量设置为1500L,<br>3.然后B调用write，它将B的该文件的当前位置量增至1600<br>4.因为文件的长度已经增加，所以内核对v节点中的当前长度更新为1600<br>5.然后内核又切换使用进程A恢复运行<br>6.当A调用write时，及从其当前文件位移量(1500)处写数据到文件中<br>这样就覆盖了进程B写到文件中的内容</p>\n<p>这里的问题出在逻辑操作”定位到文件尾处，然后写”使用了两个分开的函数调用。<br>解决的方法是使用这两个操作对于进程而言成为一个原子操作。<br>unix提供了一种方法使这种操作成为原子操作，在打开文件时设置O_APPEND标志。<br>使内核每次对这种文件进行写之前，都将进程的当前位置量设置到该文件的尾端处，<br>于是在每次写之前就不再需要调用lseek</p>\n<p>–&gt; 创建临时文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">char *tmpnam(char *s);</span><br><span class=\"line\">描述 create a name for a temporary file</span><br><span class=\"line\"></span><br><span class=\"line\">FILE *tmpfile(void);</span><br><span class=\"line\">描述 create a temporary file</span><br></pre></td></tr></table></figure>\n<p>以上两个函数都是创建一个临时文件。<br>tmpnam函数 得到一个临时文件名之后需要自己创建文件并打开<br>tmpfile函数 得到并打开一个临时文件(w+), 文件会自动删除当它关闭或者进程结束<br>对比两个函数，tmpfile函数操作原子化。</p>\n<h1 id=\"重定向-dup、dup2\"><a href=\"#重定向-dup、dup2\" class=\"headerlink\" title=\"重定向 dup、dup2\"></a>重定向 dup、dup2</h1><h2 id=\"函数-dup、dup2\"><a href=\"#函数-dup、dup2\" class=\"headerlink\" title=\"函数 dup、dup2\"></a>函数 dup、dup2</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">int dup(int oldfd);  //uses the lowest-numbered unused descriptor for the new descriptor</span><br><span class=\"line\">int dup2(int oldfd, int newfd);  //makes newfd be the copy of oldfd, closing newfd first if necessary</span><br><span class=\"line\"></span><br><span class=\"line\">//关闭 newfd前，注意：</span><br><span class=\"line\">//1.oldfd 是一个无效的文件描述符 调用失败,newfd不会关闭</span><br><span class=\"line\">//2.oldfd 是一个有效的文件描述符 且newfd和oldfd值一样，dup2什么也不做，直接返回newfd</span><br><span class=\"line\">返回值 </span><br><span class=\"line\">On success, these system calls return the new descriptor.  On error, -1 is returned, and errno is set appropriately.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入重定向\"><a href=\"#输入重定向\" class=\"headerlink\" title=\"输入重定向\"></a>输入重定向</h2><p>1.命令 &lt; 文件   将指定文件作为命令的输入设备<br>2.命令  &lt;&lt; 分界符 表示从标准输入设备（键盘）中读入，直到遇到分界符才停止（读入的数据不包括分界符），这里的分界符其实就是自定义的字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令 &lt; 文件 </span><br><span class=\"line\">1.fd_file = open  O_RDONLY | O_EXCL </span><br><span class=\"line\">2.fd_in = dup(0)</span><br><span class=\"line\">3.dup2(fd_file, 0)</span><br><span class=\"line\">操作</span><br><span class=\"line\">4.dup2(fd_in, 0)</span><br><span class=\"line\">5.close(fd_in)</span><br><span class=\"line\">6.close(fd_file)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出重定向\"><a href=\"#输出重定向\" class=\"headerlink\" title=\"输出重定向\"></a>输出重定向</h2><p>1.命令 &gt; 文件<br>3.命令 2&gt; 文件  错误重定向 至文件<br>3.命令 &gt;&gt; 文件<br>4.命令  2&gt;&gt; 文件<br>5.命令 &gt;&gt; 文件 2&gt;&amp;1  &#x2F;&#x2F; 命令 &amp;&gt;&gt; 文件  &#x2F;&#x2F; &amp;&gt;&#x2F;dev&#x2F;null</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command &gt; file  输出重定向 至file,以覆盖的方式</span><br><span class=\"line\">1.fd_file = open 有则清空无则创建 O_WRONLY | O_CREAT | O_TRUNC</span><br><span class=\"line\">2.fd_out = dup(1)</span><br><span class=\"line\">3.dup2(fd_file,1)</span><br><span class=\"line\">4.操作</span><br><span class=\"line\">5.dup2(fd_out,1)</span><br><span class=\"line\">6.close(fd_out)</span><br><span class=\"line\">7.close(fd_file)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command &gt;&gt;file 输出重定向 至file,以追加的方式 </span><br><span class=\"line\">1.fd_file = open 有则清空无则创建 O_WRONLY | O_CREAT | O_APPEND</span><br><span class=\"line\">2.fd_out = dup(1)  //复制标准输出 进行备份</span><br><span class=\"line\">3.dup2(fd_file,1)  //将标准输出的位置进行替换  </span><br><span class=\"line\">4.操作</span><br><span class=\"line\">5.dup2(fd_out,1)   //标准输出进行还原</span><br><span class=\"line\">6.close(fd_out)</span><br><span class=\"line\">7.close(fd_file)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令 &gt;&gt; 文件 2&gt;&amp;1  以追加的方式，把正确输出和错误信息同时保存到同一个文件（file）中。</span><br><span class=\"line\">1.fd_file = open 有则清空无则创建 O_WRONLY | O_CREAT | O_APPEND</span><br><span class=\"line\">2.fd_out = dup(1)   fd_err = dup(2) //复制标准输出 进行备份</span><br><span class=\"line\">3.dup2(fd_file,1)   dup2(fd_file,2) //将标准输出的位置进行替换</span><br><span class=\"line\">4.操作</span><br><span class=\"line\">5.dup2(fd_out,1)  dup2(fd_err,2) //标准输出进行还原</span><br><span class=\"line\">6.close(fd_out) close(fd_err)</span><br><span class=\"line\">7.close(fd_file)</span><br></pre></td></tr></table></figure>\n\n<p>注意<br>1.dup使用的是系统调用IO，如果替换标准输入输出，而使用文件IO的话，会有缓冲区的问题<br>2.dup使用的时候，注意原子操作，其他人会操作文件描述符</p>\n<h2 id=\"命令-文件-2-1-的由来\"><a href=\"#命令-文件-2-1-的由来\" class=\"headerlink\" title=\"命令 &gt;&gt; 文件 2&gt;&amp;1 的由来\"></a>命令 &gt;&gt; 文件 2&gt;&amp;1 的由来</h2><p>命令 1&gt;&gt; 文件 2&gt;&amp;1   —&gt;  2&gt;&amp;1   用文件描述符1修改文件描述符2，因此文件描述符2(错误输出)dup2(1,2) –&gt; 错误输出和标准输出都输出至 文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[para dup]$ ls -l aaa &amp;&gt; file       &amp;&gt;  全部输出 至file</span><br><span class=\"line\">[para dup]$ ls -l aaa &gt;&gt; file 2&gt;&amp;1    先标准输出 输出至file 将1复制给1，共同输出至file</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内容输出至-dev-null\"><a href=\"#内容输出至-dev-null\" class=\"headerlink\" title=\"内容输出至 &#x2F;dev&#x2F;null\"></a>内容输出至 &#x2F;dev&#x2F;null</h2><p>命令 &gt;&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1<br>命令 &amp;&gt;&gt; &#x2F;dev&#x2F;null</p>\n<p><img src=\"/images/fileIO01.png\" alt=\"Lena\"></p>\n<h1 id=\"文件和设备\"><a href=\"#文件和设备\" class=\"headerlink\" title=\"文件和设备\"></a>文件和设备</h1><pre><code>--&gt; /dev/console - 系统控制台,系统错误信息都输出到这里\n--&gt; /dev/tty - 进程控制台，访问不同的物理设备。\n--&gt; /dev/null - 空设备，向所有写这个设备的输出都将被丢弃\n--&gt; /dev/zero \n</code></pre>\n","excerpt":"<h1 id=\"文件IO简介\"><a href=\"#文件IO简介\" class=\"headerlink\" title=\"文件IO简介\"></a>文件IO简介</h1><p>1.文件IO也称不带缓冲的I&#x2F;O(unbuffered)。不带缓冲指的是每个read, write都调用内核中的一个系统调用。<br>2.遵循POSIX相关标准，任何兼容POSIX标准的操作系统上都支持文件I&#x2F;O。<br>3.读写文件时, 每次操作都会执行相关系统调用, 好处是直接读写实际文件，坏处是频繁的系统调用会增加系统开销。</p>","more":"<h1 id=\"原子操作\"><a href=\"#原子操作\" class=\"headerlink\" title=\"原子操作\"></a>原子操作</h1><p>–&gt; 打开文件 + 移动到末尾<br>考虑一个进程，它将数据添加到一个文件尾端。早期的 unix版本并不支持open的O_APPEND选项，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (lseek(fd, 0L, 2) &lt; 0)</span><br><span class=\"line\">\terr_sys(&quot;lseek error&quot;);</span><br><span class=\"line\">if (write(fd, buff, 100) != 100)</span><br><span class=\"line\">\terr_sys(&quot;write error&quot;);</span><br></pre></td></tr></table></figure>\n<p>以上情况，若两个进程A和B对同一文件进行添加操作。每个进程都打开了该文件，但未使用O_APPEND标志。<br>每个进程都有它自己的文件表项，但是共享一个v节点表项。<br>1.假定进程A调用lseek，对于进程A的该文件的当前位置量设置为1500L,<br>2.然后内核切换进程使B进程运行。进程B执行lseek，也将该文件的当前位移量设置为1500L,<br>3.然后B调用write，它将B的该文件的当前位置量增至1600<br>4.因为文件的长度已经增加，所以内核对v节点中的当前长度更新为1600<br>5.然后内核又切换使用进程A恢复运行<br>6.当A调用write时，及从其当前文件位移量(1500)处写数据到文件中<br>这样就覆盖了进程B写到文件中的内容</p>\n<p>这里的问题出在逻辑操作”定位到文件尾处，然后写”使用了两个分开的函数调用。<br>解决的方法是使用这两个操作对于进程而言成为一个原子操作。<br>unix提供了一种方法使这种操作成为原子操作，在打开文件时设置O_APPEND标志。<br>使内核每次对这种文件进行写之前，都将进程的当前位置量设置到该文件的尾端处，<br>于是在每次写之前就不再需要调用lseek</p>\n<p>–&gt; 创建临时文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">char *tmpnam(char *s);</span><br><span class=\"line\">描述 create a name for a temporary file</span><br><span class=\"line\"></span><br><span class=\"line\">FILE *tmpfile(void);</span><br><span class=\"line\">描述 create a temporary file</span><br></pre></td></tr></table></figure>\n<p>以上两个函数都是创建一个临时文件。<br>tmpnam函数 得到一个临时文件名之后需要自己创建文件并打开<br>tmpfile函数 得到并打开一个临时文件(w+), 文件会自动删除当它关闭或者进程结束<br>对比两个函数，tmpfile函数操作原子化。</p>\n<h1 id=\"重定向-dup、dup2\"><a href=\"#重定向-dup、dup2\" class=\"headerlink\" title=\"重定向 dup、dup2\"></a>重定向 dup、dup2</h1><h2 id=\"函数-dup、dup2\"><a href=\"#函数-dup、dup2\" class=\"headerlink\" title=\"函数 dup、dup2\"></a>函数 dup、dup2</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">int dup(int oldfd);  //uses the lowest-numbered unused descriptor for the new descriptor</span><br><span class=\"line\">int dup2(int oldfd, int newfd);  //makes newfd be the copy of oldfd, closing newfd first if necessary</span><br><span class=\"line\"></span><br><span class=\"line\">//关闭 newfd前，注意：</span><br><span class=\"line\">//1.oldfd 是一个无效的文件描述符 调用失败,newfd不会关闭</span><br><span class=\"line\">//2.oldfd 是一个有效的文件描述符 且newfd和oldfd值一样，dup2什么也不做，直接返回newfd</span><br><span class=\"line\">返回值 </span><br><span class=\"line\">On success, these system calls return the new descriptor.  On error, -1 is returned, and errno is set appropriately.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入重定向\"><a href=\"#输入重定向\" class=\"headerlink\" title=\"输入重定向\"></a>输入重定向</h2><p>1.命令 &lt; 文件   将指定文件作为命令的输入设备<br>2.命令  &lt;&lt; 分界符 表示从标准输入设备（键盘）中读入，直到遇到分界符才停止（读入的数据不包括分界符），这里的分界符其实就是自定义的字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令 &lt; 文件 </span><br><span class=\"line\">1.fd_file = open  O_RDONLY | O_EXCL </span><br><span class=\"line\">2.fd_in = dup(0)</span><br><span class=\"line\">3.dup2(fd_file, 0)</span><br><span class=\"line\">操作</span><br><span class=\"line\">4.dup2(fd_in, 0)</span><br><span class=\"line\">5.close(fd_in)</span><br><span class=\"line\">6.close(fd_file)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出重定向\"><a href=\"#输出重定向\" class=\"headerlink\" title=\"输出重定向\"></a>输出重定向</h2><p>1.命令 &gt; 文件<br>3.命令 2&gt; 文件  错误重定向 至文件<br>3.命令 &gt;&gt; 文件<br>4.命令  2&gt;&gt; 文件<br>5.命令 &gt;&gt; 文件 2&gt;&amp;1  &#x2F;&#x2F; 命令 &amp;&gt;&gt; 文件  &#x2F;&#x2F; &amp;&gt;&#x2F;dev&#x2F;null</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command &gt; file  输出重定向 至file,以覆盖的方式</span><br><span class=\"line\">1.fd_file = open 有则清空无则创建 O_WRONLY | O_CREAT | O_TRUNC</span><br><span class=\"line\">2.fd_out = dup(1)</span><br><span class=\"line\">3.dup2(fd_file,1)</span><br><span class=\"line\">4.操作</span><br><span class=\"line\">5.dup2(fd_out,1)</span><br><span class=\"line\">6.close(fd_out)</span><br><span class=\"line\">7.close(fd_file)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command &gt;&gt;file 输出重定向 至file,以追加的方式 </span><br><span class=\"line\">1.fd_file = open 有则清空无则创建 O_WRONLY | O_CREAT | O_APPEND</span><br><span class=\"line\">2.fd_out = dup(1)  //复制标准输出 进行备份</span><br><span class=\"line\">3.dup2(fd_file,1)  //将标准输出的位置进行替换  </span><br><span class=\"line\">4.操作</span><br><span class=\"line\">5.dup2(fd_out,1)   //标准输出进行还原</span><br><span class=\"line\">6.close(fd_out)</span><br><span class=\"line\">7.close(fd_file)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令 &gt;&gt; 文件 2&gt;&amp;1  以追加的方式，把正确输出和错误信息同时保存到同一个文件（file）中。</span><br><span class=\"line\">1.fd_file = open 有则清空无则创建 O_WRONLY | O_CREAT | O_APPEND</span><br><span class=\"line\">2.fd_out = dup(1)   fd_err = dup(2) //复制标准输出 进行备份</span><br><span class=\"line\">3.dup2(fd_file,1)   dup2(fd_file,2) //将标准输出的位置进行替换</span><br><span class=\"line\">4.操作</span><br><span class=\"line\">5.dup2(fd_out,1)  dup2(fd_err,2) //标准输出进行还原</span><br><span class=\"line\">6.close(fd_out) close(fd_err)</span><br><span class=\"line\">7.close(fd_file)</span><br></pre></td></tr></table></figure>\n\n<p>注意<br>1.dup使用的是系统调用IO，如果替换标准输入输出，而使用文件IO的话，会有缓冲区的问题<br>2.dup使用的时候，注意原子操作，其他人会操作文件描述符</p>\n<h2 id=\"命令-文件-2-1-的由来\"><a href=\"#命令-文件-2-1-的由来\" class=\"headerlink\" title=\"命令 &gt;&gt; 文件 2&gt;&amp;1 的由来\"></a>命令 &gt;&gt; 文件 2&gt;&amp;1 的由来</h2><p>命令 1&gt;&gt; 文件 2&gt;&amp;1   —&gt;  2&gt;&amp;1   用文件描述符1修改文件描述符2，因此文件描述符2(错误输出)dup2(1,2) –&gt; 错误输出和标准输出都输出至 文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[para dup]$ ls -l aaa &amp;&gt; file       &amp;&gt;  全部输出 至file</span><br><span class=\"line\">[para dup]$ ls -l aaa &gt;&gt; file 2&gt;&amp;1    先标准输出 输出至file 将1复制给1，共同输出至file</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内容输出至-dev-null\"><a href=\"#内容输出至-dev-null\" class=\"headerlink\" title=\"内容输出至 &#x2F;dev&#x2F;null\"></a>内容输出至 &#x2F;dev&#x2F;null</h2><p>命令 &gt;&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1<br>命令 &amp;&gt;&gt; &#x2F;dev&#x2F;null</p>\n<p><img src=\"/images/fileIO01.png\" alt=\"Lena\"></p>\n<h1 id=\"文件和设备\"><a href=\"#文件和设备\" class=\"headerlink\" title=\"文件和设备\"></a>文件和设备</h1><pre><code>--&gt; /dev/console - 系统控制台,系统错误信息都输出到这里\n--&gt; /dev/tty - 进程控制台，访问不同的物理设备。\n--&gt; /dev/null - 空设备，向所有写这个设备的输出都将被丢弃\n--&gt; /dev/zero \n</code></pre>"},{"title":"fileno","date":"2020-09-24T11:33:36.000Z","_content":"\n# 文件描述符\n\n## 文件描述符的描述\n```\na  file descriptor, a small, nonnegative integer for use in \nsubsequent system calls (read(2), write(2), lseek(2), fcntl(2), etc.)  \n\n --from man 2.6.3\n```\n关键词:\nnonnegative integer  非负整数\nuse in system calls     系统调用使用\n\n当打开或者创建一个新的文件时，内核向进程返回一个文件描述符\n用此文件描述符就能读写文件\nlinux一切皆文件，拿到文件描述符，就拿到了linux的钥匙\n<!--more-->\n\n## 标准文件描述符\n标准输出文件描述符、标准输入文件描述符、标准错误文件描述符\n```\n/* Standard file descriptors.  */\n#define STDIN_FILENO    0       /* Standard input.  */\n#define STDOUT_FILENO   1       /* Standard output.  */\n#define STDERR_FILENO   2       /* Standard error output.  */\n\n---from <unistd.h>\n```\n\n## 文件描述符的限制 \n使用ulimit -n 进行文件描述符设置当前进程\n```\n[para ~]$ ulimit -a\ncore file size          (blocks, -c) 0\ndata seg size           (kbytes, -d) unlimited\nscheduling priority             (-e) 0\nfile size               (blocks, -f) unlimited\npending signals                 (-i) 7271\nmax locked memory       (kbytes, -l) 64\nmax memory size         (kbytes, -m) unlimited\nopen files                      (-n) 65535           --> 文件描述符限制 65535个\npipe size            (512 bytes, -p) 8\nPOSIX message queues     (bytes, -q) 819200\nreal-time priority              (-r) 0\nstack size              (kbytes, -s) 8192\ncpu time               (seconds, -t) unlimited\nmax user processes              (-u) 4096\nvirtual memory          (kbytes, -v) unlimited\nfile locks                      (-x) unlimited\n```\n\n设置永久生效最大文件描述符限制\n```\n修改 /etc/security/limits.conf\n\n#End of file\nroot soft nofile 65535\nroot hard nofile 65535\npara soft nofile 1024\npara hard nofile 1024\n* soft nofile 65535\n* hard nofile 65535\n\n[para ~]$ ulimit -n\n1024\n```\n\n## 文件描述符唯一性\n进程PCB中维护一个文件描述符表，该表的索引值从0开始\n每个进程都有自己的PCB块，当然也有属于自己的文件描述符表\n![Alt text](/images/fileno/fileno0.png)\n\n此图由unix环境高级编程书籍而来，网上说  linux系统只使用i节点，而不使用v节点 ，知道方法再细研究此问题。\n\n(1)进程拿到文件描述符fd --> 通过文件描述符表拿到对应文件描述符指针\n(2)通过指针找到文件表的偏移量，再通过文件偏移找到当前文件指针的位置\n(3)在通过i节点信息去文件系统进行具体操作\n\n## 进程结构图\n![Lena](/images/fileno/fileno1.png)\n\n","source":"_posts/fileno.md","raw":"---\ntitle: fileno\ndate: 2020-09-24 19:33:36\ntags: fileno\n---\n\n# 文件描述符\n\n## 文件描述符的描述\n```\na  file descriptor, a small, nonnegative integer for use in \nsubsequent system calls (read(2), write(2), lseek(2), fcntl(2), etc.)  \n\n --from man 2.6.3\n```\n关键词:\nnonnegative integer  非负整数\nuse in system calls     系统调用使用\n\n当打开或者创建一个新的文件时，内核向进程返回一个文件描述符\n用此文件描述符就能读写文件\nlinux一切皆文件，拿到文件描述符，就拿到了linux的钥匙\n<!--more-->\n\n## 标准文件描述符\n标准输出文件描述符、标准输入文件描述符、标准错误文件描述符\n```\n/* Standard file descriptors.  */\n#define STDIN_FILENO    0       /* Standard input.  */\n#define STDOUT_FILENO   1       /* Standard output.  */\n#define STDERR_FILENO   2       /* Standard error output.  */\n\n---from <unistd.h>\n```\n\n## 文件描述符的限制 \n使用ulimit -n 进行文件描述符设置当前进程\n```\n[para ~]$ ulimit -a\ncore file size          (blocks, -c) 0\ndata seg size           (kbytes, -d) unlimited\nscheduling priority             (-e) 0\nfile size               (blocks, -f) unlimited\npending signals                 (-i) 7271\nmax locked memory       (kbytes, -l) 64\nmax memory size         (kbytes, -m) unlimited\nopen files                      (-n) 65535           --> 文件描述符限制 65535个\npipe size            (512 bytes, -p) 8\nPOSIX message queues     (bytes, -q) 819200\nreal-time priority              (-r) 0\nstack size              (kbytes, -s) 8192\ncpu time               (seconds, -t) unlimited\nmax user processes              (-u) 4096\nvirtual memory          (kbytes, -v) unlimited\nfile locks                      (-x) unlimited\n```\n\n设置永久生效最大文件描述符限制\n```\n修改 /etc/security/limits.conf\n\n#End of file\nroot soft nofile 65535\nroot hard nofile 65535\npara soft nofile 1024\npara hard nofile 1024\n* soft nofile 65535\n* hard nofile 65535\n\n[para ~]$ ulimit -n\n1024\n```\n\n## 文件描述符唯一性\n进程PCB中维护一个文件描述符表，该表的索引值从0开始\n每个进程都有自己的PCB块，当然也有属于自己的文件描述符表\n![Alt text](/images/fileno/fileno0.png)\n\n此图由unix环境高级编程书籍而来，网上说  linux系统只使用i节点，而不使用v节点 ，知道方法再细研究此问题。\n\n(1)进程拿到文件描述符fd --> 通过文件描述符表拿到对应文件描述符指针\n(2)通过指针找到文件表的偏移量，再通过文件偏移找到当前文件指针的位置\n(3)在通过i节点信息去文件系统进行具体操作\n\n## 进程结构图\n![Lena](/images/fileno/fileno1.png)\n\n","slug":"fileno","published":1,"updated":"2025-03-21T08:19:06.475Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmv000e36orhjxtb47d","content":"<h1 id=\"文件描述符\"><a href=\"#文件描述符\" class=\"headerlink\" title=\"文件描述符\"></a>文件描述符</h1><h2 id=\"文件描述符的描述\"><a href=\"#文件描述符的描述\" class=\"headerlink\" title=\"文件描述符的描述\"></a>文件描述符的描述</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a  file descriptor, a small, nonnegative integer for use in </span><br><span class=\"line\">subsequent system calls (read(2), write(2), lseek(2), fcntl(2), etc.)  </span><br><span class=\"line\"></span><br><span class=\"line\"> --from man 2.6.3</span><br></pre></td></tr></table></figure>\n<p>关键词:<br>nonnegative integer  非负整数<br>use in system calls     系统调用使用</p>\n<p>当打开或者创建一个新的文件时，内核向进程返回一个文件描述符<br>用此文件描述符就能读写文件<br>linux一切皆文件，拿到文件描述符，就拿到了linux的钥匙</p>\n<span id=\"more\"></span>\n\n<h2 id=\"标准文件描述符\"><a href=\"#标准文件描述符\" class=\"headerlink\" title=\"标准文件描述符\"></a>标准文件描述符</h2><p>标准输出文件描述符、标准输入文件描述符、标准错误文件描述符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Standard file descriptors.  */</span><br><span class=\"line\">#define STDIN_FILENO    0       /* Standard input.  */</span><br><span class=\"line\">#define STDOUT_FILENO   1       /* Standard output.  */</span><br><span class=\"line\">#define STDERR_FILENO   2       /* Standard error output.  */</span><br><span class=\"line\"></span><br><span class=\"line\">---from &lt;unistd.h&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件描述符的限制\"><a href=\"#文件描述符的限制\" class=\"headerlink\" title=\"文件描述符的限制\"></a>文件描述符的限制</h2><p>使用ulimit -n 进行文件描述符设置当前进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[para ~]$ ulimit -a</span><br><span class=\"line\">core file size          (blocks, -c) 0</span><br><span class=\"line\">data seg size           (kbytes, -d) unlimited</span><br><span class=\"line\">scheduling priority             (-e) 0</span><br><span class=\"line\">file size               (blocks, -f) unlimited</span><br><span class=\"line\">pending signals                 (-i) 7271</span><br><span class=\"line\">max locked memory       (kbytes, -l) 64</span><br><span class=\"line\">max memory size         (kbytes, -m) unlimited</span><br><span class=\"line\">open files                      (-n) 65535           --&gt; 文件描述符限制 65535个</span><br><span class=\"line\">pipe size            (512 bytes, -p) 8</span><br><span class=\"line\">POSIX message queues     (bytes, -q) 819200</span><br><span class=\"line\">real-time priority              (-r) 0</span><br><span class=\"line\">stack size              (kbytes, -s) 8192</span><br><span class=\"line\">cpu time               (seconds, -t) unlimited</span><br><span class=\"line\">max user processes              (-u) 4096</span><br><span class=\"line\">virtual memory          (kbytes, -v) unlimited</span><br><span class=\"line\">file locks                      (-x) unlimited</span><br></pre></td></tr></table></figure>\n\n<p>设置永久生效最大文件描述符限制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改 /etc/security/limits.conf</span><br><span class=\"line\"></span><br><span class=\"line\">#End of file</span><br><span class=\"line\">root soft nofile 65535</span><br><span class=\"line\">root hard nofile 65535</span><br><span class=\"line\">para soft nofile 1024</span><br><span class=\"line\">para hard nofile 1024</span><br><span class=\"line\">* soft nofile 65535</span><br><span class=\"line\">* hard nofile 65535</span><br><span class=\"line\"></span><br><span class=\"line\">[para ~]$ ulimit -n</span><br><span class=\"line\">1024</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件描述符唯一性\"><a href=\"#文件描述符唯一性\" class=\"headerlink\" title=\"文件描述符唯一性\"></a>文件描述符唯一性</h2><p>进程PCB中维护一个文件描述符表，该表的索引值从0开始<br>每个进程都有自己的PCB块，当然也有属于自己的文件描述符表<br><img src=\"/images/fileno/fileno0.png\" alt=\"Alt text\"></p>\n<p>此图由unix环境高级编程书籍而来，网上说  linux系统只使用i节点，而不使用v节点 ，知道方法再细研究此问题。</p>\n<p>(1)进程拿到文件描述符fd –&gt; 通过文件描述符表拿到对应文件描述符指针<br>(2)通过指针找到文件表的偏移量，再通过文件偏移找到当前文件指针的位置<br>(3)在通过i节点信息去文件系统进行具体操作</p>\n<h2 id=\"进程结构图\"><a href=\"#进程结构图\" class=\"headerlink\" title=\"进程结构图\"></a>进程结构图</h2><p><img src=\"/images/fileno/fileno1.png\" alt=\"Lena\"></p>\n","excerpt":"<h1 id=\"文件描述符\"><a href=\"#文件描述符\" class=\"headerlink\" title=\"文件描述符\"></a>文件描述符</h1><h2 id=\"文件描述符的描述\"><a href=\"#文件描述符的描述\" class=\"headerlink\" title=\"文件描述符的描述\"></a>文件描述符的描述</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a  file descriptor, a small, nonnegative integer for use in </span><br><span class=\"line\">subsequent system calls (read(2), write(2), lseek(2), fcntl(2), etc.)  </span><br><span class=\"line\"></span><br><span class=\"line\"> --from man 2.6.3</span><br></pre></td></tr></table></figure>\n<p>关键词:<br>nonnegative integer  非负整数<br>use in system calls     系统调用使用</p>\n<p>当打开或者创建一个新的文件时，内核向进程返回一个文件描述符<br>用此文件描述符就能读写文件<br>linux一切皆文件，拿到文件描述符，就拿到了linux的钥匙</p>","more":"<h2 id=\"标准文件描述符\"><a href=\"#标准文件描述符\" class=\"headerlink\" title=\"标准文件描述符\"></a>标准文件描述符</h2><p>标准输出文件描述符、标准输入文件描述符、标准错误文件描述符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Standard file descriptors.  */</span><br><span class=\"line\">#define STDIN_FILENO    0       /* Standard input.  */</span><br><span class=\"line\">#define STDOUT_FILENO   1       /* Standard output.  */</span><br><span class=\"line\">#define STDERR_FILENO   2       /* Standard error output.  */</span><br><span class=\"line\"></span><br><span class=\"line\">---from &lt;unistd.h&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件描述符的限制\"><a href=\"#文件描述符的限制\" class=\"headerlink\" title=\"文件描述符的限制\"></a>文件描述符的限制</h2><p>使用ulimit -n 进行文件描述符设置当前进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[para ~]$ ulimit -a</span><br><span class=\"line\">core file size          (blocks, -c) 0</span><br><span class=\"line\">data seg size           (kbytes, -d) unlimited</span><br><span class=\"line\">scheduling priority             (-e) 0</span><br><span class=\"line\">file size               (blocks, -f) unlimited</span><br><span class=\"line\">pending signals                 (-i) 7271</span><br><span class=\"line\">max locked memory       (kbytes, -l) 64</span><br><span class=\"line\">max memory size         (kbytes, -m) unlimited</span><br><span class=\"line\">open files                      (-n) 65535           --&gt; 文件描述符限制 65535个</span><br><span class=\"line\">pipe size            (512 bytes, -p) 8</span><br><span class=\"line\">POSIX message queues     (bytes, -q) 819200</span><br><span class=\"line\">real-time priority              (-r) 0</span><br><span class=\"line\">stack size              (kbytes, -s) 8192</span><br><span class=\"line\">cpu time               (seconds, -t) unlimited</span><br><span class=\"line\">max user processes              (-u) 4096</span><br><span class=\"line\">virtual memory          (kbytes, -v) unlimited</span><br><span class=\"line\">file locks                      (-x) unlimited</span><br></pre></td></tr></table></figure>\n\n<p>设置永久生效最大文件描述符限制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改 /etc/security/limits.conf</span><br><span class=\"line\"></span><br><span class=\"line\">#End of file</span><br><span class=\"line\">root soft nofile 65535</span><br><span class=\"line\">root hard nofile 65535</span><br><span class=\"line\">para soft nofile 1024</span><br><span class=\"line\">para hard nofile 1024</span><br><span class=\"line\">* soft nofile 65535</span><br><span class=\"line\">* hard nofile 65535</span><br><span class=\"line\"></span><br><span class=\"line\">[para ~]$ ulimit -n</span><br><span class=\"line\">1024</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件描述符唯一性\"><a href=\"#文件描述符唯一性\" class=\"headerlink\" title=\"文件描述符唯一性\"></a>文件描述符唯一性</h2><p>进程PCB中维护一个文件描述符表，该表的索引值从0开始<br>每个进程都有自己的PCB块，当然也有属于自己的文件描述符表<br><img src=\"/images/fileno/fileno0.png\" alt=\"Alt text\"></p>\n<p>此图由unix环境高级编程书籍而来，网上说  linux系统只使用i节点，而不使用v节点 ，知道方法再细研究此问题。</p>\n<p>(1)进程拿到文件描述符fd –&gt; 通过文件描述符表拿到对应文件描述符指针<br>(2)通过指针找到文件表的偏移量，再通过文件偏移找到当前文件指针的位置<br>(3)在通过i节点信息去文件系统进行具体操作</p>\n<h2 id=\"进程结构图\"><a href=\"#进程结构图\" class=\"headerlink\" title=\"进程结构图\"></a>进程结构图</h2><p><img src=\"/images/fileno/fileno1.png\" alt=\"Lena\"></p>"},{"title":"IO相关函数 func_io","date":"2020-09-30T06:51:53.000Z","_content":"# 标准IO和系统IO的效率\n1.本文所讲的系统IO为 UNIX环境下的系统IO函数\n2.标准IO 创建了一个缓冲区，当刷新缓冲区的后，在调用系统IO进行IO操作。\n3.标准IO兼容了各种版本的系统IO\n4.标准IO的 缓冲区(行缓冲、全缓冲，不带缓冲)\n5.当且仅当标准输入和标准输出并不涉及交互作用设备时，他们才是全缓冲\n<!--more-->\n\n# 系统调用函数 \n-->open,close,lseek,read,write\n\n## open\n```\nint open(const char *pathname, int flags);\nint open(const char *pathname, int flags, mode_t mode);\n\n头文件：\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\n参数\nconst char *pathname  要打开或创建的文件的名字\nint flags\n    O_RDONLY 只读\n    O_WRONLY 只写\n    O_RDWR 可读可写\n可选\n    O_APPEND  每次写时都加到文件的尾端\n    O_CREAT    如此文件不存在则创建它，需与第三参数mode,说明新文件的存取全蝎\n        umask --> ~umask | mode -->权限\n    O_EXCL  如果同时指定了O_CREAT, 而文件已经存在，则报错，可测试一个文件是否存在，\n            如果不存在则创建此文件成文一个原子操作\n    O_TRUNC 如果文件存在，而且为只读或只写成功打开，则将其长度截短为0\n    O_NOCTTY 如果pathname指的是终端设备，则不将此设备分配为此进程的控制终端\n    O_NONBLOCK 如果pathname指的是一个FIFO、一个块特殊文件或一个字符特殊文件，则此选项为此\n            文件的本次打开操作和后续的I/O操作设置非阻塞方式\n\n返回值\n```\nfopen 和 open 对比\n```\nFILE *fopen(const char *path, const char *mode);\nint open(const char *pathname, int flags);\nr    只读 | 文件首                                        -->O_RDONLY  \nr+   读写 | 文件首                                        -->O_RDWR\nw    有则清空，无则创建 | 只写 | 文件首                     -->O_WRONLY | O_CREAT | O_TRUNC\nw+   读写 有则清空，无则创建 | 文件首                       -->O_RDWR | O_CREAT | O_TRUNC\na    有则清空，无则创建 | 追加 | 读写 | 写在文件尾           -->O_RDWR | O_CREAT | O_TRUNC | O_APPEND\na+   读写  有则清空，无则创建 读在文件头、写在文件尾          -->O_RDWR | O_CREAT | O_TRUNC\n```\n\n## close\n```\n#include <unistd.h>\nint close(int fd);\n```\n## read\n```\n#include <unistd.h>\nssize_t read(int fd, void *buf, size_t count);\n\n返回值：\nOn success, the number of bytes read is returned (zero indicates end of file), and the file position is  advanced  by this  number.\n```\n## write\n```\n#include <unistd.h>\nssize_t write(int fd, const void *buf, size_t count);\n\n返回值：\nOn success, the number of bytes written is returned (zero indicates nothing was written).  On error, -1 is returned, and errno is set appropriately.\n```\n## lseek\n```\n#include <sys/types.h>\n#include <unistd.h>\noff_t lseek(int fd, off_t offset, int whence);\n参数：\nint whence SEEK_SET | SEEK_CUR | SEEK_END\n返回值：\nreturns the resulting offset location as measured in bytes from the beginning of the file.  On error, the  value  (off_t) -1  is  returned  and errno is set to indicate the error.\n```\n\n# 标准IO操作函数\n--> fopen、fclose、\n--> getc、putc、fgetc、fputc、getchar\n--> gets、puts、fgets、fputs\n-->fread、fwrite\n--> ftell、fseek、rewind\n\n## fopen 、fclose\n```\n#include <stdio.h>\nFILE *fopen(const char *path, const char *mode);\nr    只读 | 文件首\nr+   读写 | 文件首\nw    有则清空，无则创建 | 只写 | 文件首\nw+   读写 有则清空，无则创建 | 文件首\na    有则清空，无则创建 | 追加 | 读写 | 写在文件尾\na+   读写  有则清空，无则创建 读在文件头、写在文件尾\n\n#include <stdio.h>\nint fclose(FILE *fp);\n```\n## fgetc、getc、getchar、fputc、putc、putchar\n```\n#include <stdio.h>\nint fgetc(FILE *stream);\nint getc(FILE *stream);\nint getchar(void);   ---> equivalent to getc(stdin)\ngetc 与 fgetc 区别\ngetc 宏定义  --> _IO_getc\n返回值 return the character read as an unsigned char cast to an int or EOF on end of file or error.\n-----------------------------------------------------\nint fputc(int c, FILE *stream);\nint putc(int c, FILE *stream);\nint putchar(int c);\n返回值 return the character written as an unsigned char cast to an int or EOF on error.\n```\n\n## fgets、gets、 fput、puts\n```\n#include <stdio.h>\nchar *fgets(char *s, int size, FILE *stream);  读取size-1大小的字符长度 第size 用'\\0'补充\nchar *gets(char *s);  有漏洞，慎用\n返回值 return s on success, and NULL on error or when end of file occurs while no characters have been read.\n-------------------------------------------\nint fputs(const char *s, FILE *stream);  writes the string s to stream, without its terminating null byte ('\\0').将字符串的'\\0'去掉输出\nint puts(const char *s);  writes the string s and a trailing newline to stdout.\n返回值 return a nonnegative number on success, or EOF on error\n```\n\n## fread、fwrite\n```\n#include <stdio.h>\nsize_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);\nsize_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);\n返回值 返回读取的次数\nreturn the number of items successfully read or written\nIf an error occurs, or the end-of-file is reached, the return value is  a  short  item  count\n```\n\n## ftell、fseek、rewind\n```\n#include <stdio.h>\nint fseek(FILE *stream, long offset, int whence);  移动位置\nlong ftell(FILE *stream);    返回文件指针位置\nvoid rewind(FILE *stream);   equivalent (void) fseek(stream, 0L, SEEK_SET)\n```\n\n## fseeko、ftello\n```\n#include <stdio.h>\nint fseeko(FILE *stream, off_t offset, int whence); 移动位置\noff_t ftello(FILE *stream); 返回文件指针位置\n\nOn many architectures both off_t and long are 32-bit types, but compilation with\n#define _FILE_OFFSET_BITS 64\nmakefile:\nCFLAGS+=-D_FILE_OFFSET_BITS=64\n\nCONFORMING TO\n       SUSv2, POSIX.1-2001.\n\nfseek(stream,0,SEEK_END);       \n```\n\n# 附加函数\n## getline\n```\n#define _GNU_SOURCE\n#include <stdio.h>\nssize_t getline(char **lineptr, size_t *n, FILE *stream);\nmakefile\nCFLAGS+=-D_GNU_SOURCE\n```\n\n## 临时文件\n```\n#include <stdio.h>\nchar *tmpnam(char *s);\nFILE *tmpfile(void);\n```\n\n## fflush\n```\n#include <stdio.h>\nint fflush(FILE *stream);\n返回值\nUpon successful completion 0 is returned.  Otherwise, EOF is returned and  errno  is  set  to  indicate  the\nerror.\n```","source":"_posts/func-io.md","raw":"---\ntitle: IO相关函数 func_io \ndate: 2020-09-30 14:51:53\ntags:\n---\n# 标准IO和系统IO的效率\n1.本文所讲的系统IO为 UNIX环境下的系统IO函数\n2.标准IO 创建了一个缓冲区，当刷新缓冲区的后，在调用系统IO进行IO操作。\n3.标准IO兼容了各种版本的系统IO\n4.标准IO的 缓冲区(行缓冲、全缓冲，不带缓冲)\n5.当且仅当标准输入和标准输出并不涉及交互作用设备时，他们才是全缓冲\n<!--more-->\n\n# 系统调用函数 \n-->open,close,lseek,read,write\n\n## open\n```\nint open(const char *pathname, int flags);\nint open(const char *pathname, int flags, mode_t mode);\n\n头文件：\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\n参数\nconst char *pathname  要打开或创建的文件的名字\nint flags\n    O_RDONLY 只读\n    O_WRONLY 只写\n    O_RDWR 可读可写\n可选\n    O_APPEND  每次写时都加到文件的尾端\n    O_CREAT    如此文件不存在则创建它，需与第三参数mode,说明新文件的存取全蝎\n        umask --> ~umask | mode -->权限\n    O_EXCL  如果同时指定了O_CREAT, 而文件已经存在，则报错，可测试一个文件是否存在，\n            如果不存在则创建此文件成文一个原子操作\n    O_TRUNC 如果文件存在，而且为只读或只写成功打开，则将其长度截短为0\n    O_NOCTTY 如果pathname指的是终端设备，则不将此设备分配为此进程的控制终端\n    O_NONBLOCK 如果pathname指的是一个FIFO、一个块特殊文件或一个字符特殊文件，则此选项为此\n            文件的本次打开操作和后续的I/O操作设置非阻塞方式\n\n返回值\n```\nfopen 和 open 对比\n```\nFILE *fopen(const char *path, const char *mode);\nint open(const char *pathname, int flags);\nr    只读 | 文件首                                        -->O_RDONLY  \nr+   读写 | 文件首                                        -->O_RDWR\nw    有则清空，无则创建 | 只写 | 文件首                     -->O_WRONLY | O_CREAT | O_TRUNC\nw+   读写 有则清空，无则创建 | 文件首                       -->O_RDWR | O_CREAT | O_TRUNC\na    有则清空，无则创建 | 追加 | 读写 | 写在文件尾           -->O_RDWR | O_CREAT | O_TRUNC | O_APPEND\na+   读写  有则清空，无则创建 读在文件头、写在文件尾          -->O_RDWR | O_CREAT | O_TRUNC\n```\n\n## close\n```\n#include <unistd.h>\nint close(int fd);\n```\n## read\n```\n#include <unistd.h>\nssize_t read(int fd, void *buf, size_t count);\n\n返回值：\nOn success, the number of bytes read is returned (zero indicates end of file), and the file position is  advanced  by this  number.\n```\n## write\n```\n#include <unistd.h>\nssize_t write(int fd, const void *buf, size_t count);\n\n返回值：\nOn success, the number of bytes written is returned (zero indicates nothing was written).  On error, -1 is returned, and errno is set appropriately.\n```\n## lseek\n```\n#include <sys/types.h>\n#include <unistd.h>\noff_t lseek(int fd, off_t offset, int whence);\n参数：\nint whence SEEK_SET | SEEK_CUR | SEEK_END\n返回值：\nreturns the resulting offset location as measured in bytes from the beginning of the file.  On error, the  value  (off_t) -1  is  returned  and errno is set to indicate the error.\n```\n\n# 标准IO操作函数\n--> fopen、fclose、\n--> getc、putc、fgetc、fputc、getchar\n--> gets、puts、fgets、fputs\n-->fread、fwrite\n--> ftell、fseek、rewind\n\n## fopen 、fclose\n```\n#include <stdio.h>\nFILE *fopen(const char *path, const char *mode);\nr    只读 | 文件首\nr+   读写 | 文件首\nw    有则清空，无则创建 | 只写 | 文件首\nw+   读写 有则清空，无则创建 | 文件首\na    有则清空，无则创建 | 追加 | 读写 | 写在文件尾\na+   读写  有则清空，无则创建 读在文件头、写在文件尾\n\n#include <stdio.h>\nint fclose(FILE *fp);\n```\n## fgetc、getc、getchar、fputc、putc、putchar\n```\n#include <stdio.h>\nint fgetc(FILE *stream);\nint getc(FILE *stream);\nint getchar(void);   ---> equivalent to getc(stdin)\ngetc 与 fgetc 区别\ngetc 宏定义  --> _IO_getc\n返回值 return the character read as an unsigned char cast to an int or EOF on end of file or error.\n-----------------------------------------------------\nint fputc(int c, FILE *stream);\nint putc(int c, FILE *stream);\nint putchar(int c);\n返回值 return the character written as an unsigned char cast to an int or EOF on error.\n```\n\n## fgets、gets、 fput、puts\n```\n#include <stdio.h>\nchar *fgets(char *s, int size, FILE *stream);  读取size-1大小的字符长度 第size 用'\\0'补充\nchar *gets(char *s);  有漏洞，慎用\n返回值 return s on success, and NULL on error or when end of file occurs while no characters have been read.\n-------------------------------------------\nint fputs(const char *s, FILE *stream);  writes the string s to stream, without its terminating null byte ('\\0').将字符串的'\\0'去掉输出\nint puts(const char *s);  writes the string s and a trailing newline to stdout.\n返回值 return a nonnegative number on success, or EOF on error\n```\n\n## fread、fwrite\n```\n#include <stdio.h>\nsize_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);\nsize_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);\n返回值 返回读取的次数\nreturn the number of items successfully read or written\nIf an error occurs, or the end-of-file is reached, the return value is  a  short  item  count\n```\n\n## ftell、fseek、rewind\n```\n#include <stdio.h>\nint fseek(FILE *stream, long offset, int whence);  移动位置\nlong ftell(FILE *stream);    返回文件指针位置\nvoid rewind(FILE *stream);   equivalent (void) fseek(stream, 0L, SEEK_SET)\n```\n\n## fseeko、ftello\n```\n#include <stdio.h>\nint fseeko(FILE *stream, off_t offset, int whence); 移动位置\noff_t ftello(FILE *stream); 返回文件指针位置\n\nOn many architectures both off_t and long are 32-bit types, but compilation with\n#define _FILE_OFFSET_BITS 64\nmakefile:\nCFLAGS+=-D_FILE_OFFSET_BITS=64\n\nCONFORMING TO\n       SUSv2, POSIX.1-2001.\n\nfseek(stream,0,SEEK_END);       \n```\n\n# 附加函数\n## getline\n```\n#define _GNU_SOURCE\n#include <stdio.h>\nssize_t getline(char **lineptr, size_t *n, FILE *stream);\nmakefile\nCFLAGS+=-D_GNU_SOURCE\n```\n\n## 临时文件\n```\n#include <stdio.h>\nchar *tmpnam(char *s);\nFILE *tmpfile(void);\n```\n\n## fflush\n```\n#include <stdio.h>\nint fflush(FILE *stream);\n返回值\nUpon successful completion 0 is returned.  Otherwise, EOF is returned and  errno  is  set  to  indicate  the\nerror.\n```","slug":"func-io","published":1,"updated":"2025-03-21T08:19:06.482Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmv000f36or3tap7pue","content":"<h1 id=\"标准IO和系统IO的效率\"><a href=\"#标准IO和系统IO的效率\" class=\"headerlink\" title=\"标准IO和系统IO的效率\"></a>标准IO和系统IO的效率</h1><p>1.本文所讲的系统IO为 UNIX环境下的系统IO函数<br>2.标准IO 创建了一个缓冲区，当刷新缓冲区的后，在调用系统IO进行IO操作。<br>3.标准IO兼容了各种版本的系统IO<br>4.标准IO的 缓冲区(行缓冲、全缓冲，不带缓冲)<br>5.当且仅当标准输入和标准输出并不涉及交互作用设备时，他们才是全缓冲</p>\n<span id=\"more\"></span>\n\n<h1 id=\"系统调用函数\"><a href=\"#系统调用函数\" class=\"headerlink\" title=\"系统调用函数\"></a>系统调用函数</h1><p>–&gt;open,close,lseek,read,write</p>\n<h2 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open\"></a>open</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int open(const char *pathname, int flags);</span><br><span class=\"line\">int open(const char *pathname, int flags, mode_t mode);</span><br><span class=\"line\"></span><br><span class=\"line\">头文件：</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/stat.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">参数</span><br><span class=\"line\">const char *pathname  要打开或创建的文件的名字</span><br><span class=\"line\">int flags</span><br><span class=\"line\">    O_RDONLY 只读</span><br><span class=\"line\">    O_WRONLY 只写</span><br><span class=\"line\">    O_RDWR 可读可写</span><br><span class=\"line\">可选</span><br><span class=\"line\">    O_APPEND  每次写时都加到文件的尾端</span><br><span class=\"line\">    O_CREAT    如此文件不存在则创建它，需与第三参数mode,说明新文件的存取全蝎</span><br><span class=\"line\">        umask --&gt; ~umask | mode --&gt;权限</span><br><span class=\"line\">    O_EXCL  如果同时指定了O_CREAT, 而文件已经存在，则报错，可测试一个文件是否存在，</span><br><span class=\"line\">            如果不存在则创建此文件成文一个原子操作</span><br><span class=\"line\">    O_TRUNC 如果文件存在，而且为只读或只写成功打开，则将其长度截短为0</span><br><span class=\"line\">    O_NOCTTY 如果pathname指的是终端设备，则不将此设备分配为此进程的控制终端</span><br><span class=\"line\">    O_NONBLOCK 如果pathname指的是一个FIFO、一个块特殊文件或一个字符特殊文件，则此选项为此</span><br><span class=\"line\">            文件的本次打开操作和后续的I/O操作设置非阻塞方式</span><br><span class=\"line\"></span><br><span class=\"line\">返回值</span><br></pre></td></tr></table></figure>\n<p>fopen 和 open 对比</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE *fopen(const char *path, const char *mode);</span><br><span class=\"line\">int open(const char *pathname, int flags);</span><br><span class=\"line\">r    只读 | 文件首                                        --&gt;O_RDONLY  </span><br><span class=\"line\">r+   读写 | 文件首                                        --&gt;O_RDWR</span><br><span class=\"line\">w    有则清空，无则创建 | 只写 | 文件首                     --&gt;O_WRONLY | O_CREAT | O_TRUNC</span><br><span class=\"line\">w+   读写 有则清空，无则创建 | 文件首                       --&gt;O_RDWR | O_CREAT | O_TRUNC</span><br><span class=\"line\">a    有则清空，无则创建 | 追加 | 读写 | 写在文件尾           --&gt;O_RDWR | O_CREAT | O_TRUNC | O_APPEND</span><br><span class=\"line\">a+   读写  有则清空，无则创建 读在文件头、写在文件尾          --&gt;O_RDWR | O_CREAT | O_TRUNC</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close\"></a>close</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">int close(int fd);</span><br></pre></td></tr></table></figure>\n<h2 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read\"></a>read</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">ssize_t read(int fd, void *buf, size_t count);</span><br><span class=\"line\"></span><br><span class=\"line\">返回值：</span><br><span class=\"line\">On success, the number of bytes read is returned (zero indicates end of file), and the file position is  advanced  by this  number.</span><br></pre></td></tr></table></figure>\n<h2 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write\"></a>write</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">ssize_t write(int fd, const void *buf, size_t count);</span><br><span class=\"line\"></span><br><span class=\"line\">返回值：</span><br><span class=\"line\">On success, the number of bytes written is returned (zero indicates nothing was written).  On error, -1 is returned, and errno is set appropriately.</span><br></pre></td></tr></table></figure>\n<h2 id=\"lseek\"><a href=\"#lseek\" class=\"headerlink\" title=\"lseek\"></a>lseek</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">off_t lseek(int fd, off_t offset, int whence);</span><br><span class=\"line\">参数：</span><br><span class=\"line\">int whence SEEK_SET | SEEK_CUR | SEEK_END</span><br><span class=\"line\">返回值：</span><br><span class=\"line\">returns the resulting offset location as measured in bytes from the beginning of the file.  On error, the  value  (off_t) -1  is  returned  and errno is set to indicate the error.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"标准IO操作函数\"><a href=\"#标准IO操作函数\" class=\"headerlink\" title=\"标准IO操作函数\"></a>标准IO操作函数</h1><p>–&gt; fopen、fclose、<br>–&gt; getc、putc、fgetc、fputc、getchar<br>–&gt; gets、puts、fgets、fputs<br>–&gt;fread、fwrite<br>–&gt; ftell、fseek、rewind</p>\n<h2 id=\"fopen-、fclose\"><a href=\"#fopen-、fclose\" class=\"headerlink\" title=\"fopen 、fclose\"></a>fopen 、fclose</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">FILE *fopen(const char *path, const char *mode);</span><br><span class=\"line\">r    只读 | 文件首</span><br><span class=\"line\">r+   读写 | 文件首</span><br><span class=\"line\">w    有则清空，无则创建 | 只写 | 文件首</span><br><span class=\"line\">w+   读写 有则清空，无则创建 | 文件首</span><br><span class=\"line\">a    有则清空，无则创建 | 追加 | 读写 | 写在文件尾</span><br><span class=\"line\">a+   读写  有则清空，无则创建 读在文件头、写在文件尾</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int fclose(FILE *fp);</span><br></pre></td></tr></table></figure>\n<h2 id=\"fgetc、getc、getchar、fputc、putc、putchar\"><a href=\"#fgetc、getc、getchar、fputc、putc、putchar\" class=\"headerlink\" title=\"fgetc、getc、getchar、fputc、putc、putchar\"></a>fgetc、getc、getchar、fputc、putc、putchar</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int fgetc(FILE *stream);</span><br><span class=\"line\">int getc(FILE *stream);</span><br><span class=\"line\">int getchar(void);   ---&gt; equivalent to getc(stdin)</span><br><span class=\"line\">getc 与 fgetc 区别</span><br><span class=\"line\">getc 宏定义  --&gt; _IO_getc</span><br><span class=\"line\">返回值 return the character read as an unsigned char cast to an int or EOF on end of file or error.</span><br><span class=\"line\">-----------------------------------------------------</span><br><span class=\"line\">int fputc(int c, FILE *stream);</span><br><span class=\"line\">int putc(int c, FILE *stream);</span><br><span class=\"line\">int putchar(int c);</span><br><span class=\"line\">返回值 return the character written as an unsigned char cast to an int or EOF on error.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fgets、gets、-fput、puts\"><a href=\"#fgets、gets、-fput、puts\" class=\"headerlink\" title=\"fgets、gets、 fput、puts\"></a>fgets、gets、 fput、puts</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">char *fgets(char *s, int size, FILE *stream);  读取size-1大小的字符长度 第size 用&#x27;\\0&#x27;补充</span><br><span class=\"line\">char *gets(char *s);  有漏洞，慎用</span><br><span class=\"line\">返回值 return s on success, and NULL on error or when end of file occurs while no characters have been read.</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">int fputs(const char *s, FILE *stream);  writes the string s to stream, without its terminating null byte (&#x27;\\0&#x27;).将字符串的&#x27;\\0&#x27;去掉输出</span><br><span class=\"line\">int puts(const char *s);  writes the string s and a trailing newline to stdout.</span><br><span class=\"line\">返回值 return a nonnegative number on success, or EOF on error</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fread、fwrite\"><a href=\"#fread、fwrite\" class=\"headerlink\" title=\"fread、fwrite\"></a>fread、fwrite</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);</span><br><span class=\"line\">size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);</span><br><span class=\"line\">返回值 返回读取的次数</span><br><span class=\"line\">return the number of items successfully read or written</span><br><span class=\"line\">If an error occurs, or the end-of-file is reached, the return value is  a  short  item  count</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ftell、fseek、rewind\"><a href=\"#ftell、fseek、rewind\" class=\"headerlink\" title=\"ftell、fseek、rewind\"></a>ftell、fseek、rewind</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int fseek(FILE *stream, long offset, int whence);  移动位置</span><br><span class=\"line\">long ftell(FILE *stream);    返回文件指针位置</span><br><span class=\"line\">void rewind(FILE *stream);   equivalent (void) fseek(stream, 0L, SEEK_SET)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fseeko、ftello\"><a href=\"#fseeko、ftello\" class=\"headerlink\" title=\"fseeko、ftello\"></a>fseeko、ftello</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int fseeko(FILE *stream, off_t offset, int whence); 移动位置</span><br><span class=\"line\">off_t ftello(FILE *stream); 返回文件指针位置</span><br><span class=\"line\"></span><br><span class=\"line\">On many architectures both off_t and long are 32-bit types, but compilation with</span><br><span class=\"line\">#define _FILE_OFFSET_BITS 64</span><br><span class=\"line\">makefile:</span><br><span class=\"line\">CFLAGS+=-D_FILE_OFFSET_BITS=64</span><br><span class=\"line\"></span><br><span class=\"line\">CONFORMING TO</span><br><span class=\"line\">       SUSv2, POSIX.1-2001.</span><br><span class=\"line\"></span><br><span class=\"line\">fseek(stream,0,SEEK_END);       </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"附加函数\"><a href=\"#附加函数\" class=\"headerlink\" title=\"附加函数\"></a>附加函数</h1><h2 id=\"getline\"><a href=\"#getline\" class=\"headerlink\" title=\"getline\"></a>getline</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">ssize_t getline(char **lineptr, size_t *n, FILE *stream);</span><br><span class=\"line\">makefile</span><br><span class=\"line\">CFLAGS+=-D_GNU_SOURCE</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"临时文件\"><a href=\"#临时文件\" class=\"headerlink\" title=\"临时文件\"></a>临时文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">char *tmpnam(char *s);</span><br><span class=\"line\">FILE *tmpfile(void);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fflush\"><a href=\"#fflush\" class=\"headerlink\" title=\"fflush\"></a>fflush</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int fflush(FILE *stream);</span><br><span class=\"line\">返回值</span><br><span class=\"line\">Upon successful completion 0 is returned.  Otherwise, EOF is returned and  errno  is  set  to  indicate  the</span><br><span class=\"line\">error.</span><br></pre></td></tr></table></figure>","excerpt":"<h1 id=\"标准IO和系统IO的效率\"><a href=\"#标准IO和系统IO的效率\" class=\"headerlink\" title=\"标准IO和系统IO的效率\"></a>标准IO和系统IO的效率</h1><p>1.本文所讲的系统IO为 UNIX环境下的系统IO函数<br>2.标准IO 创建了一个缓冲区，当刷新缓冲区的后，在调用系统IO进行IO操作。<br>3.标准IO兼容了各种版本的系统IO<br>4.标准IO的 缓冲区(行缓冲、全缓冲，不带缓冲)<br>5.当且仅当标准输入和标准输出并不涉及交互作用设备时，他们才是全缓冲</p>","more":"<h1 id=\"系统调用函数\"><a href=\"#系统调用函数\" class=\"headerlink\" title=\"系统调用函数\"></a>系统调用函数</h1><p>–&gt;open,close,lseek,read,write</p>\n<h2 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open\"></a>open</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int open(const char *pathname, int flags);</span><br><span class=\"line\">int open(const char *pathname, int flags, mode_t mode);</span><br><span class=\"line\"></span><br><span class=\"line\">头文件：</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/stat.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">参数</span><br><span class=\"line\">const char *pathname  要打开或创建的文件的名字</span><br><span class=\"line\">int flags</span><br><span class=\"line\">    O_RDONLY 只读</span><br><span class=\"line\">    O_WRONLY 只写</span><br><span class=\"line\">    O_RDWR 可读可写</span><br><span class=\"line\">可选</span><br><span class=\"line\">    O_APPEND  每次写时都加到文件的尾端</span><br><span class=\"line\">    O_CREAT    如此文件不存在则创建它，需与第三参数mode,说明新文件的存取全蝎</span><br><span class=\"line\">        umask --&gt; ~umask | mode --&gt;权限</span><br><span class=\"line\">    O_EXCL  如果同时指定了O_CREAT, 而文件已经存在，则报错，可测试一个文件是否存在，</span><br><span class=\"line\">            如果不存在则创建此文件成文一个原子操作</span><br><span class=\"line\">    O_TRUNC 如果文件存在，而且为只读或只写成功打开，则将其长度截短为0</span><br><span class=\"line\">    O_NOCTTY 如果pathname指的是终端设备，则不将此设备分配为此进程的控制终端</span><br><span class=\"line\">    O_NONBLOCK 如果pathname指的是一个FIFO、一个块特殊文件或一个字符特殊文件，则此选项为此</span><br><span class=\"line\">            文件的本次打开操作和后续的I/O操作设置非阻塞方式</span><br><span class=\"line\"></span><br><span class=\"line\">返回值</span><br></pre></td></tr></table></figure>\n<p>fopen 和 open 对比</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE *fopen(const char *path, const char *mode);</span><br><span class=\"line\">int open(const char *pathname, int flags);</span><br><span class=\"line\">r    只读 | 文件首                                        --&gt;O_RDONLY  </span><br><span class=\"line\">r+   读写 | 文件首                                        --&gt;O_RDWR</span><br><span class=\"line\">w    有则清空，无则创建 | 只写 | 文件首                     --&gt;O_WRONLY | O_CREAT | O_TRUNC</span><br><span class=\"line\">w+   读写 有则清空，无则创建 | 文件首                       --&gt;O_RDWR | O_CREAT | O_TRUNC</span><br><span class=\"line\">a    有则清空，无则创建 | 追加 | 读写 | 写在文件尾           --&gt;O_RDWR | O_CREAT | O_TRUNC | O_APPEND</span><br><span class=\"line\">a+   读写  有则清空，无则创建 读在文件头、写在文件尾          --&gt;O_RDWR | O_CREAT | O_TRUNC</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close\"></a>close</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">int close(int fd);</span><br></pre></td></tr></table></figure>\n<h2 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read\"></a>read</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">ssize_t read(int fd, void *buf, size_t count);</span><br><span class=\"line\"></span><br><span class=\"line\">返回值：</span><br><span class=\"line\">On success, the number of bytes read is returned (zero indicates end of file), and the file position is  advanced  by this  number.</span><br></pre></td></tr></table></figure>\n<h2 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write\"></a>write</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">ssize_t write(int fd, const void *buf, size_t count);</span><br><span class=\"line\"></span><br><span class=\"line\">返回值：</span><br><span class=\"line\">On success, the number of bytes written is returned (zero indicates nothing was written).  On error, -1 is returned, and errno is set appropriately.</span><br></pre></td></tr></table></figure>\n<h2 id=\"lseek\"><a href=\"#lseek\" class=\"headerlink\" title=\"lseek\"></a>lseek</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">off_t lseek(int fd, off_t offset, int whence);</span><br><span class=\"line\">参数：</span><br><span class=\"line\">int whence SEEK_SET | SEEK_CUR | SEEK_END</span><br><span class=\"line\">返回值：</span><br><span class=\"line\">returns the resulting offset location as measured in bytes from the beginning of the file.  On error, the  value  (off_t) -1  is  returned  and errno is set to indicate the error.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"标准IO操作函数\"><a href=\"#标准IO操作函数\" class=\"headerlink\" title=\"标准IO操作函数\"></a>标准IO操作函数</h1><p>–&gt; fopen、fclose、<br>–&gt; getc、putc、fgetc、fputc、getchar<br>–&gt; gets、puts、fgets、fputs<br>–&gt;fread、fwrite<br>–&gt; ftell、fseek、rewind</p>\n<h2 id=\"fopen-、fclose\"><a href=\"#fopen-、fclose\" class=\"headerlink\" title=\"fopen 、fclose\"></a>fopen 、fclose</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">FILE *fopen(const char *path, const char *mode);</span><br><span class=\"line\">r    只读 | 文件首</span><br><span class=\"line\">r+   读写 | 文件首</span><br><span class=\"line\">w    有则清空，无则创建 | 只写 | 文件首</span><br><span class=\"line\">w+   读写 有则清空，无则创建 | 文件首</span><br><span class=\"line\">a    有则清空，无则创建 | 追加 | 读写 | 写在文件尾</span><br><span class=\"line\">a+   读写  有则清空，无则创建 读在文件头、写在文件尾</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int fclose(FILE *fp);</span><br></pre></td></tr></table></figure>\n<h2 id=\"fgetc、getc、getchar、fputc、putc、putchar\"><a href=\"#fgetc、getc、getchar、fputc、putc、putchar\" class=\"headerlink\" title=\"fgetc、getc、getchar、fputc、putc、putchar\"></a>fgetc、getc、getchar、fputc、putc、putchar</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int fgetc(FILE *stream);</span><br><span class=\"line\">int getc(FILE *stream);</span><br><span class=\"line\">int getchar(void);   ---&gt; equivalent to getc(stdin)</span><br><span class=\"line\">getc 与 fgetc 区别</span><br><span class=\"line\">getc 宏定义  --&gt; _IO_getc</span><br><span class=\"line\">返回值 return the character read as an unsigned char cast to an int or EOF on end of file or error.</span><br><span class=\"line\">-----------------------------------------------------</span><br><span class=\"line\">int fputc(int c, FILE *stream);</span><br><span class=\"line\">int putc(int c, FILE *stream);</span><br><span class=\"line\">int putchar(int c);</span><br><span class=\"line\">返回值 return the character written as an unsigned char cast to an int or EOF on error.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fgets、gets、-fput、puts\"><a href=\"#fgets、gets、-fput、puts\" class=\"headerlink\" title=\"fgets、gets、 fput、puts\"></a>fgets、gets、 fput、puts</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">char *fgets(char *s, int size, FILE *stream);  读取size-1大小的字符长度 第size 用&#x27;\\0&#x27;补充</span><br><span class=\"line\">char *gets(char *s);  有漏洞，慎用</span><br><span class=\"line\">返回值 return s on success, and NULL on error or when end of file occurs while no characters have been read.</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">int fputs(const char *s, FILE *stream);  writes the string s to stream, without its terminating null byte (&#x27;\\0&#x27;).将字符串的&#x27;\\0&#x27;去掉输出</span><br><span class=\"line\">int puts(const char *s);  writes the string s and a trailing newline to stdout.</span><br><span class=\"line\">返回值 return a nonnegative number on success, or EOF on error</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fread、fwrite\"><a href=\"#fread、fwrite\" class=\"headerlink\" title=\"fread、fwrite\"></a>fread、fwrite</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);</span><br><span class=\"line\">size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);</span><br><span class=\"line\">返回值 返回读取的次数</span><br><span class=\"line\">return the number of items successfully read or written</span><br><span class=\"line\">If an error occurs, or the end-of-file is reached, the return value is  a  short  item  count</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ftell、fseek、rewind\"><a href=\"#ftell、fseek、rewind\" class=\"headerlink\" title=\"ftell、fseek、rewind\"></a>ftell、fseek、rewind</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int fseek(FILE *stream, long offset, int whence);  移动位置</span><br><span class=\"line\">long ftell(FILE *stream);    返回文件指针位置</span><br><span class=\"line\">void rewind(FILE *stream);   equivalent (void) fseek(stream, 0L, SEEK_SET)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fseeko、ftello\"><a href=\"#fseeko、ftello\" class=\"headerlink\" title=\"fseeko、ftello\"></a>fseeko、ftello</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int fseeko(FILE *stream, off_t offset, int whence); 移动位置</span><br><span class=\"line\">off_t ftello(FILE *stream); 返回文件指针位置</span><br><span class=\"line\"></span><br><span class=\"line\">On many architectures both off_t and long are 32-bit types, but compilation with</span><br><span class=\"line\">#define _FILE_OFFSET_BITS 64</span><br><span class=\"line\">makefile:</span><br><span class=\"line\">CFLAGS+=-D_FILE_OFFSET_BITS=64</span><br><span class=\"line\"></span><br><span class=\"line\">CONFORMING TO</span><br><span class=\"line\">       SUSv2, POSIX.1-2001.</span><br><span class=\"line\"></span><br><span class=\"line\">fseek(stream,0,SEEK_END);       </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"附加函数\"><a href=\"#附加函数\" class=\"headerlink\" title=\"附加函数\"></a>附加函数</h1><h2 id=\"getline\"><a href=\"#getline\" class=\"headerlink\" title=\"getline\"></a>getline</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">ssize_t getline(char **lineptr, size_t *n, FILE *stream);</span><br><span class=\"line\">makefile</span><br><span class=\"line\">CFLAGS+=-D_GNU_SOURCE</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"临时文件\"><a href=\"#临时文件\" class=\"headerlink\" title=\"临时文件\"></a>临时文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">char *tmpnam(char *s);</span><br><span class=\"line\">FILE *tmpfile(void);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fflush\"><a href=\"#fflush\" class=\"headerlink\" title=\"fflush\"></a>fflush</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int fflush(FILE *stream);</span><br><span class=\"line\">返回值</span><br><span class=\"line\">Upon successful completion 0 is returned.  Otherwise, EOF is returned and  errno  is  set  to  indicate  the</span><br><span class=\"line\">error.</span><br></pre></td></tr></table></figure>"},{"title":"running_page","date":"2025-01-06T03:45:38.000Z","_content":"\n# running_page\n[My running_page](https://zhoupara.github.io/running_page/)\n\n捣鼓了一下，把keep的跑步数据接入到running_page项目中，展示在 GitHub Pages.\n\n<!--more-->\n# 使用 Data Sync 同步 GitHub Pages\n#TODO\n\n# running_page 抓取运动数据到本地\n#TODO\n\n# running_page 数据分析\n#TODO\n\n# 将 running_page链接 添加到主页\n#TODO\n\n\n","source":"_posts/running-page.md","raw":"---\ntitle: running_page\ndate: 2025-01-06 11:45:38\ntags:\n---\n\n# running_page\n[My running_page](https://zhoupara.github.io/running_page/)\n\n捣鼓了一下，把keep的跑步数据接入到running_page项目中，展示在 GitHub Pages.\n\n<!--more-->\n# 使用 Data Sync 同步 GitHub Pages\n#TODO\n\n# running_page 抓取运动数据到本地\n#TODO\n\n# running_page 数据分析\n#TODO\n\n# 将 running_page链接 添加到主页\n#TODO\n\n\n","slug":"running-page","published":1,"updated":"2025-03-21T08:19:06.482Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmv000h36or9l9ta4t4","content":"<h1 id=\"running-page\"><a href=\"#running-page\" class=\"headerlink\" title=\"running_page\"></a>running_page</h1><p><a href=\"https://zhoupara.github.io/running_page/\">My running_page</a></p>\n<p>捣鼓了一下，把keep的跑步数据接入到running_page项目中，展示在 GitHub Pages.</p>\n<span id=\"more\"></span>\n<h1 id=\"使用-Data-Sync-同步-GitHub-Pages\"><a href=\"#使用-Data-Sync-同步-GitHub-Pages\" class=\"headerlink\" title=\"使用 Data Sync 同步 GitHub Pages\"></a>使用 Data Sync 同步 GitHub Pages</h1><p>#TODO</p>\n<h1 id=\"running-page-抓取运动数据到本地\"><a href=\"#running-page-抓取运动数据到本地\" class=\"headerlink\" title=\"running_page 抓取运动数据到本地\"></a>running_page 抓取运动数据到本地</h1><p>#TODO</p>\n<h1 id=\"running-page-数据分析\"><a href=\"#running-page-数据分析\" class=\"headerlink\" title=\"running_page 数据分析\"></a>running_page 数据分析</h1><p>#TODO</p>\n<h1 id=\"将-running-page链接-添加到主页\"><a href=\"#将-running-page链接-添加到主页\" class=\"headerlink\" title=\"将 running_page链接 添加到主页\"></a>将 running_page链接 添加到主页</h1><p>#TODO</p>\n","excerpt":"<h1 id=\"running-page\"><a href=\"#running-page\" class=\"headerlink\" title=\"running_page\"></a>running_page</h1><p><a href=\"https://zhoupara.github.io/running_page/\">My running_page</a></p>\n<p>捣鼓了一下，把keep的跑步数据接入到running_page项目中，展示在 GitHub Pages.</p>","more":"<h1 id=\"使用-Data-Sync-同步-GitHub-Pages\"><a href=\"#使用-Data-Sync-同步-GitHub-Pages\" class=\"headerlink\" title=\"使用 Data Sync 同步 GitHub Pages\"></a>使用 Data Sync 同步 GitHub Pages</h1><p>#TODO</p>\n<h1 id=\"running-page-抓取运动数据到本地\"><a href=\"#running-page-抓取运动数据到本地\" class=\"headerlink\" title=\"running_page 抓取运动数据到本地\"></a>running_page 抓取运动数据到本地</h1><p>#TODO</p>\n<h1 id=\"running-page-数据分析\"><a href=\"#running-page-数据分析\" class=\"headerlink\" title=\"running_page 数据分析\"></a>running_page 数据分析</h1><p>#TODO</p>\n<h1 id=\"将-running-page链接-添加到主页\"><a href=\"#将-running-page链接-添加到主页\" class=\"headerlink\" title=\"将 running_page链接 添加到主页\"></a>将 running_page链接 添加到主页</h1><p>#TODO</p>"},{"title":"标准IO--stdIO","date":"2020-10-12T02:51:14.000Z","_content":"# 标准IO简介\n1.标准I/O是ANSI C建立的一个标准I/O模型, 是一个标准函数包和stdio.h头文件中的定义, 不依赖系统内核, 所以移植性强。\n2.遵循ANSI C相关标准。需要开发环境中有标准I/O库, 标准I/O就可以使用。\n3.在文件IO的基础上封装文件描述符并维护了缓冲机制。\n4.fopen函数 打开一个文件, 并且建立了一个流缓冲(用户空间，读写模式下建立两个缓冲区), 还创建了一个包含文件和缓冲区相关信息的FILE结构体, 从而先读写缓冲区, 必要时候再访问实际文件。\n\n<!--more-->\n\n注：\n（Linux 中使用的是glibc, 它是标准C库的超集。不仅包含ANSI C中定义的函数, 还包括POSIX标准中定义的函数。因此, Linux 下既可以使用标准I/O, 也可以使用文件I/O）\n\n# 标准IO的格式化\n```\n#include <stdio.h>\n--标准输出\nint printf(const char *format, ...);\t-->标准输出\nint fprintf(FILE *stream, const char *format, ...);  --> 指定的流\nint sprintf(char *str, const char *format, ...);\t--> 指定str(缓冲区)\n\n--标准输出\nint scanf(const char *format, ...);\nint fscanf(FILE *stream, const char *format, ...);\nint sscanf(const char *str, const char *format, ...);\n```\n格式字符串的一般形式：\n[标志][输出最小宽度][.精度][长度]类型\n其中方括号[]为可选项\n## 类型\n类型字符用以表示输出数据的类型\n格式字符\t意义\nd\t\t以十进制形式输出带符号整数(正数不输出符号)\no\t\t以八进制形式输出无符号整数(不输出前缀0)\nx,X\t\t以十六进制形式输出无符号整数(不输出前缀Ox)\nu\t\t以十进制形式输出无符号整数\nf\t\t以小数形式输出单、双精度实数\ne,E\t\t以指数形式输出单、双精度实数\ng,G\t\t以%f或%e中较短的输出宽度输出单、双精度实数\nc\t\t输出单个字符\ns\t\t输出字符串\n\n## 标志\n标志字符为'-'、'+'、'#'和空格\n标志 \t意义\n'-'\t\t结果左对齐，右边填空格\n'+'\t\t输出符号(正号或负号)\n空格\t\t输出值为正时冠以空格，为负时冠以负号\n'#'\t\t对c、s、d、u类无影响；\n\t\t对o类，在输出时加前缀o；\n\t\t对x类，在输出时加前缀0x；\n\t\t对e、g、f 类当结果有小数时才给出小数点。\n\n## 输出最小宽度\n用十进制整数来表示输出的最少位数。若实际位数多于定义的宽度，则按实际位数输出，若实际位数少于定义的宽度则补以空格或0。\n\n## 精度\n精度格式符以“.”开头，后跟十进制整数。本项的意义是：如果输出数字，则表示小数的位数；如果输出的是字符，则表示输出字符的个数；若实际位数大于所定义的精度数，则截去超过的部分。\n\n## 长度\n长度格式符为h、l两种，h表示按短整型量输出，l表示按长整型量输出。\n\n# 行缓冲和全缓冲(fflush) --> 面试题\n```\n#include <stdio.h>\n#include <unistd.h>\n\nint main(int argc, char *argv[])\n{\n    pid_t pid;\n\n    printf(\"BEGIN\");  \n    \n    //fflush(stdout);  --> 注释后 printf(\"BEGIN\"); 打印了两遍\n    pid = fork();\n    if(pid < 0)\n        return -1; \n\n    if(pid == 0) //子\n        printf(\"[%d]: child\\n\", getpid());\n    else\n        printf(\"[%d]: parent\\n\", getpid());\n\n    printf(\"END\");\n    wait();\n\n    return 0;\n}\n执行 结果，BEGIN 打印两次 END 打印两次\n[para fork_fflush]$ ./fork_fflush \nBEGIN[19918]: parent\nBEGIN[19919]: child\nENDEND[para fork_fflush]$ \n```\n标准I/O提供了三种类型的缓存：\n缓存可由标准IO例程自动的刷新，或者可以调用函数fflush刷新一个流\n## 全缓存\n1)当填满标准IO缓存后才进行实际IO操作\n2)对于驻在磁盘上的文件通常是有标准IO库实施全缓存的\n\n## 行缓存\n1)当在输入和输出中遇到新行符时, 标准IO库执行实际IO操作\n2)当流涉及一个终端时(例如标准输入和标准输出), 典型地使用行缓存\n3)标准IO库用来收集每一行的缓存的长度固定的, 只要填满了缓存, 即使没有写一个新行符, 也进行IO操作\n4)任何时候只要通过标准输入输出库要求从一个不带缓存的流, 或者一个行缓存的流得到输入数据, 那么就会造成刷新所有行缓存输出流\n\n## 不带缓存\n1)标准IO库不对字符进行缓存, 如果用标准IO函数写若干字符到不带缓存的流中, \n2)则相当于用write系统调用函数将这些字符写至相关的打开文件上\n3)标准出错流stderr通常是不带缓存的。\n\n## ANSI C要求下列缓存特征:\n1)当且仅当标准输入和标准输出并不涉及交互作用设备时，他们才是全缓存的\n2)标准出错绝不会是全缓存的\n\n## 程序问题\n因为printf是标准IO函数，默认行缓冲(遇到换行符才会刷新流)\n若没有进行缓冲区刷新(fflush), \"BEGIN\"在fork之前，并没有输出到标准输出, \n在fork的时候, 会将缓冲区的内容也复制了一份，\n等程序到了 printf(\"[%d]: child\\n\", getpid()) 从缓冲区将\"BEGIN\"和\"[%d]: child\\n\"进行一起打印输出\n\n## fflush 刷新缓存区\n```\n#include <stdio.h>\nint fflush(FILE *stream);\n返回值\nUpon successful completion 0 is returned.  Otherwise, EOF is returned and  errno  is  set  to  indicate  the\nerror.\n```\n\n# 文件描述符和FILE结构体指针转换\n```\n#include <stdio.h>\nFILE *fdopen(int fd, const char *mode);\n```","source":"_posts/stdIO.md","raw":"---\ntitle: 标准IO--stdIO \ndate: 2020-10-12 10:51:14\ntags:\n---\n# 标准IO简介\n1.标准I/O是ANSI C建立的一个标准I/O模型, 是一个标准函数包和stdio.h头文件中的定义, 不依赖系统内核, 所以移植性强。\n2.遵循ANSI C相关标准。需要开发环境中有标准I/O库, 标准I/O就可以使用。\n3.在文件IO的基础上封装文件描述符并维护了缓冲机制。\n4.fopen函数 打开一个文件, 并且建立了一个流缓冲(用户空间，读写模式下建立两个缓冲区), 还创建了一个包含文件和缓冲区相关信息的FILE结构体, 从而先读写缓冲区, 必要时候再访问实际文件。\n\n<!--more-->\n\n注：\n（Linux 中使用的是glibc, 它是标准C库的超集。不仅包含ANSI C中定义的函数, 还包括POSIX标准中定义的函数。因此, Linux 下既可以使用标准I/O, 也可以使用文件I/O）\n\n# 标准IO的格式化\n```\n#include <stdio.h>\n--标准输出\nint printf(const char *format, ...);\t-->标准输出\nint fprintf(FILE *stream, const char *format, ...);  --> 指定的流\nint sprintf(char *str, const char *format, ...);\t--> 指定str(缓冲区)\n\n--标准输出\nint scanf(const char *format, ...);\nint fscanf(FILE *stream, const char *format, ...);\nint sscanf(const char *str, const char *format, ...);\n```\n格式字符串的一般形式：\n[标志][输出最小宽度][.精度][长度]类型\n其中方括号[]为可选项\n## 类型\n类型字符用以表示输出数据的类型\n格式字符\t意义\nd\t\t以十进制形式输出带符号整数(正数不输出符号)\no\t\t以八进制形式输出无符号整数(不输出前缀0)\nx,X\t\t以十六进制形式输出无符号整数(不输出前缀Ox)\nu\t\t以十进制形式输出无符号整数\nf\t\t以小数形式输出单、双精度实数\ne,E\t\t以指数形式输出单、双精度实数\ng,G\t\t以%f或%e中较短的输出宽度输出单、双精度实数\nc\t\t输出单个字符\ns\t\t输出字符串\n\n## 标志\n标志字符为'-'、'+'、'#'和空格\n标志 \t意义\n'-'\t\t结果左对齐，右边填空格\n'+'\t\t输出符号(正号或负号)\n空格\t\t输出值为正时冠以空格，为负时冠以负号\n'#'\t\t对c、s、d、u类无影响；\n\t\t对o类，在输出时加前缀o；\n\t\t对x类，在输出时加前缀0x；\n\t\t对e、g、f 类当结果有小数时才给出小数点。\n\n## 输出最小宽度\n用十进制整数来表示输出的最少位数。若实际位数多于定义的宽度，则按实际位数输出，若实际位数少于定义的宽度则补以空格或0。\n\n## 精度\n精度格式符以“.”开头，后跟十进制整数。本项的意义是：如果输出数字，则表示小数的位数；如果输出的是字符，则表示输出字符的个数；若实际位数大于所定义的精度数，则截去超过的部分。\n\n## 长度\n长度格式符为h、l两种，h表示按短整型量输出，l表示按长整型量输出。\n\n# 行缓冲和全缓冲(fflush) --> 面试题\n```\n#include <stdio.h>\n#include <unistd.h>\n\nint main(int argc, char *argv[])\n{\n    pid_t pid;\n\n    printf(\"BEGIN\");  \n    \n    //fflush(stdout);  --> 注释后 printf(\"BEGIN\"); 打印了两遍\n    pid = fork();\n    if(pid < 0)\n        return -1; \n\n    if(pid == 0) //子\n        printf(\"[%d]: child\\n\", getpid());\n    else\n        printf(\"[%d]: parent\\n\", getpid());\n\n    printf(\"END\");\n    wait();\n\n    return 0;\n}\n执行 结果，BEGIN 打印两次 END 打印两次\n[para fork_fflush]$ ./fork_fflush \nBEGIN[19918]: parent\nBEGIN[19919]: child\nENDEND[para fork_fflush]$ \n```\n标准I/O提供了三种类型的缓存：\n缓存可由标准IO例程自动的刷新，或者可以调用函数fflush刷新一个流\n## 全缓存\n1)当填满标准IO缓存后才进行实际IO操作\n2)对于驻在磁盘上的文件通常是有标准IO库实施全缓存的\n\n## 行缓存\n1)当在输入和输出中遇到新行符时, 标准IO库执行实际IO操作\n2)当流涉及一个终端时(例如标准输入和标准输出), 典型地使用行缓存\n3)标准IO库用来收集每一行的缓存的长度固定的, 只要填满了缓存, 即使没有写一个新行符, 也进行IO操作\n4)任何时候只要通过标准输入输出库要求从一个不带缓存的流, 或者一个行缓存的流得到输入数据, 那么就会造成刷新所有行缓存输出流\n\n## 不带缓存\n1)标准IO库不对字符进行缓存, 如果用标准IO函数写若干字符到不带缓存的流中, \n2)则相当于用write系统调用函数将这些字符写至相关的打开文件上\n3)标准出错流stderr通常是不带缓存的。\n\n## ANSI C要求下列缓存特征:\n1)当且仅当标准输入和标准输出并不涉及交互作用设备时，他们才是全缓存的\n2)标准出错绝不会是全缓存的\n\n## 程序问题\n因为printf是标准IO函数，默认行缓冲(遇到换行符才会刷新流)\n若没有进行缓冲区刷新(fflush), \"BEGIN\"在fork之前，并没有输出到标准输出, \n在fork的时候, 会将缓冲区的内容也复制了一份，\n等程序到了 printf(\"[%d]: child\\n\", getpid()) 从缓冲区将\"BEGIN\"和\"[%d]: child\\n\"进行一起打印输出\n\n## fflush 刷新缓存区\n```\n#include <stdio.h>\nint fflush(FILE *stream);\n返回值\nUpon successful completion 0 is returned.  Otherwise, EOF is returned and  errno  is  set  to  indicate  the\nerror.\n```\n\n# 文件描述符和FILE结构体指针转换\n```\n#include <stdio.h>\nFILE *fdopen(int fd, const char *mode);\n```","slug":"stdIO","published":1,"updated":"2025-03-21T08:19:06.483Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmv000i36or798y6rmc","content":"<h1 id=\"标准IO简介\"><a href=\"#标准IO简介\" class=\"headerlink\" title=\"标准IO简介\"></a>标准IO简介</h1><p>1.标准I&#x2F;O是ANSI C建立的一个标准I&#x2F;O模型, 是一个标准函数包和stdio.h头文件中的定义, 不依赖系统内核, 所以移植性强。<br>2.遵循ANSI C相关标准。需要开发环境中有标准I&#x2F;O库, 标准I&#x2F;O就可以使用。<br>3.在文件IO的基础上封装文件描述符并维护了缓冲机制。<br>4.fopen函数 打开一个文件, 并且建立了一个流缓冲(用户空间，读写模式下建立两个缓冲区), 还创建了一个包含文件和缓冲区相关信息的FILE结构体, 从而先读写缓冲区, 必要时候再访问实际文件。</p>\n<span id=\"more\"></span>\n\n<p>注：<br>（Linux 中使用的是glibc, 它是标准C库的超集。不仅包含ANSI C中定义的函数, 还包括POSIX标准中定义的函数。因此, Linux 下既可以使用标准I&#x2F;O, 也可以使用文件I&#x2F;O）</p>\n<h1 id=\"标准IO的格式化\"><a href=\"#标准IO的格式化\" class=\"headerlink\" title=\"标准IO的格式化\"></a>标准IO的格式化</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">--标准输出</span><br><span class=\"line\">int printf(const char *format, ...);\t--&gt;标准输出</span><br><span class=\"line\">int fprintf(FILE *stream, const char *format, ...);  --&gt; 指定的流</span><br><span class=\"line\">int sprintf(char *str, const char *format, ...);\t--&gt; 指定str(缓冲区)</span><br><span class=\"line\"></span><br><span class=\"line\">--标准输出</span><br><span class=\"line\">int scanf(const char *format, ...);</span><br><span class=\"line\">int fscanf(FILE *stream, const char *format, ...);</span><br><span class=\"line\">int sscanf(const char *str, const char *format, ...);</span><br></pre></td></tr></table></figure>\n<p>格式字符串的一般形式：<br>[标志][输出最小宽度][.精度][长度]类型<br>其中方括号[]为可选项</p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><p>类型字符用以表示输出数据的类型<br>格式字符\t意义<br>d\t\t以十进制形式输出带符号整数(正数不输出符号)<br>o\t\t以八进制形式输出无符号整数(不输出前缀0)<br>x,X\t\t以十六进制形式输出无符号整数(不输出前缀Ox)<br>u\t\t以十进制形式输出无符号整数<br>f\t\t以小数形式输出单、双精度实数<br>e,E\t\t以指数形式输出单、双精度实数<br>g,G\t\t以%f或%e中较短的输出宽度输出单、双精度实数<br>c\t\t输出单个字符<br>s\t\t输出字符串</p>\n<h2 id=\"标志\"><a href=\"#标志\" class=\"headerlink\" title=\"标志\"></a>标志</h2><p>标志字符为’-‘、’+’、’#’和空格<br>标志 \t意义<br>‘-‘\t\t结果左对齐，右边填空格<br>‘+’\t\t输出符号(正号或负号)<br>空格\t\t输出值为正时冠以空格，为负时冠以负号<br>‘#’\t\t对c、s、d、u类无影响；<br>        对o类，在输出时加前缀o；<br>        对x类，在输出时加前缀0x；<br>        对e、g、f 类当结果有小数时才给出小数点。</p>\n<h2 id=\"输出最小宽度\"><a href=\"#输出最小宽度\" class=\"headerlink\" title=\"输出最小宽度\"></a>输出最小宽度</h2><p>用十进制整数来表示输出的最少位数。若实际位数多于定义的宽度，则按实际位数输出，若实际位数少于定义的宽度则补以空格或0。</p>\n<h2 id=\"精度\"><a href=\"#精度\" class=\"headerlink\" title=\"精度\"></a>精度</h2><p>精度格式符以“.”开头，后跟十进制整数。本项的意义是：如果输出数字，则表示小数的位数；如果输出的是字符，则表示输出字符的个数；若实际位数大于所定义的精度数，则截去超过的部分。</p>\n<h2 id=\"长度\"><a href=\"#长度\" class=\"headerlink\" title=\"长度\"></a>长度</h2><p>长度格式符为h、l两种，h表示按短整型量输出，l表示按长整型量输出。</p>\n<h1 id=\"行缓冲和全缓冲-fflush-–-面试题\"><a href=\"#行缓冲和全缓冲-fflush-–-面试题\" class=\"headerlink\" title=\"行缓冲和全缓冲(fflush) –&gt; 面试题\"></a>行缓冲和全缓冲(fflush) –&gt; 面试题</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;BEGIN&quot;);  </span><br><span class=\"line\">    </span><br><span class=\"line\">    //fflush(stdout);  --&gt; 注释后 printf(&quot;BEGIN&quot;); 打印了两遍</span><br><span class=\"line\">    pid = fork();</span><br><span class=\"line\">    if(pid &lt; 0)</span><br><span class=\"line\">        return -1; </span><br><span class=\"line\"></span><br><span class=\"line\">    if(pid == 0) //子</span><br><span class=\"line\">        printf(&quot;[%d]: child\\n&quot;, getpid());</span><br><span class=\"line\">    else</span><br><span class=\"line\">        printf(&quot;[%d]: parent\\n&quot;, getpid());</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;END&quot;);</span><br><span class=\"line\">    wait();</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">执行 结果，BEGIN 打印两次 END 打印两次</span><br><span class=\"line\">[para fork_fflush]$ ./fork_fflush </span><br><span class=\"line\">BEGIN[19918]: parent</span><br><span class=\"line\">BEGIN[19919]: child</span><br><span class=\"line\">ENDEND[para fork_fflush]$ </span><br></pre></td></tr></table></figure>\n<p>标准I&#x2F;O提供了三种类型的缓存：<br>缓存可由标准IO例程自动的刷新，或者可以调用函数fflush刷新一个流</p>\n<h2 id=\"全缓存\"><a href=\"#全缓存\" class=\"headerlink\" title=\"全缓存\"></a>全缓存</h2><p>1)当填满标准IO缓存后才进行实际IO操作<br>2)对于驻在磁盘上的文件通常是有标准IO库实施全缓存的</p>\n<h2 id=\"行缓存\"><a href=\"#行缓存\" class=\"headerlink\" title=\"行缓存\"></a>行缓存</h2><p>1)当在输入和输出中遇到新行符时, 标准IO库执行实际IO操作<br>2)当流涉及一个终端时(例如标准输入和标准输出), 典型地使用行缓存<br>3)标准IO库用来收集每一行的缓存的长度固定的, 只要填满了缓存, 即使没有写一个新行符, 也进行IO操作<br>4)任何时候只要通过标准输入输出库要求从一个不带缓存的流, 或者一个行缓存的流得到输入数据, 那么就会造成刷新所有行缓存输出流</p>\n<h2 id=\"不带缓存\"><a href=\"#不带缓存\" class=\"headerlink\" title=\"不带缓存\"></a>不带缓存</h2><p>1)标准IO库不对字符进行缓存, 如果用标准IO函数写若干字符到不带缓存的流中,<br>2)则相当于用write系统调用函数将这些字符写至相关的打开文件上<br>3)标准出错流stderr通常是不带缓存的。</p>\n<h2 id=\"ANSI-C要求下列缓存特征\"><a href=\"#ANSI-C要求下列缓存特征\" class=\"headerlink\" title=\"ANSI C要求下列缓存特征:\"></a>ANSI C要求下列缓存特征:</h2><p>1)当且仅当标准输入和标准输出并不涉及交互作用设备时，他们才是全缓存的<br>2)标准出错绝不会是全缓存的</p>\n<h2 id=\"程序问题\"><a href=\"#程序问题\" class=\"headerlink\" title=\"程序问题\"></a>程序问题</h2><p>因为printf是标准IO函数，默认行缓冲(遇到换行符才会刷新流)<br>若没有进行缓冲区刷新(fflush), “BEGIN”在fork之前，并没有输出到标准输出,<br>在fork的时候, 会将缓冲区的内容也复制了一份，<br>等程序到了 printf(“[%d]: child\\n”, getpid()) 从缓冲区将”BEGIN”和”[%d]: child\\n”进行一起打印输出</p>\n<h2 id=\"fflush-刷新缓存区\"><a href=\"#fflush-刷新缓存区\" class=\"headerlink\" title=\"fflush 刷新缓存区\"></a>fflush 刷新缓存区</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int fflush(FILE *stream);</span><br><span class=\"line\">返回值</span><br><span class=\"line\">Upon successful completion 0 is returned.  Otherwise, EOF is returned and  errno  is  set  to  indicate  the</span><br><span class=\"line\">error.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"文件描述符和FILE结构体指针转换\"><a href=\"#文件描述符和FILE结构体指针转换\" class=\"headerlink\" title=\"文件描述符和FILE结构体指针转换\"></a>文件描述符和FILE结构体指针转换</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">FILE *fdopen(int fd, const char *mode);</span><br></pre></td></tr></table></figure>","excerpt":"<h1 id=\"标准IO简介\"><a href=\"#标准IO简介\" class=\"headerlink\" title=\"标准IO简介\"></a>标准IO简介</h1><p>1.标准I&#x2F;O是ANSI C建立的一个标准I&#x2F;O模型, 是一个标准函数包和stdio.h头文件中的定义, 不依赖系统内核, 所以移植性强。<br>2.遵循ANSI C相关标准。需要开发环境中有标准I&#x2F;O库, 标准I&#x2F;O就可以使用。<br>3.在文件IO的基础上封装文件描述符并维护了缓冲机制。<br>4.fopen函数 打开一个文件, 并且建立了一个流缓冲(用户空间，读写模式下建立两个缓冲区), 还创建了一个包含文件和缓冲区相关信息的FILE结构体, 从而先读写缓冲区, 必要时候再访问实际文件。</p>","more":"<p>注：<br>（Linux 中使用的是glibc, 它是标准C库的超集。不仅包含ANSI C中定义的函数, 还包括POSIX标准中定义的函数。因此, Linux 下既可以使用标准I&#x2F;O, 也可以使用文件I&#x2F;O）</p>\n<h1 id=\"标准IO的格式化\"><a href=\"#标准IO的格式化\" class=\"headerlink\" title=\"标准IO的格式化\"></a>标准IO的格式化</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">--标准输出</span><br><span class=\"line\">int printf(const char *format, ...);\t--&gt;标准输出</span><br><span class=\"line\">int fprintf(FILE *stream, const char *format, ...);  --&gt; 指定的流</span><br><span class=\"line\">int sprintf(char *str, const char *format, ...);\t--&gt; 指定str(缓冲区)</span><br><span class=\"line\"></span><br><span class=\"line\">--标准输出</span><br><span class=\"line\">int scanf(const char *format, ...);</span><br><span class=\"line\">int fscanf(FILE *stream, const char *format, ...);</span><br><span class=\"line\">int sscanf(const char *str, const char *format, ...);</span><br></pre></td></tr></table></figure>\n<p>格式字符串的一般形式：<br>[标志][输出最小宽度][.精度][长度]类型<br>其中方括号[]为可选项</p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><p>类型字符用以表示输出数据的类型<br>格式字符\t意义<br>d\t\t以十进制形式输出带符号整数(正数不输出符号)<br>o\t\t以八进制形式输出无符号整数(不输出前缀0)<br>x,X\t\t以十六进制形式输出无符号整数(不输出前缀Ox)<br>u\t\t以十进制形式输出无符号整数<br>f\t\t以小数形式输出单、双精度实数<br>e,E\t\t以指数形式输出单、双精度实数<br>g,G\t\t以%f或%e中较短的输出宽度输出单、双精度实数<br>c\t\t输出单个字符<br>s\t\t输出字符串</p>\n<h2 id=\"标志\"><a href=\"#标志\" class=\"headerlink\" title=\"标志\"></a>标志</h2><p>标志字符为’-‘、’+’、’#’和空格<br>标志 \t意义<br>‘-‘\t\t结果左对齐，右边填空格<br>‘+’\t\t输出符号(正号或负号)<br>空格\t\t输出值为正时冠以空格，为负时冠以负号<br>‘#’\t\t对c、s、d、u类无影响；<br>        对o类，在输出时加前缀o；<br>        对x类，在输出时加前缀0x；<br>        对e、g、f 类当结果有小数时才给出小数点。</p>\n<h2 id=\"输出最小宽度\"><a href=\"#输出最小宽度\" class=\"headerlink\" title=\"输出最小宽度\"></a>输出最小宽度</h2><p>用十进制整数来表示输出的最少位数。若实际位数多于定义的宽度，则按实际位数输出，若实际位数少于定义的宽度则补以空格或0。</p>\n<h2 id=\"精度\"><a href=\"#精度\" class=\"headerlink\" title=\"精度\"></a>精度</h2><p>精度格式符以“.”开头，后跟十进制整数。本项的意义是：如果输出数字，则表示小数的位数；如果输出的是字符，则表示输出字符的个数；若实际位数大于所定义的精度数，则截去超过的部分。</p>\n<h2 id=\"长度\"><a href=\"#长度\" class=\"headerlink\" title=\"长度\"></a>长度</h2><p>长度格式符为h、l两种，h表示按短整型量输出，l表示按长整型量输出。</p>\n<h1 id=\"行缓冲和全缓冲-fflush-–-面试题\"><a href=\"#行缓冲和全缓冲-fflush-–-面试题\" class=\"headerlink\" title=\"行缓冲和全缓冲(fflush) –&gt; 面试题\"></a>行缓冲和全缓冲(fflush) –&gt; 面试题</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;BEGIN&quot;);  </span><br><span class=\"line\">    </span><br><span class=\"line\">    //fflush(stdout);  --&gt; 注释后 printf(&quot;BEGIN&quot;); 打印了两遍</span><br><span class=\"line\">    pid = fork();</span><br><span class=\"line\">    if(pid &lt; 0)</span><br><span class=\"line\">        return -1; </span><br><span class=\"line\"></span><br><span class=\"line\">    if(pid == 0) //子</span><br><span class=\"line\">        printf(&quot;[%d]: child\\n&quot;, getpid());</span><br><span class=\"line\">    else</span><br><span class=\"line\">        printf(&quot;[%d]: parent\\n&quot;, getpid());</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;END&quot;);</span><br><span class=\"line\">    wait();</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">执行 结果，BEGIN 打印两次 END 打印两次</span><br><span class=\"line\">[para fork_fflush]$ ./fork_fflush </span><br><span class=\"line\">BEGIN[19918]: parent</span><br><span class=\"line\">BEGIN[19919]: child</span><br><span class=\"line\">ENDEND[para fork_fflush]$ </span><br></pre></td></tr></table></figure>\n<p>标准I&#x2F;O提供了三种类型的缓存：<br>缓存可由标准IO例程自动的刷新，或者可以调用函数fflush刷新一个流</p>\n<h2 id=\"全缓存\"><a href=\"#全缓存\" class=\"headerlink\" title=\"全缓存\"></a>全缓存</h2><p>1)当填满标准IO缓存后才进行实际IO操作<br>2)对于驻在磁盘上的文件通常是有标准IO库实施全缓存的</p>\n<h2 id=\"行缓存\"><a href=\"#行缓存\" class=\"headerlink\" title=\"行缓存\"></a>行缓存</h2><p>1)当在输入和输出中遇到新行符时, 标准IO库执行实际IO操作<br>2)当流涉及一个终端时(例如标准输入和标准输出), 典型地使用行缓存<br>3)标准IO库用来收集每一行的缓存的长度固定的, 只要填满了缓存, 即使没有写一个新行符, 也进行IO操作<br>4)任何时候只要通过标准输入输出库要求从一个不带缓存的流, 或者一个行缓存的流得到输入数据, 那么就会造成刷新所有行缓存输出流</p>\n<h2 id=\"不带缓存\"><a href=\"#不带缓存\" class=\"headerlink\" title=\"不带缓存\"></a>不带缓存</h2><p>1)标准IO库不对字符进行缓存, 如果用标准IO函数写若干字符到不带缓存的流中,<br>2)则相当于用write系统调用函数将这些字符写至相关的打开文件上<br>3)标准出错流stderr通常是不带缓存的。</p>\n<h2 id=\"ANSI-C要求下列缓存特征\"><a href=\"#ANSI-C要求下列缓存特征\" class=\"headerlink\" title=\"ANSI C要求下列缓存特征:\"></a>ANSI C要求下列缓存特征:</h2><p>1)当且仅当标准输入和标准输出并不涉及交互作用设备时，他们才是全缓存的<br>2)标准出错绝不会是全缓存的</p>\n<h2 id=\"程序问题\"><a href=\"#程序问题\" class=\"headerlink\" title=\"程序问题\"></a>程序问题</h2><p>因为printf是标准IO函数，默认行缓冲(遇到换行符才会刷新流)<br>若没有进行缓冲区刷新(fflush), “BEGIN”在fork之前，并没有输出到标准输出,<br>在fork的时候, 会将缓冲区的内容也复制了一份，<br>等程序到了 printf(“[%d]: child\\n”, getpid()) 从缓冲区将”BEGIN”和”[%d]: child\\n”进行一起打印输出</p>\n<h2 id=\"fflush-刷新缓存区\"><a href=\"#fflush-刷新缓存区\" class=\"headerlink\" title=\"fflush 刷新缓存区\"></a>fflush 刷新缓存区</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int fflush(FILE *stream);</span><br><span class=\"line\">返回值</span><br><span class=\"line\">Upon successful completion 0 is returned.  Otherwise, EOF is returned and  errno  is  set  to  indicate  the</span><br><span class=\"line\">error.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"文件描述符和FILE结构体指针转换\"><a href=\"#文件描述符和FILE结构体指针转换\" class=\"headerlink\" title=\"文件描述符和FILE结构体指针转换\"></a>文件描述符和FILE结构体指针转换</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">FILE *fdopen(int fd, const char *mode);</span><br></pre></td></tr></table></figure>"},{"title":"weekend","date":"2020-09-13T14:41:07.000Z","_content":"# Begin\n看了部老片 \"心灵捕手\"，电影有几个场景有种让我想写点文字的冲动，故事很细腻，\n每一段对话触及心灵，恰到好处，当然情节和对话的深度也是按剧情推进。\n\n<!--more-->\n\n# One\n我把电影称为 青年成长类吧，年少时也会自以为是，目视一切为空；年少时将自己包裹，\n因为裸露内心会受伤；年少时不知自己想做什么，何为热爱，何为想要。这些都是少年的烦恼。\n只是电影里，男主对这些问题描述的更加突出，渲染。拥有极高的天赋，目视一切；\n寄养童年让他，防御式避开对自己内心。\n\n![Lena](/images/Snipaste_2020-09-13_20-58-39.png)\n\n这里是很长一段长镜头教育，触动我的应该是老头的文字与语言魅力，\n年少的我也是如此吧，或者道听途说，或者书上记录，款款而谈。\n我们自以为都懂，而当时过境迁，我们再回想已是另一种滋味，是带上自己情感烙印的答案了。\n\n![Lena](/images/Snipaste_2020-09-13_21-01-49.png)\n\n![Lena](/images/Snipaste_2020-09-13_21-04-19.png)\n\n# Two\n这一段场景，两个人坐在岸边，蓝天绿柳，很平静的阐述，很平静的述说，\n想是在教育，有想是老头在对年轻的自己述说。如果这个场景仅仅是语言上对我的触动。\n那接下来电影的故事，更是心灵上的触动。\n\n![Lena](/images/Snipaste_2020-09-13_21-09-48.png)\n\n![Lena](/images/Snipaste_2020-09-13_21-11-56.png)\n\n我们之间就是这样，老想将自己最完美，最优秀的自己展示给对方。\n其实我们自己都知道，自己不完美，甚至自卑，但是总想在对方的心里保持完美的形象。\n这就是你说的摸不到对方的心。\n\n# End\n电影是好电影，教育意义。那防御式的青年，就是那个自己。从没有把自己的内心拿出来过，藏在心底，甚至不知道和谁谈述。\n终于当你找到一个自己的心灵伴侣，慢慢的会将自己的情感去向她表达，决定将自己的真心交给她。\n\n\n没关系，明天又是假装的自己，用表情来掩盖自己，将真心埋葬了。","source":"_posts/weekend.md","raw":"---\ntitle: weekend\ndate: 2020-09-13 22:41:07\ntags:\n---\n# Begin\n看了部老片 \"心灵捕手\"，电影有几个场景有种让我想写点文字的冲动，故事很细腻，\n每一段对话触及心灵，恰到好处，当然情节和对话的深度也是按剧情推进。\n\n<!--more-->\n\n# One\n我把电影称为 青年成长类吧，年少时也会自以为是，目视一切为空；年少时将自己包裹，\n因为裸露内心会受伤；年少时不知自己想做什么，何为热爱，何为想要。这些都是少年的烦恼。\n只是电影里，男主对这些问题描述的更加突出，渲染。拥有极高的天赋，目视一切；\n寄养童年让他，防御式避开对自己内心。\n\n![Lena](/images/Snipaste_2020-09-13_20-58-39.png)\n\n这里是很长一段长镜头教育，触动我的应该是老头的文字与语言魅力，\n年少的我也是如此吧，或者道听途说，或者书上记录，款款而谈。\n我们自以为都懂，而当时过境迁，我们再回想已是另一种滋味，是带上自己情感烙印的答案了。\n\n![Lena](/images/Snipaste_2020-09-13_21-01-49.png)\n\n![Lena](/images/Snipaste_2020-09-13_21-04-19.png)\n\n# Two\n这一段场景，两个人坐在岸边，蓝天绿柳，很平静的阐述，很平静的述说，\n想是在教育，有想是老头在对年轻的自己述说。如果这个场景仅仅是语言上对我的触动。\n那接下来电影的故事，更是心灵上的触动。\n\n![Lena](/images/Snipaste_2020-09-13_21-09-48.png)\n\n![Lena](/images/Snipaste_2020-09-13_21-11-56.png)\n\n我们之间就是这样，老想将自己最完美，最优秀的自己展示给对方。\n其实我们自己都知道，自己不完美，甚至自卑，但是总想在对方的心里保持完美的形象。\n这就是你说的摸不到对方的心。\n\n# End\n电影是好电影，教育意义。那防御式的青年，就是那个自己。从没有把自己的内心拿出来过，藏在心底，甚至不知道和谁谈述。\n终于当你找到一个自己的心灵伴侣，慢慢的会将自己的情感去向她表达，决定将自己的真心交给她。\n\n\n没关系，明天又是假装的自己，用表情来掩盖自己，将真心埋葬了。","slug":"weekend","published":1,"updated":"2025-03-21T08:19:06.483Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmv000j36orgzjo9t8v","content":"<h1 id=\"Begin\"><a href=\"#Begin\" class=\"headerlink\" title=\"Begin\"></a>Begin</h1><p>看了部老片 “心灵捕手”，电影有几个场景有种让我想写点文字的冲动，故事很细腻，<br>每一段对话触及心灵，恰到好处，当然情节和对话的深度也是按剧情推进。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"One\"><a href=\"#One\" class=\"headerlink\" title=\"One\"></a>One</h1><p>我把电影称为 青年成长类吧，年少时也会自以为是，目视一切为空；年少时将自己包裹，<br>因为裸露内心会受伤；年少时不知自己想做什么，何为热爱，何为想要。这些都是少年的烦恼。<br>只是电影里，男主对这些问题描述的更加突出，渲染。拥有极高的天赋，目视一切；<br>寄养童年让他，防御式避开对自己内心。</p>\n<p><img src=\"/images/Snipaste_2020-09-13_20-58-39.png\" alt=\"Lena\"></p>\n<p>这里是很长一段长镜头教育，触动我的应该是老头的文字与语言魅力，<br>年少的我也是如此吧，或者道听途说，或者书上记录，款款而谈。<br>我们自以为都懂，而当时过境迁，我们再回想已是另一种滋味，是带上自己情感烙印的答案了。</p>\n<p><img src=\"/images/Snipaste_2020-09-13_21-01-49.png\" alt=\"Lena\"></p>\n<p><img src=\"/images/Snipaste_2020-09-13_21-04-19.png\" alt=\"Lena\"></p>\n<h1 id=\"Two\"><a href=\"#Two\" class=\"headerlink\" title=\"Two\"></a>Two</h1><p>这一段场景，两个人坐在岸边，蓝天绿柳，很平静的阐述，很平静的述说，<br>想是在教育，有想是老头在对年轻的自己述说。如果这个场景仅仅是语言上对我的触动。<br>那接下来电影的故事，更是心灵上的触动。</p>\n<p><img src=\"/images/Snipaste_2020-09-13_21-09-48.png\" alt=\"Lena\"></p>\n<p><img src=\"/images/Snipaste_2020-09-13_21-11-56.png\" alt=\"Lena\"></p>\n<p>我们之间就是这样，老想将自己最完美，最优秀的自己展示给对方。<br>其实我们自己都知道，自己不完美，甚至自卑，但是总想在对方的心里保持完美的形象。<br>这就是你说的摸不到对方的心。</p>\n<h1 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h1><p>电影是好电影，教育意义。那防御式的青年，就是那个自己。从没有把自己的内心拿出来过，藏在心底，甚至不知道和谁谈述。<br>终于当你找到一个自己的心灵伴侣，慢慢的会将自己的情感去向她表达，决定将自己的真心交给她。</p>\n<p>没关系，明天又是假装的自己，用表情来掩盖自己，将真心埋葬了。</p>\n","excerpt":"<h1 id=\"Begin\"><a href=\"#Begin\" class=\"headerlink\" title=\"Begin\"></a>Begin</h1><p>看了部老片 “心灵捕手”，电影有几个场景有种让我想写点文字的冲动，故事很细腻，<br>每一段对话触及心灵，恰到好处，当然情节和对话的深度也是按剧情推进。</p>","more":"<h1 id=\"One\"><a href=\"#One\" class=\"headerlink\" title=\"One\"></a>One</h1><p>我把电影称为 青年成长类吧，年少时也会自以为是，目视一切为空；年少时将自己包裹，<br>因为裸露内心会受伤；年少时不知自己想做什么，何为热爱，何为想要。这些都是少年的烦恼。<br>只是电影里，男主对这些问题描述的更加突出，渲染。拥有极高的天赋，目视一切；<br>寄养童年让他，防御式避开对自己内心。</p>\n<p><img src=\"/images/Snipaste_2020-09-13_20-58-39.png\" alt=\"Lena\"></p>\n<p>这里是很长一段长镜头教育，触动我的应该是老头的文字与语言魅力，<br>年少的我也是如此吧，或者道听途说，或者书上记录，款款而谈。<br>我们自以为都懂，而当时过境迁，我们再回想已是另一种滋味，是带上自己情感烙印的答案了。</p>\n<p><img src=\"/images/Snipaste_2020-09-13_21-01-49.png\" alt=\"Lena\"></p>\n<p><img src=\"/images/Snipaste_2020-09-13_21-04-19.png\" alt=\"Lena\"></p>\n<h1 id=\"Two\"><a href=\"#Two\" class=\"headerlink\" title=\"Two\"></a>Two</h1><p>这一段场景，两个人坐在岸边，蓝天绿柳，很平静的阐述，很平静的述说，<br>想是在教育，有想是老头在对年轻的自己述说。如果这个场景仅仅是语言上对我的触动。<br>那接下来电影的故事，更是心灵上的触动。</p>\n<p><img src=\"/images/Snipaste_2020-09-13_21-09-48.png\" alt=\"Lena\"></p>\n<p><img src=\"/images/Snipaste_2020-09-13_21-11-56.png\" alt=\"Lena\"></p>\n<p>我们之间就是这样，老想将自己最完美，最优秀的自己展示给对方。<br>其实我们自己都知道，自己不完美，甚至自卑，但是总想在对方的心里保持完美的形象。<br>这就是你说的摸不到对方的心。</p>\n<h1 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h1><p>电影是好电影，教育意义。那防御式的青年，就是那个自己。从没有把自己的内心拿出来过，藏在心底，甚至不知道和谁谈述。<br>终于当你找到一个自己的心灵伴侣，慢慢的会将自己的情感去向她表达，决定将自己的真心交给她。</p>\n<p>没关系，明天又是假装的自己，用表情来掩盖自己，将真心埋葬了。</p>"},{"title":"初识ssh","date":"2020-09-09T02:52:02.000Z","_content":"\nssh前言\n最近在写自动化脚本，需要登录多台服务器操作。由于频繁输入密码，进行配置免密登录(公钥登录)，在此记录细节。\n\nssh只是一种计算机之间机密登录的协议，它相对于telnet和rsh的明文传输，\n提供了加密、校验和压缩，使得我们可以很安全的远程操作，\n而不用担心信息泄露(当然不是绝对的，加密总有可能被破解，只是比起明文来说那是强了不少)。\n\n<!--more-->\n\n# ssh基本用法\n远程登录主机host\n```\n$ ssh user@host\n```\n\n如果本地用户名与远程用户名一致，登录时可以省略用户名\n```\n$ ssh host\n```\n\nssh的默认端口22，使用p参数修改端口\n```\n$ ssh -p 2222 user@host\n```\n\n# 加密简介\n加密的意思是将一段数据经过处理之后，输出为一段外人无法或者很难破译的数据，除了指定的人可以解密之外。\n一般来说，加密的输入还会有一个key，这个key作为加密的参数，而在解密的时候也会用一个相关联(有可能是相同)的key作为输入。\n粗略来说是下面的流程：\n\n```\n# 加密方\nencrypted_data = encrypt(raw_data, key)\n# 解密方\nraw_data = decrypt(encrypted_data, key1)\n```\n\n目前主流的加密算法一般分为下面两类：\n私钥(secret key)加密，也称为对称加密\n公钥(public key)加密，也称非对称加密\n\n## 私钥加密\n私钥加密，加密方和解密方用的是同一个key，这个key对于加密和解密双方来说都是保密的。\n一般来说是加密方先产生私钥，然后通过一个安全的途径来告知解密方这个私钥。\n\n## 公钥加密\n公钥加密，解密方生成一对密钥(公钥和私钥)，公钥对外发布，私钥自己保存。用公钥加密的数据，只能私钥进行解密。\n加密方首先需要获取到公钥，然后利用这个公钥进行加密，把数据发送给解密方，解密方用私钥进行解密获取数据。\n如果解密的数据在传输的过程中被第三方截获，也不用担心，因为第三方没有私钥，没有办法进行解密。\n\n![Lena](/images/ssh02.png)\n\n但是公钥加密还是会有风险，有人冒充解密方发送一对伪造的密钥，那么他就能解出加密方所上送的数据。\n那么加密方很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。\n这种封建就是著名的\"中间人攻击\"(Man-in-the-middle attack)。所以公钥加密里面比较重要的一步是身份认证。\n\n![Lena](/images/ssh03.png)\n\n一般的私钥加密都会比公钥加密快，所以大数据量的加密一般都会使用私钥加密，而公钥加密会作为身份验证和交换私钥的一个手段。\n\n## 身份校验\n上面讲到公钥加密的风险，那么ssh协议是如何应对的呢？\n\n如果你是第一次登陆对方主机，系统会出现下面提示\n```\n[para@para2 ~]$ ssh para@47.114.0.16\nThe authenticity of host '47.114.0.16 (47.114.0.16)' can't be established.\nECDSA key fingerprint is da:eb:96:f4:79:05:fb:3a:2a:34:4f:04:c1:a6:29:39.\nAre you sure you want to continue connecting (yes/no)? \n```\n这代表，无法确认host主机的真实性，只有他的公钥指纹(ECDSA key fingerprint)，问还想继续连接吗\n\n\"公钥指纹\"，公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。\n上例中是da:eb:96:f4:79:05:fb:3a:2a:34:4f:04:c1:a6:29:39，再进行比较，就容易多了。\n然而远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。\n\n用户决定接受这个远程主机的公钥。\n```\nAre you sure you want to continue connecting (yes/no)? yes\n```\n系统会提示host主机已经得到认可\n\n```\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '47.114.0.16' (ECDSA) to the list of known hosts.\npara@47.114.0.16's password: \n```\n如果密码正确，就可以登录了。\n\n当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。\n下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。\n\n每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，\n保存一些对所有用户都可信赖的远程主机的公钥。\n\n## 数据完整性\n数据一致性说得是如何保证一段数据在传输的过程中没有遗漏、破坏或者修改过。一般来说，目前流行的做法是对数据进行hash，\n得到的hash值和数据一起传输，然后在收到数据的时候也对数据进行hash，将得到的hash值和传输过来的hash值进行比对，\n如果是不一样的，说明数据已经被修改过；如果是一样的，则说明极有可能是完整的。\n\n目前流行的hash算法有MD5和SHA-1算法。\n\n# ssh连接过程\n\n## 口令登录\n(1)身份校验：用户同意后进行登录操作\n(2)远程主机收到用户的登录请求，把自己的公钥发给用户。\n(3)用户使用这个公钥，将登录密码加密后，发送回来。\n(4)远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。\n\n## 公钥登录\n口令登录每次都要输入密码，非常麻烦，ssh提供了公钥登录，省去了输入密码的步骤\n\n公钥登录原理，用户将自己的公钥存在远程主机上。登录的时候，远程主机会向用户发送\n一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先存储的公钥进行解密，\n解密成功，就证明用户是可信的，直接允许登录shell，不再要求密码。\n\n![Lena](/images/ssh01.png)\n\n操作步骤：\n1.ssh-keygen -t rsa 命令生成一对密钥对，放在 $HOME/.ssh/目录下，分别为id_rsa.pub和id_rsa。\nid_rsa是私钥(保存)，id_rsa.pub是公钥(给服务器保存)\n\n2.输入命令  ssh-copy-id user@host,将公钥发送至远程host上\n\n3.检查远程主机的配置文件 /etc/ssh/sshd_config 是否开启\n```\n　RSAAuthentication yes\n　PubkeyAuthentication yes\n　AuthorizedKeysFile .ssh/authorized_keys\n```\n修改后重启ssh服务\n```\nubuntu系统 service ssh restart \ndebian系统 /etc/init.d/ssh restart\n```\n\n4.修改远程主机配置文件\nchmod 600 $HOME/.ssh/authorized_keys\nchmod 700 $HOME/.ssh/\n\n# authorized_keys和known_hosts文件\n当新连接一台远程主机，都会进行身份校验，公钥指纹保存在$HOME/.ssh/known_hosts文件中。\n远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys文件中。\n\n因此可以直接将客户端的公钥追加到远程主机的authorized_keys文件中\n命令如下\n```\n　$ ssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n```\n\n\n","source":"_posts/ssh01.md","raw":"---\ntitle: 初识ssh\ndate: 2020-09-09 10:52:02\ntags:\n---\n\nssh前言\n最近在写自动化脚本，需要登录多台服务器操作。由于频繁输入密码，进行配置免密登录(公钥登录)，在此记录细节。\n\nssh只是一种计算机之间机密登录的协议，它相对于telnet和rsh的明文传输，\n提供了加密、校验和压缩，使得我们可以很安全的远程操作，\n而不用担心信息泄露(当然不是绝对的，加密总有可能被破解，只是比起明文来说那是强了不少)。\n\n<!--more-->\n\n# ssh基本用法\n远程登录主机host\n```\n$ ssh user@host\n```\n\n如果本地用户名与远程用户名一致，登录时可以省略用户名\n```\n$ ssh host\n```\n\nssh的默认端口22，使用p参数修改端口\n```\n$ ssh -p 2222 user@host\n```\n\n# 加密简介\n加密的意思是将一段数据经过处理之后，输出为一段外人无法或者很难破译的数据，除了指定的人可以解密之外。\n一般来说，加密的输入还会有一个key，这个key作为加密的参数，而在解密的时候也会用一个相关联(有可能是相同)的key作为输入。\n粗略来说是下面的流程：\n\n```\n# 加密方\nencrypted_data = encrypt(raw_data, key)\n# 解密方\nraw_data = decrypt(encrypted_data, key1)\n```\n\n目前主流的加密算法一般分为下面两类：\n私钥(secret key)加密，也称为对称加密\n公钥(public key)加密，也称非对称加密\n\n## 私钥加密\n私钥加密，加密方和解密方用的是同一个key，这个key对于加密和解密双方来说都是保密的。\n一般来说是加密方先产生私钥，然后通过一个安全的途径来告知解密方这个私钥。\n\n## 公钥加密\n公钥加密，解密方生成一对密钥(公钥和私钥)，公钥对外发布，私钥自己保存。用公钥加密的数据，只能私钥进行解密。\n加密方首先需要获取到公钥，然后利用这个公钥进行加密，把数据发送给解密方，解密方用私钥进行解密获取数据。\n如果解密的数据在传输的过程中被第三方截获，也不用担心，因为第三方没有私钥，没有办法进行解密。\n\n![Lena](/images/ssh02.png)\n\n但是公钥加密还是会有风险，有人冒充解密方发送一对伪造的密钥，那么他就能解出加密方所上送的数据。\n那么加密方很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。\n这种封建就是著名的\"中间人攻击\"(Man-in-the-middle attack)。所以公钥加密里面比较重要的一步是身份认证。\n\n![Lena](/images/ssh03.png)\n\n一般的私钥加密都会比公钥加密快，所以大数据量的加密一般都会使用私钥加密，而公钥加密会作为身份验证和交换私钥的一个手段。\n\n## 身份校验\n上面讲到公钥加密的风险，那么ssh协议是如何应对的呢？\n\n如果你是第一次登陆对方主机，系统会出现下面提示\n```\n[para@para2 ~]$ ssh para@47.114.0.16\nThe authenticity of host '47.114.0.16 (47.114.0.16)' can't be established.\nECDSA key fingerprint is da:eb:96:f4:79:05:fb:3a:2a:34:4f:04:c1:a6:29:39.\nAre you sure you want to continue connecting (yes/no)? \n```\n这代表，无法确认host主机的真实性，只有他的公钥指纹(ECDSA key fingerprint)，问还想继续连接吗\n\n\"公钥指纹\"，公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。\n上例中是da:eb:96:f4:79:05:fb:3a:2a:34:4f:04:c1:a6:29:39，再进行比较，就容易多了。\n然而远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。\n\n用户决定接受这个远程主机的公钥。\n```\nAre you sure you want to continue connecting (yes/no)? yes\n```\n系统会提示host主机已经得到认可\n\n```\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '47.114.0.16' (ECDSA) to the list of known hosts.\npara@47.114.0.16's password: \n```\n如果密码正确，就可以登录了。\n\n当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。\n下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。\n\n每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，\n保存一些对所有用户都可信赖的远程主机的公钥。\n\n## 数据完整性\n数据一致性说得是如何保证一段数据在传输的过程中没有遗漏、破坏或者修改过。一般来说，目前流行的做法是对数据进行hash，\n得到的hash值和数据一起传输，然后在收到数据的时候也对数据进行hash，将得到的hash值和传输过来的hash值进行比对，\n如果是不一样的，说明数据已经被修改过；如果是一样的，则说明极有可能是完整的。\n\n目前流行的hash算法有MD5和SHA-1算法。\n\n# ssh连接过程\n\n## 口令登录\n(1)身份校验：用户同意后进行登录操作\n(2)远程主机收到用户的登录请求，把自己的公钥发给用户。\n(3)用户使用这个公钥，将登录密码加密后，发送回来。\n(4)远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。\n\n## 公钥登录\n口令登录每次都要输入密码，非常麻烦，ssh提供了公钥登录，省去了输入密码的步骤\n\n公钥登录原理，用户将自己的公钥存在远程主机上。登录的时候，远程主机会向用户发送\n一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先存储的公钥进行解密，\n解密成功，就证明用户是可信的，直接允许登录shell，不再要求密码。\n\n![Lena](/images/ssh01.png)\n\n操作步骤：\n1.ssh-keygen -t rsa 命令生成一对密钥对，放在 $HOME/.ssh/目录下，分别为id_rsa.pub和id_rsa。\nid_rsa是私钥(保存)，id_rsa.pub是公钥(给服务器保存)\n\n2.输入命令  ssh-copy-id user@host,将公钥发送至远程host上\n\n3.检查远程主机的配置文件 /etc/ssh/sshd_config 是否开启\n```\n　RSAAuthentication yes\n　PubkeyAuthentication yes\n　AuthorizedKeysFile .ssh/authorized_keys\n```\n修改后重启ssh服务\n```\nubuntu系统 service ssh restart \ndebian系统 /etc/init.d/ssh restart\n```\n\n4.修改远程主机配置文件\nchmod 600 $HOME/.ssh/authorized_keys\nchmod 700 $HOME/.ssh/\n\n# authorized_keys和known_hosts文件\n当新连接一台远程主机，都会进行身份校验，公钥指纹保存在$HOME/.ssh/known_hosts文件中。\n远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys文件中。\n\n因此可以直接将客户端的公钥追加到远程主机的authorized_keys文件中\n命令如下\n```\n　$ ssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n```\n\n\n","slug":"ssh01","published":1,"updated":"2025-03-21T08:19:06.482Z","comments":1,"layout":"post","photos":[],"_id":"cm8iiexmv000l36or1hqd0tex","content":"<p>ssh前言<br>最近在写自动化脚本，需要登录多台服务器操作。由于频繁输入密码，进行配置免密登录(公钥登录)，在此记录细节。</p>\n<p>ssh只是一种计算机之间机密登录的协议，它相对于telnet和rsh的明文传输，<br>提供了加密、校验和压缩，使得我们可以很安全的远程操作，<br>而不用担心信息泄露(当然不是绝对的，加密总有可能被破解，只是比起明文来说那是强了不少)。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"ssh基本用法\"><a href=\"#ssh基本用法\" class=\"headerlink\" title=\"ssh基本用法\"></a>ssh基本用法</h1><p>远程登录主机host</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host</span><br></pre></td></tr></table></figure>\n\n<p>如果本地用户名与远程用户名一致，登录时可以省略用户名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh host</span><br></pre></td></tr></table></figure>\n\n<p>ssh的默认端口22，使用p参数修改端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -p 2222 user@host</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"加密简介\"><a href=\"#加密简介\" class=\"headerlink\" title=\"加密简介\"></a>加密简介</h1><p>加密的意思是将一段数据经过处理之后，输出为一段外人无法或者很难破译的数据，除了指定的人可以解密之外。<br>一般来说，加密的输入还会有一个key，这个key作为加密的参数，而在解密的时候也会用一个相关联(有可能是相同)的key作为输入。<br>粗略来说是下面的流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 加密方</span><br><span class=\"line\">encrypted_data = encrypt(raw_data, key)</span><br><span class=\"line\"># 解密方</span><br><span class=\"line\">raw_data = decrypt(encrypted_data, key1)</span><br></pre></td></tr></table></figure>\n\n<p>目前主流的加密算法一般分为下面两类：<br>私钥(secret key)加密，也称为对称加密<br>公钥(public key)加密，也称非对称加密</p>\n<h2 id=\"私钥加密\"><a href=\"#私钥加密\" class=\"headerlink\" title=\"私钥加密\"></a>私钥加密</h2><p>私钥加密，加密方和解密方用的是同一个key，这个key对于加密和解密双方来说都是保密的。<br>一般来说是加密方先产生私钥，然后通过一个安全的途径来告知解密方这个私钥。</p>\n<h2 id=\"公钥加密\"><a href=\"#公钥加密\" class=\"headerlink\" title=\"公钥加密\"></a>公钥加密</h2><p>公钥加密，解密方生成一对密钥(公钥和私钥)，公钥对外发布，私钥自己保存。用公钥加密的数据，只能私钥进行解密。<br>加密方首先需要获取到公钥，然后利用这个公钥进行加密，把数据发送给解密方，解密方用私钥进行解密获取数据。<br>如果解密的数据在传输的过程中被第三方截获，也不用担心，因为第三方没有私钥，没有办法进行解密。</p>\n<p><img src=\"/images/ssh02.png\" alt=\"Lena\"></p>\n<p>但是公钥加密还是会有风险，有人冒充解密方发送一对伪造的密钥，那么他就能解出加密方所上送的数据。<br>那么加密方很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。<br>这种封建就是著名的”中间人攻击”(Man-in-the-middle attack)。所以公钥加密里面比较重要的一步是身份认证。</p>\n<p><img src=\"/images/ssh03.png\" alt=\"Lena\"></p>\n<p>一般的私钥加密都会比公钥加密快，所以大数据量的加密一般都会使用私钥加密，而公钥加密会作为身份验证和交换私钥的一个手段。</p>\n<h2 id=\"身份校验\"><a href=\"#身份校验\" class=\"headerlink\" title=\"身份校验\"></a>身份校验</h2><p>上面讲到公钥加密的风险，那么ssh协议是如何应对的呢？</p>\n<p>如果你是第一次登陆对方主机，系统会出现下面提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[para@para2 ~]$ ssh para@47.114.0.16</span><br><span class=\"line\">The authenticity of host &#x27;47.114.0.16 (47.114.0.16)&#x27; can&#x27;t be established.</span><br><span class=\"line\">ECDSA key fingerprint is da:eb:96:f4:79:05:fb:3a:2a:34:4f:04:c1:a6:29:39.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)? </span><br></pre></td></tr></table></figure>\n<p>这代表，无法确认host主机的真实性，只有他的公钥指纹(ECDSA key fingerprint)，问还想继续连接吗</p>\n<p>“公钥指纹”，公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。<br>上例中是da:eb:96:f4:79:05:fb:3a:2a:34:4f:04:c1:a6:29:39，再进行比较，就容易多了。<br>然而远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p>\n<p>用户决定接受这个远程主机的公钥。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br></pre></td></tr></table></figure>\n<p>系统会提示host主机已经得到认可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class=\"line\">Warning: Permanently added &#x27;47.114.0.16&#x27; (ECDSA) to the list of known hosts.</span><br><span class=\"line\">para@47.114.0.16&#x27;s password: </span><br></pre></td></tr></table></figure>\n<p>如果密码正确，就可以登录了。</p>\n<p>当远程主机的公钥被接受以后，它就会被保存在文件$HOME&#x2F;.ssh&#x2F;known_hosts之中。<br>下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p>\n<p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是&#x2F;etc&#x2F;ssh&#x2F;ssh_known_hosts，<br>保存一些对所有用户都可信赖的远程主机的公钥。</p>\n<h2 id=\"数据完整性\"><a href=\"#数据完整性\" class=\"headerlink\" title=\"数据完整性\"></a>数据完整性</h2><p>数据一致性说得是如何保证一段数据在传输的过程中没有遗漏、破坏或者修改过。一般来说，目前流行的做法是对数据进行hash，<br>得到的hash值和数据一起传输，然后在收到数据的时候也对数据进行hash，将得到的hash值和传输过来的hash值进行比对，<br>如果是不一样的，说明数据已经被修改过；如果是一样的，则说明极有可能是完整的。</p>\n<p>目前流行的hash算法有MD5和SHA-1算法。</p>\n<h1 id=\"ssh连接过程\"><a href=\"#ssh连接过程\" class=\"headerlink\" title=\"ssh连接过程\"></a>ssh连接过程</h1><h2 id=\"口令登录\"><a href=\"#口令登录\" class=\"headerlink\" title=\"口令登录\"></a>口令登录</h2><p>(1)身份校验：用户同意后进行登录操作<br>(2)远程主机收到用户的登录请求，把自己的公钥发给用户。<br>(3)用户使用这个公钥，将登录密码加密后，发送回来。<br>(4)远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>\n<h2 id=\"公钥登录\"><a href=\"#公钥登录\" class=\"headerlink\" title=\"公钥登录\"></a>公钥登录</h2><p>口令登录每次都要输入密码，非常麻烦，ssh提供了公钥登录，省去了输入密码的步骤</p>\n<p>公钥登录原理，用户将自己的公钥存在远程主机上。登录的时候，远程主机会向用户发送<br>一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先存储的公钥进行解密，<br>解密成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p>\n<p><img src=\"/images/ssh01.png\" alt=\"Lena\"></p>\n<p>操作步骤：<br>1.ssh-keygen -t rsa 命令生成一对密钥对，放在 $HOME&#x2F;.ssh&#x2F;目录下，分别为id_rsa.pub和id_rsa。<br>id_rsa是私钥(保存)，id_rsa.pub是公钥(给服务器保存)</p>\n<p>2.输入命令  ssh-copy-id user@host,将公钥发送至远程host上</p>\n<p>3.检查远程主机的配置文件 &#x2F;etc&#x2F;ssh&#x2F;sshd_config 是否开启</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　RSAAuthentication yes</span><br><span class=\"line\">　PubkeyAuthentication yes</span><br><span class=\"line\">　AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>修改后重启ssh服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu系统 service ssh restart </span><br><span class=\"line\">debian系统 /etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>\n\n<p>4.修改远程主机配置文件<br>chmod 600 $HOME&#x2F;.ssh&#x2F;authorized_keys<br>chmod 700 $HOME&#x2F;.ssh&#x2F;</p>\n<h1 id=\"authorized-keys和known-hosts文件\"><a href=\"#authorized-keys和known-hosts文件\" class=\"headerlink\" title=\"authorized_keys和known_hosts文件\"></a>authorized_keys和known_hosts文件</h1><p>当新连接一台远程主机，都会进行身份校验，公钥指纹保存在$HOME&#x2F;.ssh&#x2F;known_hosts文件中。<br>远程主机将用户的公钥，保存在登录后的用户主目录的$HOME&#x2F;.ssh&#x2F;authorized_keys文件中。</p>\n<p>因此可以直接将客户端的公钥追加到远程主机的authorized_keys文件中<br>命令如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　$ ssh user@host &#x27;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#x27; &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n\n","excerpt":"<p>ssh前言<br>最近在写自动化脚本，需要登录多台服务器操作。由于频繁输入密码，进行配置免密登录(公钥登录)，在此记录细节。</p>\n<p>ssh只是一种计算机之间机密登录的协议，它相对于telnet和rsh的明文传输，<br>提供了加密、校验和压缩，使得我们可以很安全的远程操作，<br>而不用担心信息泄露(当然不是绝对的，加密总有可能被破解，只是比起明文来说那是强了不少)。</p>","more":"<h1 id=\"ssh基本用法\"><a href=\"#ssh基本用法\" class=\"headerlink\" title=\"ssh基本用法\"></a>ssh基本用法</h1><p>远程登录主机host</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host</span><br></pre></td></tr></table></figure>\n\n<p>如果本地用户名与远程用户名一致，登录时可以省略用户名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh host</span><br></pre></td></tr></table></figure>\n\n<p>ssh的默认端口22，使用p参数修改端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -p 2222 user@host</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"加密简介\"><a href=\"#加密简介\" class=\"headerlink\" title=\"加密简介\"></a>加密简介</h1><p>加密的意思是将一段数据经过处理之后，输出为一段外人无法或者很难破译的数据，除了指定的人可以解密之外。<br>一般来说，加密的输入还会有一个key，这个key作为加密的参数，而在解密的时候也会用一个相关联(有可能是相同)的key作为输入。<br>粗略来说是下面的流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 加密方</span><br><span class=\"line\">encrypted_data = encrypt(raw_data, key)</span><br><span class=\"line\"># 解密方</span><br><span class=\"line\">raw_data = decrypt(encrypted_data, key1)</span><br></pre></td></tr></table></figure>\n\n<p>目前主流的加密算法一般分为下面两类：<br>私钥(secret key)加密，也称为对称加密<br>公钥(public key)加密，也称非对称加密</p>\n<h2 id=\"私钥加密\"><a href=\"#私钥加密\" class=\"headerlink\" title=\"私钥加密\"></a>私钥加密</h2><p>私钥加密，加密方和解密方用的是同一个key，这个key对于加密和解密双方来说都是保密的。<br>一般来说是加密方先产生私钥，然后通过一个安全的途径来告知解密方这个私钥。</p>\n<h2 id=\"公钥加密\"><a href=\"#公钥加密\" class=\"headerlink\" title=\"公钥加密\"></a>公钥加密</h2><p>公钥加密，解密方生成一对密钥(公钥和私钥)，公钥对外发布，私钥自己保存。用公钥加密的数据，只能私钥进行解密。<br>加密方首先需要获取到公钥，然后利用这个公钥进行加密，把数据发送给解密方，解密方用私钥进行解密获取数据。<br>如果解密的数据在传输的过程中被第三方截获，也不用担心，因为第三方没有私钥，没有办法进行解密。</p>\n<p><img src=\"/images/ssh02.png\" alt=\"Lena\"></p>\n<p>但是公钥加密还是会有风险，有人冒充解密方发送一对伪造的密钥，那么他就能解出加密方所上送的数据。<br>那么加密方很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。<br>这种封建就是著名的”中间人攻击”(Man-in-the-middle attack)。所以公钥加密里面比较重要的一步是身份认证。</p>\n<p><img src=\"/images/ssh03.png\" alt=\"Lena\"></p>\n<p>一般的私钥加密都会比公钥加密快，所以大数据量的加密一般都会使用私钥加密，而公钥加密会作为身份验证和交换私钥的一个手段。</p>\n<h2 id=\"身份校验\"><a href=\"#身份校验\" class=\"headerlink\" title=\"身份校验\"></a>身份校验</h2><p>上面讲到公钥加密的风险，那么ssh协议是如何应对的呢？</p>\n<p>如果你是第一次登陆对方主机，系统会出现下面提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[para@para2 ~]$ ssh para@47.114.0.16</span><br><span class=\"line\">The authenticity of host &#x27;47.114.0.16 (47.114.0.16)&#x27; can&#x27;t be established.</span><br><span class=\"line\">ECDSA key fingerprint is da:eb:96:f4:79:05:fb:3a:2a:34:4f:04:c1:a6:29:39.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)? </span><br></pre></td></tr></table></figure>\n<p>这代表，无法确认host主机的真实性，只有他的公钥指纹(ECDSA key fingerprint)，问还想继续连接吗</p>\n<p>“公钥指纹”，公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。<br>上例中是da:eb:96:f4:79:05:fb:3a:2a:34:4f:04:c1:a6:29:39，再进行比较，就容易多了。<br>然而远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p>\n<p>用户决定接受这个远程主机的公钥。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br></pre></td></tr></table></figure>\n<p>系统会提示host主机已经得到认可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class=\"line\">Warning: Permanently added &#x27;47.114.0.16&#x27; (ECDSA) to the list of known hosts.</span><br><span class=\"line\">para@47.114.0.16&#x27;s password: </span><br></pre></td></tr></table></figure>\n<p>如果密码正确，就可以登录了。</p>\n<p>当远程主机的公钥被接受以后，它就会被保存在文件$HOME&#x2F;.ssh&#x2F;known_hosts之中。<br>下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p>\n<p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是&#x2F;etc&#x2F;ssh&#x2F;ssh_known_hosts，<br>保存一些对所有用户都可信赖的远程主机的公钥。</p>\n<h2 id=\"数据完整性\"><a href=\"#数据完整性\" class=\"headerlink\" title=\"数据完整性\"></a>数据完整性</h2><p>数据一致性说得是如何保证一段数据在传输的过程中没有遗漏、破坏或者修改过。一般来说，目前流行的做法是对数据进行hash，<br>得到的hash值和数据一起传输，然后在收到数据的时候也对数据进行hash，将得到的hash值和传输过来的hash值进行比对，<br>如果是不一样的，说明数据已经被修改过；如果是一样的，则说明极有可能是完整的。</p>\n<p>目前流行的hash算法有MD5和SHA-1算法。</p>\n<h1 id=\"ssh连接过程\"><a href=\"#ssh连接过程\" class=\"headerlink\" title=\"ssh连接过程\"></a>ssh连接过程</h1><h2 id=\"口令登录\"><a href=\"#口令登录\" class=\"headerlink\" title=\"口令登录\"></a>口令登录</h2><p>(1)身份校验：用户同意后进行登录操作<br>(2)远程主机收到用户的登录请求，把自己的公钥发给用户。<br>(3)用户使用这个公钥，将登录密码加密后，发送回来。<br>(4)远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>\n<h2 id=\"公钥登录\"><a href=\"#公钥登录\" class=\"headerlink\" title=\"公钥登录\"></a>公钥登录</h2><p>口令登录每次都要输入密码，非常麻烦，ssh提供了公钥登录，省去了输入密码的步骤</p>\n<p>公钥登录原理，用户将自己的公钥存在远程主机上。登录的时候，远程主机会向用户发送<br>一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先存储的公钥进行解密，<br>解密成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p>\n<p><img src=\"/images/ssh01.png\" alt=\"Lena\"></p>\n<p>操作步骤：<br>1.ssh-keygen -t rsa 命令生成一对密钥对，放在 $HOME&#x2F;.ssh&#x2F;目录下，分别为id_rsa.pub和id_rsa。<br>id_rsa是私钥(保存)，id_rsa.pub是公钥(给服务器保存)</p>\n<p>2.输入命令  ssh-copy-id user@host,将公钥发送至远程host上</p>\n<p>3.检查远程主机的配置文件 &#x2F;etc&#x2F;ssh&#x2F;sshd_config 是否开启</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　RSAAuthentication yes</span><br><span class=\"line\">　PubkeyAuthentication yes</span><br><span class=\"line\">　AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>修改后重启ssh服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu系统 service ssh restart </span><br><span class=\"line\">debian系统 /etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>\n\n<p>4.修改远程主机配置文件<br>chmod 600 $HOME&#x2F;.ssh&#x2F;authorized_keys<br>chmod 700 $HOME&#x2F;.ssh&#x2F;</p>\n<h1 id=\"authorized-keys和known-hosts文件\"><a href=\"#authorized-keys和known-hosts文件\" class=\"headerlink\" title=\"authorized_keys和known_hosts文件\"></a>authorized_keys和known_hosts文件</h1><p>当新连接一台远程主机，都会进行身份校验，公钥指纹保存在$HOME&#x2F;.ssh&#x2F;known_hosts文件中。<br>远程主机将用户的公钥，保存在登录后的用户主目录的$HOME&#x2F;.ssh&#x2F;authorized_keys文件中。</p>\n<p>因此可以直接将客户端的公钥追加到远程主机的authorized_keys文件中<br>命令如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　$ ssh user@host &#x27;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#x27; &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm8iiexms000436orc5qp1x7c","tag_id":"cm8iiexms000636or05nhec3q","_id":"cm8iiexmu000b36or3t2p24pa"},{"post_id":"cm8iiexms000536or9s5u1x17","tag_id":"cm8iiexmu000a36ora41g7ftx","_id":"cm8iiexmu000c36or0vmr599g"},{"post_id":"cm8iiexmv000e36orhjxtb47d","tag_id":"cm8iiexmv000g36or38jdccnp","_id":"cm8iiexmv000k36or5u122pms"}],"Tag":[{"name":"网络","_id":"cm8iiexms000636or05nhec3q"},{"name":"Technology","_id":"cm8iiexmu000a36ora41g7ftx"},{"name":"fileno","_id":"cm8iiexmv000g36or38jdccnp"}]}}